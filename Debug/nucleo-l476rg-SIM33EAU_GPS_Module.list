
nucleo-l476rg-SIM33EAU_GPS_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006064  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006464  08006464  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800646c  0800646c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000070  080064e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  080064e4  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011664  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c6  00000000  00000000  00031704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00033ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  000345a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274ac  00000000  00000000  00034fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d804  00000000  00000000  0005c454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb7c0  00000000  00000000  00069c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155418  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003710  00000000  00000000  0015546c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061dc 	.word	0x080061dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080061dc 	.word	0x080061dc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <HAL_UART_RxCpltCallback>:


uint8_t flag = 0;

// this interrupts changes flag to 1 as soon as the uint8_t buff[300] is full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	flag = 1;
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <HAL_UART_RxCpltCallback+0x1c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000008c 	.word	0x2000008c

080005b8 <nmea0183_checksum>:

// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

	int checksum = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]

	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 80005c8:	2301      	movs	r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	e00a      	b.n	80005e4 <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	4413      	add	r3, r2
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4053      	eors	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff fdfd 	bl	80001e4 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	1f1a      	subs	r2, r3, #4
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8ec      	bhi.n	80005ce <nmea0183_checksum+0x16>
	}

	return checksum;
 80005f4:	68fb      	ldr	r3, [r7, #12]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <println>:

void print(char *message) {
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 200);
}

void println(char *message) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 200);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff fdeb 	bl	80001e4 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	23c8      	movs	r3, #200	; 0xc8
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <println+0x30>)
 8000618:	f003 f8e8 	bl	80037ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, 200);
 800061c:	23c8      	movs	r3, #200	; 0xc8
 800061e:	2202      	movs	r2, #2
 8000620:	4904      	ldr	r1, [pc, #16]	; (8000634 <println+0x34>)
 8000622:	4803      	ldr	r0, [pc, #12]	; (8000630 <println+0x30>)
 8000624:	f003 f8e2 	bl	80037ec <HAL_UART_Transmit>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200002cc 	.word	0x200002cc
 8000634:	080061f4 	.word	0x080061f4

08000638 <get_gps_data>:

void newline() {
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, 200);
}

char* get_gps_data(char* choice) {
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 800063e:	af00      	add	r7, sp, #0
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	6018      	str	r0, [r3, #0]
		char *ground_speed_raw;
		char ground_speed_buff[7];

		char altitude[4];

		uint8_t cnt = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467

		HAL_UART_Receive_DMA(&huart1, buff, 255);//Start receiving raw sentences from the GPS
 800064a:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800064e:	22ff      	movs	r2, #255	; 0xff
 8000650:	4619      	mov	r1, r3
 8000652:	487a      	ldr	r0, [pc, #488]	; (800083c <get_gps_data+0x204>)
 8000654:	f003 f95e 	bl	8003914 <HAL_UART_Receive_DMA>

		//char command[100] = "$PMTK314,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n"; // GNGLL sentence only. Sentence length: 50;
		//char command[100] = "$PMTK314,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n"; // GNGGA sentence only. Sentence length: 72;
		//char command[100] = "$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n"; // GNVTG sentence only. Sentence length: 33;
		//char command[100] = "$PMTK314,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0*29\r\n"; //all sentences
		char command[100] = "$PMTK314,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0*28\r\n"; //GLL, VTG, and GGA sentences only
 8000658:	f507 768c 	add.w	r6, r7, #280	; 0x118
 800065c:	4b78      	ldr	r3, [pc, #480]	; (8000840 <get_gps_data+0x208>)
 800065e:	4634      	mov	r4, r6
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	682b      	ldr	r3, [r5, #0]
 8000670:	6023      	str	r3, [r4, #0]
 8000672:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fb76 	bl	8004d6c <memset>
		HAL_UART_Transmit(&huart1, (uint8_t*) command, strlen(command), 200); //Send the command to the gps to display certain sentences.
 8000680:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fdad 	bl	80001e4 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29a      	uxth	r2, r3
 800068e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000692:	23c8      	movs	r3, #200	; 0xc8
 8000694:	4869      	ldr	r0, [pc, #420]	; (800083c <get_gps_data+0x204>)
 8000696:	f003 f8a9 	bl	80037ec <HAL_UART_Transmit>




		while (1) {
				if (flag == 1) { // interrupt signals that the buffer buff[300] is full
 800069a:	4b6a      	ldr	r3, [pc, #424]	; (8000844 <get_gps_data+0x20c>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	f040 838a 	bne.w	8000db8 <get_gps_data+0x780>
					//println("flag == 1");

					memset(gps_data, 0, sizeof(gps_data));
 80006a4:	22c8      	movs	r2, #200	; 0xc8
 80006a6:	2100      	movs	r1, #0
 80006a8:	4867      	ldr	r0, [pc, #412]	; (8000848 <get_gps_data+0x210>)
 80006aa:	f004 fb5f 	bl	8004d6c <memset>
					  or \r Carriage return
					  or \n Line feed, end delimiter

					 */

					memset(buffStr, 0, 255);
 80006ae:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fb58 	bl	8004d6c <memset>

					sprintf(buffStr, "%s", buff);
 80006bc:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80006c0:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80006c4:	4961      	ldr	r1, [pc, #388]	; (800084c <get_gps_data+0x214>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fb58 	bl	8004d7c <siprintf>
					// splitting the buffStr by the "\n" delimiter with the strsep() C function
					// see http://www.manpagez.com/man/3/strsep/
					char *token, *string;

					char buffStr_copy[255];
					strcpy(buffStr_copy, buffStr);
 80006cc:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fb8c 	bl	8004df4 <strcpy>
					string = buffStr_copy;
 80006dc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80006e0:	f107 0208 	add.w	r2, r7, #8
 80006e4:	601a      	str	r2, [r3, #0]

					// actually splitting the string by "\n" delimiter
					while ((token = strsep(&string, "\n")) != NULL) {
 80006e6:	e34d      	b.n	8000d84 <get_gps_data+0x74c>
						//println("AFTER newline splitting");

						memset(nmeaSnt, 0, 80);
 80006e8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80006ec:	2250      	movs	r2, #80	; 0x50
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 fb3b 	bl	8004d6c <memset>

						sprintf(nmeaSnt, "%s", token);
 80006f6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80006fa:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 80006fe:	4953      	ldr	r1, [pc, #332]	; (800084c <get_gps_data+0x214>)
 8000700:	4618      	mov	r0, r3
 8000702:	f004 fb3b 	bl	8004d7c <siprintf>

						// selecting only $GNGLL sentences, combined GPS and GLONASS
						// on my GPS sensor this good NMEA sentence is always 50 characters
						if ((strstr(nmeaSnt, "$GNGLL") != 0) && strlen(nmeaSnt) >= 49 && strstr(nmeaSnt, "*") != 0) {
 8000706:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800070a:	4951      	ldr	r1, [pc, #324]	; (8000850 <get_gps_data+0x218>)
 800070c:	4618      	mov	r0, r3
 800070e:	f004 fb7e 	bl	8004e0e <strstr>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	f000 81ea 	beq.w	8000aee <get_gps_data+0x4b6>
 800071a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fd60 	bl	80001e4 <strlen>
 8000724:	4603      	mov	r3, r0
 8000726:	2b30      	cmp	r3, #48	; 0x30
 8000728:	f240 81e1 	bls.w	8000aee <get_gps_data+0x4b6>
 800072c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000730:	212a      	movs	r1, #42	; 0x2a
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fb51 	bl	8004dda <strchr>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	f000 81d7 	beq.w	8000aee <get_gps_data+0x4b6>
							rawSum = strstr(nmeaSnt, "*");
 8000740:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000744:	212a      	movs	r1, #42	; 0x2a
 8000746:	4618      	mov	r0, r3
 8000748:	f004 fb47 	bl	8004dda <strchr>
 800074c:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450

							memcpy(smNmbr, &rawSum[1], 2);
 8000750:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8000754:	3301      	adds	r3, #1
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	b29a      	uxth	r2, r3
 800075a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800075e:	801a      	strh	r2, [r3, #0]

							smNmbr[2] = '\0';
 8000760:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000764:	2200      	movs	r2, #0
 8000766:	709a      	strb	r2, [r3, #2]

							uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8000768:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff23 	bl	80005b8 <nmea0183_checksum>
 8000772:	4603      	mov	r3, r0
 8000774:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f

							char hex[2];

							// "%X" unsigned hexadecimal integer (capital letters)
							sprintf(hex, "%X", intSum);
 8000778:	f897 244f 	ldrb.w	r2, [r7, #1103]	; 0x44f
 800077c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000780:	4934      	ldr	r1, [pc, #208]	; (8000854 <get_gps_data+0x21c>)
 8000782:	4618      	mov	r0, r3
 8000784:	f004 fafa 	bl	8004d7c <siprintf>

							// checksum data verification, if OK, then we can really trust
							// the data in the the NMEA sentence
							if (strstr(smNmbr, hex) != NULL) {
 8000788:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800078c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000790:	4611      	mov	r1, r2
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fb3b 	bl	8004e0e <strstr>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	f000 81a7 	beq.w	8000aee <get_gps_data+0x4b6>

								//if we want display good $GNGLL NMEA sentences
								//HAL_UART_Transmit(&huart2, (uint8_t*)nmeaSnt, 50, 70);
								//HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, 200);

								cnt = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467

								// splitting the good NMEA sentence into the tokens by the comma delimiter
								for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 80007a6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80007aa:	492b      	ldr	r1, [pc, #172]	; (8000858 <get_gps_data+0x220>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 fb45 	bl	8004e3c <strtok>
 80007b2:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
 80007b6:	e068      	b.n	800088a <get_gps_data+0x252>

									switch (cnt) {
 80007b8:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 80007bc:	3b01      	subs	r3, #1
 80007be:	2b04      	cmp	r3, #4
 80007c0:	d858      	bhi.n	8000874 <get_gps_data+0x23c>
 80007c2:	a201      	add	r2, pc, #4	; (adr r2, 80007c8 <get_gps_data+0x190>)
 80007c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c8:	080007dd 	.word	0x080007dd
 80007cc:	080007f5 	.word	0x080007f5
 80007d0:	0800080d 	.word	0x0800080d
 80007d4:	08000825 	.word	0x08000825
 80007d8:	0800085d 	.word	0x0800085d
									case 1:
										strcpy(latRawbuff, pV);
 80007dc:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80007e0:	f8d7 1460 	ldr.w	r1, [r7, #1120]	; 0x460
 80007e4:	4618      	mov	r0, r3
 80007e6:	f004 fb05 	bl	8004df4 <strcpy>
										latRaw = latRawbuff;
 80007ea:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80007ee:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
										break;
 80007f2:	e03f      	b.n	8000874 <get_gps_data+0x23c>
									case 2:
										strcpy(hemNSbuff, pV);
 80007f4:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80007f8:	f8d7 1460 	ldr.w	r1, [r7, #1120]	; 0x460
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 faf9 	bl	8004df4 <strcpy>
										hemNS = hemNSbuff;
 8000802:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8000806:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
										break;
 800080a:	e033      	b.n	8000874 <get_gps_data+0x23c>
									case 3:
										strcpy(lonRawbuff, pV);
 800080c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000810:	f8d7 1460 	ldr.w	r1, [r7, #1120]	; 0x460
 8000814:	4618      	mov	r0, r3
 8000816:	f004 faed 	bl	8004df4 <strcpy>
										lonRaw = lonRawbuff;
 800081a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800081e:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
										break;
 8000822:	e027      	b.n	8000874 <get_gps_data+0x23c>
									case 4:
										strcpy(hemEWbuff, pV);
 8000824:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000828:	f8d7 1460 	ldr.w	r1, [r7, #1120]	; 0x460
 800082c:	4618      	mov	r0, r3
 800082e:	f004 fae1 	bl	8004df4 <strcpy>
										hemEW = hemEWbuff;
 8000832:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000836:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
										break;
 800083a:	e01b      	b.n	8000874 <get_gps_data+0x23c>
 800083c:	20000118 	.word	0x20000118
 8000840:	08006264 	.word	0x08006264
 8000844:	2000008c 	.word	0x2000008c
 8000848:	2000019c 	.word	0x2000019c
 800084c:	080061f8 	.word	0x080061f8
 8000850:	080061fc 	.word	0x080061fc
 8000854:	08006204 	.word	0x08006204
 8000858:	08006208 	.word	0x08006208
									case 5:
										strcpy(utcRawbuff, pV);
 800085c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8000860:	f8d7 1460 	ldr.w	r1, [r7, #1120]	; 0x460
 8000864:	4618      	mov	r0, r3
 8000866:	f004 fac5 	bl	8004df4 <strcpy>
										utcRaw = utcRawbuff;
 800086a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800086e:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
										break;
 8000872:	bf00      	nop
									}

									cnt++;
 8000874:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 8000878:	3301      	adds	r3, #1
 800087a:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
								for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 800087e:	49c8      	ldr	r1, [pc, #800]	; (8000ba0 <get_gps_data+0x568>)
 8000880:	2000      	movs	r0, #0
 8000882:	f004 fadb 	bl	8004e3c <strtok>
 8000886:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
 800088a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800088e:	2b00      	cmp	r3, #0
 8000890:	d192      	bne.n	80007b8 <get_gps_data+0x180>
 8000892:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	b29a      	uxth	r2, r3

								}  // end for()

								memcpy(latDg, &latRaw[0], 2);
 800089a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800089e:	801a      	strh	r2, [r3, #0]
								latDg[2] = '\0';
 80008a0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80008a4:	2200      	movs	r2, #0
 80008a6:	709a      	strb	r2, [r3, #2]

								memcpy(latMS, &latRaw[2], 7);
 80008a8:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80008ac:	1c9a      	adds	r2, r3, #2
 80008ae:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80008b2:	6810      	ldr	r0, [r2, #0]
 80008b4:	6018      	str	r0, [r3, #0]
 80008b6:	8891      	ldrh	r1, [r2, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	8099      	strh	r1, [r3, #4]
 80008bc:	719a      	strb	r2, [r3, #6]
								latMS[7] = '\0';
 80008be:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80008c2:	2200      	movs	r2, #0
 80008c4:	71da      	strb	r2, [r3, #7]

								memcpy(lonDg, &lonRaw[0], 3);
 80008c6:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80008ca:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 80008ce:	8811      	ldrh	r1, [r2, #0]
 80008d0:	7892      	ldrb	r2, [r2, #2]
 80008d2:	8019      	strh	r1, [r3, #0]
 80008d4:	709a      	strb	r2, [r3, #2]
								lonDg[3] = '\0';
 80008d6:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80008da:	2200      	movs	r2, #0
 80008dc:	70da      	strb	r2, [r3, #3]

								memcpy(lonMS, &lonRaw[3], 7);
 80008de:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80008e2:	1cda      	adds	r2, r3, #3
 80008e4:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80008e8:	6810      	ldr	r0, [r2, #0]
 80008ea:	6018      	str	r0, [r3, #0]
 80008ec:	8891      	ldrh	r1, [r2, #4]
 80008ee:	7992      	ldrb	r2, [r2, #6]
 80008f0:	8099      	strh	r1, [r3, #4]
 80008f2:	719a      	strb	r2, [r3, #6]
								lonMS[7] = '\0';
 80008f4:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80008f8:	2200      	movs	r2, #0
 80008fa:	71da      	strb	r2, [r3, #7]
								sprintf(strLonMS, "%s", lonMS);
 80008fc:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8000900:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000904:	49a7      	ldr	r1, [pc, #668]	; (8000ba4 <get_gps_data+0x56c>)
 8000906:	4618      	mov	r0, r3
 8000908:	f004 fa38 	bl	8004d7c <siprintf>
 800090c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	b29a      	uxth	r2, r3

								//converting the UTC time in the hh:mm:ss format
								memcpy(hH, &utcRaw[0], 2);
 8000914:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000918:	801a      	strh	r2, [r3, #0]
								hH[2] = '\0';
 800091a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800091e:	2200      	movs	r2, #0
 8000920:	709a      	strb	r2, [r3, #2]

								memcpy(mM, &utcRaw[2], 2);
 8000922:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8000926:	3302      	adds	r3, #2
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	b29a      	uxth	r2, r3
 800092c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000930:	801a      	strh	r2, [r3, #0]
								mM[2] = '\0';
 8000932:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000936:	2200      	movs	r2, #0
 8000938:	709a      	strb	r2, [r3, #2]

								memcpy(sS, &utcRaw[4], 2);
 800093a:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800093e:	3304      	adds	r3, #4
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	b29a      	uxth	r2, r3
 8000944:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000948:	801a      	strh	r2, [r3, #0]
								sS[2] = '\0';
 800094a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800094e:	2200      	movs	r2, #0
 8000950:	709a      	strb	r2, [r3, #2]

								strcpy(strUTC, hH);
 8000952:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8000956:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f004 fa49 	bl	8004df4 <strcpy>
								strcat(strUTC, ":");
 8000962:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fc3c 	bl	80001e4 <strlen>
 800096c:	4603      	mov	r3, r0
 800096e:	461a      	mov	r2, r3
 8000970:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000974:	4413      	add	r3, r2
 8000976:	498c      	ldr	r1, [pc, #560]	; (8000ba8 <get_gps_data+0x570>)
 8000978:	461a      	mov	r2, r3
 800097a:	460b      	mov	r3, r1
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	8013      	strh	r3, [r2, #0]
								strcat(strUTC, mM);
 8000980:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8000984:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f004 fa16 	bl	8004dbc <strcat>
								strcat(strUTC, ":");
 8000990:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fc25 	bl	80001e4 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80009a2:	4413      	add	r3, r2
 80009a4:	4980      	ldr	r1, [pc, #512]	; (8000ba8 <get_gps_data+0x570>)
 80009a6:	461a      	mov	r2, r3
 80009a8:	460b      	mov	r3, r1
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	8013      	strh	r3, [r2, #0]
								strcat(strUTC, sS);
 80009ae:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80009b2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f004 f9ff 	bl	8004dbc <strcat>
								strUTC[8] = '\0';
 80009be:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80009c2:	2200      	movs	r2, #0
 80009c4:	721a      	strb	r2, [r3, #8]
//								print(lonMS);
//
//								print("\', UTC: ");
//								println(strUTC);
//								newline();
								strcat(gps_data, hemNS);
 80009c6:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 80009ca:	4878      	ldr	r0, [pc, #480]	; (8000bac <get_gps_data+0x574>)
 80009cc:	f004 f9f6 	bl	8004dbc <strcat>
								strcat(gps_data, " ");
 80009d0:	4876      	ldr	r0, [pc, #472]	; (8000bac <get_gps_data+0x574>)
 80009d2:	f7ff fc07 	bl	80001e4 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	4b74      	ldr	r3, [pc, #464]	; (8000bac <get_gps_data+0x574>)
 80009dc:	4413      	add	r3, r2
 80009de:	4974      	ldr	r1, [pc, #464]	; (8000bb0 <get_gps_data+0x578>)
 80009e0:	461a      	mov	r2, r3
 80009e2:	460b      	mov	r3, r1
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	8013      	strh	r3, [r2, #0]
								strcat(gps_data, latDg);
 80009e8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80009ec:	4619      	mov	r1, r3
 80009ee:	486f      	ldr	r0, [pc, #444]	; (8000bac <get_gps_data+0x574>)
 80009f0:	f004 f9e4 	bl	8004dbc <strcat>
								strcat(gps_data, "°");
 80009f4:	486d      	ldr	r0, [pc, #436]	; (8000bac <get_gps_data+0x574>)
 80009f6:	f7ff fbf5 	bl	80001e4 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b6b      	ldr	r3, [pc, #428]	; (8000bac <get_gps_data+0x574>)
 8000a00:	4413      	add	r3, r2
 8000a02:	4a6c      	ldr	r2, [pc, #432]	; (8000bb4 <get_gps_data+0x57c>)
 8000a04:	8811      	ldrh	r1, [r2, #0]
 8000a06:	7892      	ldrb	r2, [r2, #2]
 8000a08:	8019      	strh	r1, [r3, #0]
 8000a0a:	709a      	strb	r2, [r3, #2]
								strcat(gps_data, latMS);
 8000a0c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8000a10:	4619      	mov	r1, r3
 8000a12:	4866      	ldr	r0, [pc, #408]	; (8000bac <get_gps_data+0x574>)
 8000a14:	f004 f9d2 	bl	8004dbc <strcat>
								strcat(gps_data, "\', ");
 8000a18:	4864      	ldr	r0, [pc, #400]	; (8000bac <get_gps_data+0x574>)
 8000a1a:	f7ff fbe3 	bl	80001e4 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b62      	ldr	r3, [pc, #392]	; (8000bac <get_gps_data+0x574>)
 8000a24:	4413      	add	r3, r2
 8000a26:	4a64      	ldr	r2, [pc, #400]	; (8000bb8 <get_gps_data+0x580>)
 8000a28:	6810      	ldr	r0, [r2, #0]
 8000a2a:	6018      	str	r0, [r3, #0]
								strcat(gps_data, hemEW);
 8000a2c:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8000a30:	485e      	ldr	r0, [pc, #376]	; (8000bac <get_gps_data+0x574>)
 8000a32:	f004 f9c3 	bl	8004dbc <strcat>
								strcat(gps_data, " ");
 8000a36:	485d      	ldr	r0, [pc, #372]	; (8000bac <get_gps_data+0x574>)
 8000a38:	f7ff fbd4 	bl	80001e4 <strlen>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b5a      	ldr	r3, [pc, #360]	; (8000bac <get_gps_data+0x574>)
 8000a42:	4413      	add	r3, r2
 8000a44:	495a      	ldr	r1, [pc, #360]	; (8000bb0 <get_gps_data+0x578>)
 8000a46:	461a      	mov	r2, r3
 8000a48:	460b      	mov	r3, r1
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	8013      	strh	r3, [r2, #0]
								strcat(gps_data, lonDg);
 8000a4e:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4855      	ldr	r0, [pc, #340]	; (8000bac <get_gps_data+0x574>)
 8000a56:	f004 f9b1 	bl	8004dbc <strcat>
								strcat(gps_data, "°");
 8000a5a:	4854      	ldr	r0, [pc, #336]	; (8000bac <get_gps_data+0x574>)
 8000a5c:	f7ff fbc2 	bl	80001e4 <strlen>
 8000a60:	4603      	mov	r3, r0
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b51      	ldr	r3, [pc, #324]	; (8000bac <get_gps_data+0x574>)
 8000a66:	4413      	add	r3, r2
 8000a68:	4a52      	ldr	r2, [pc, #328]	; (8000bb4 <get_gps_data+0x57c>)
 8000a6a:	8811      	ldrh	r1, [r2, #0]
 8000a6c:	7892      	ldrb	r2, [r2, #2]
 8000a6e:	8019      	strh	r1, [r3, #0]
 8000a70:	709a      	strb	r2, [r3, #2]
								strcat(gps_data, lonMS);
 8000a72:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8000a76:	4619      	mov	r1, r3
 8000a78:	484c      	ldr	r0, [pc, #304]	; (8000bac <get_gps_data+0x574>)
 8000a7a:	f004 f99f 	bl	8004dbc <strcat>

								if (strcmp(choice, "coordinates") == 0) {
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	494e      	ldr	r1, [pc, #312]	; (8000bbc <get_gps_data+0x584>)
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	f7ff fba4 	bl	80001d0 <strcmp>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <get_gps_data+0x45a>
									return gps_data; //return just the coordinates.
 8000a8e:	4b47      	ldr	r3, [pc, #284]	; (8000bac <get_gps_data+0x574>)
 8000a90:	e196      	b.n	8000dc0 <get_gps_data+0x788>
								}

								strcat(gps_data, "\n\r");
 8000a92:	4846      	ldr	r0, [pc, #280]	; (8000bac <get_gps_data+0x574>)
 8000a94:	f7ff fba6 	bl	80001e4 <strlen>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b43      	ldr	r3, [pc, #268]	; (8000bac <get_gps_data+0x574>)
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a47      	ldr	r2, [pc, #284]	; (8000bc0 <get_gps_data+0x588>)
 8000aa2:	8811      	ldrh	r1, [r2, #0]
 8000aa4:	7892      	ldrb	r2, [r2, #2]
 8000aa6:	8019      	strh	r1, [r3, #0]
 8000aa8:	709a      	strb	r2, [r3, #2]
								strcat(gps_data, strUTC);
 8000aaa:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000aae:	4619      	mov	r1, r3
 8000ab0:	483e      	ldr	r0, [pc, #248]	; (8000bac <get_gps_data+0x574>)
 8000ab2:	f004 f983 	bl	8004dbc <strcat>
								strcat(gps_data, "\n\r");
 8000ab6:	483d      	ldr	r0, [pc, #244]	; (8000bac <get_gps_data+0x574>)
 8000ab8:	f7ff fb94 	bl	80001e4 <strlen>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b3a      	ldr	r3, [pc, #232]	; (8000bac <get_gps_data+0x574>)
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a3e      	ldr	r2, [pc, #248]	; (8000bc0 <get_gps_data+0x588>)
 8000ac6:	8811      	ldrh	r1, [r2, #0]
 8000ac8:	7892      	ldrb	r2, [r2, #2]
 8000aca:	8019      	strh	r1, [r3, #0]
 8000acc:	709a      	strb	r2, [r3, #2]

								if (strcmp(choice, "time") == 0) {
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	493c      	ldr	r1, [pc, #240]	; (8000bc4 <get_gps_data+0x58c>)
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	f7ff fb7c 	bl	80001d0 <strcmp>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d107      	bne.n	8000aee <get_gps_data+0x4b6>
									strcpy(time, strUTC);
 8000ade:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4838      	ldr	r0, [pc, #224]	; (8000bc8 <get_gps_data+0x590>)
 8000ae6:	f004 f985 	bl	8004df4 <strcpy>
									return time; //return just the coordinates.
 8000aea:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <get_gps_data+0x590>)
 8000aec:	e168      	b.n	8000dc0 <get_gps_data+0x788>


						//VTG
						// selecting only $GNVTG sentences, combined GPS and GLONASS
						// on my GPS sensor this good NMEA sentence is always 33 characters
						if ((strstr(nmeaSnt, "$GNVTG") != 0) && strlen(nmeaSnt) >= 32 && strstr(nmeaSnt, "*") != 0) {
 8000aee:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000af2:	4936      	ldr	r1, [pc, #216]	; (8000bcc <get_gps_data+0x594>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f004 f98a 	bl	8004e0e <strstr>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f000 80b8 	beq.w	8000c72 <get_gps_data+0x63a>
 8000b02:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fb6c 	bl	80001e4 <strlen>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b1f      	cmp	r3, #31
 8000b10:	f240 80af 	bls.w	8000c72 <get_gps_data+0x63a>
 8000b14:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000b18:	212a      	movs	r1, #42	; 0x2a
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f004 f95d 	bl	8004dda <strchr>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 80a5 	beq.w	8000c72 <get_gps_data+0x63a>

							rawSum = strstr(nmeaSnt, "*");
 8000b28:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000b2c:	212a      	movs	r1, #42	; 0x2a
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f004 f953 	bl	8004dda <strchr>
 8000b34:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450

							memcpy(smNmbr, &rawSum[1], 2);
 8000b38:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000b46:	801a      	strh	r2, [r3, #0]

							smNmbr[2] = '\0';
 8000b48:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	709a      	strb	r2, [r3, #2]

							uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8000b50:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fd2f 	bl	80005b8 <nmea0183_checksum>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f887 344e 	strb.w	r3, [r7, #1102]	; 0x44e

							char hex[2];

							// "%X" unsigned hexadecimal integer (capital letters)
							sprintf(hex, "%X", intSum);
 8000b60:	f897 244e 	ldrb.w	r2, [r7, #1102]	; 0x44e
 8000b64:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000b68:	4919      	ldr	r1, [pc, #100]	; (8000bd0 <get_gps_data+0x598>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f004 f906 	bl	8004d7c <siprintf>

							// checksum data verification, if OK, then we can really trust
							// the data in the the NMEA sentence
							if (strstr(smNmbr, hex) != NULL) {
 8000b70:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8000b74:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f004 f947 	bl	8004e0e <strstr>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d075      	beq.n	8000c72 <get_gps_data+0x63a>

								//if we want display good $GNVTG NMEA sentences
								//HAL_UART_Transmit(&huart2, (uint8_t*)nmeaSnt, 33, 70);
								//HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, 200);

								cnt = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467

								// splitting the good NMEA sentence into the tokens by the comma delimiter
								for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000b8c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000b90:	4903      	ldr	r1, [pc, #12]	; (8000ba0 <get_gps_data+0x568>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 f952 	bl	8004e3c <strtok>
 8000b98:	f8c7 045c 	str.w	r0, [r7, #1116]	; 0x45c
 8000b9c:	e035      	b.n	8000c0a <get_gps_data+0x5d2>
 8000b9e:	bf00      	nop
 8000ba0:	08006208 	.word	0x08006208
 8000ba4:	080061f8 	.word	0x080061f8
 8000ba8:	0800620c 	.word	0x0800620c
 8000bac:	2000019c 	.word	0x2000019c
 8000bb0:	08006210 	.word	0x08006210
 8000bb4:	08006214 	.word	0x08006214
 8000bb8:	08006218 	.word	0x08006218
 8000bbc:	0800621c 	.word	0x0800621c
 8000bc0:	080061f4 	.word	0x080061f4
 8000bc4:	08006228 	.word	0x08006228
 8000bc8:	20000264 	.word	0x20000264
 8000bcc:	08006230 	.word	0x08006230
 8000bd0:	08006204 	.word	0x08006204
									switch(cnt) {
 8000bd4:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 8000bd8:	2b06      	cmp	r3, #6
 8000bda:	d10b      	bne.n	8000bf4 <get_gps_data+0x5bc>
										case 6:
											strcpy(ground_speed_buff, pV);
 8000bdc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000be0:	f8d7 145c 	ldr.w	r1, [r7, #1116]	; 0x45c
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 f905 	bl	8004df4 <strcpy>
											ground_speed_raw = ground_speed_buff;
 8000bea:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000bee:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
											break;
 8000bf2:	bf00      	nop
									}

									cnt++;
 8000bf4:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
								for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000bfe:	4973      	ldr	r1, [pc, #460]	; (8000dcc <get_gps_data+0x794>)
 8000c00:	2000      	movs	r0, #0
 8000c02:	f004 f91b 	bl	8004e3c <strtok>
 8000c06:	f8c7 045c 	str.w	r0, [r7, #1116]	; 0x45c
 8000c0a:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1e0      	bne.n	8000bd4 <get_gps_data+0x59c>

								}  // end for()
								memcpy(ground_speed_buff, &ground_speed_raw[0], 7);
 8000c12:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c16:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8000c1a:	6810      	ldr	r0, [r2, #0]
 8000c1c:	6018      	str	r0, [r3, #0]
 8000c1e:	8891      	ldrh	r1, [r2, #4]
 8000c20:	7992      	ldrb	r2, [r2, #6]
 8000c22:	8099      	strh	r1, [r3, #4]
 8000c24:	719a      	strb	r2, [r3, #6]
								ground_speed_buff[7] = '\0';
 8000c26:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	71da      	strb	r2, [r3, #7]
//								newline();
//								println("Speed (kph):");
//								println(ground_speed_buff);
//								newline();

								if (strcmp(choice, "speed") == 0) {
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4967      	ldr	r1, [pc, #412]	; (8000dd0 <get_gps_data+0x798>)
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	f7ff facc 	bl	80001d0 <strcmp>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d107      	bne.n	8000c4e <get_gps_data+0x616>
									strcpy(speed, ground_speed_buff);
 8000c3e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c42:	4619      	mov	r1, r3
 8000c44:	4863      	ldr	r0, [pc, #396]	; (8000dd4 <get_gps_data+0x79c>)
 8000c46:	f004 f8d5 	bl	8004df4 <strcpy>
									return speed;
 8000c4a:	4b62      	ldr	r3, [pc, #392]	; (8000dd4 <get_gps_data+0x79c>)
 8000c4c:	e0b8      	b.n	8000dc0 <get_gps_data+0x788>
								}

								strcat(gps_data, ground_speed_buff);
 8000c4e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c52:	4619      	mov	r1, r3
 8000c54:	4860      	ldr	r0, [pc, #384]	; (8000dd8 <get_gps_data+0x7a0>)
 8000c56:	f004 f8b1 	bl	8004dbc <strcat>
								strcat(gps_data, "\n\r");
 8000c5a:	485f      	ldr	r0, [pc, #380]	; (8000dd8 <get_gps_data+0x7a0>)
 8000c5c:	f7ff fac2 	bl	80001e4 <strlen>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b5c      	ldr	r3, [pc, #368]	; (8000dd8 <get_gps_data+0x7a0>)
 8000c66:	4413      	add	r3, r2
 8000c68:	4a5c      	ldr	r2, [pc, #368]	; (8000ddc <get_gps_data+0x7a4>)
 8000c6a:	8811      	ldrh	r1, [r2, #0]
 8000c6c:	7892      	ldrb	r2, [r2, #2]
 8000c6e:	8019      	strh	r1, [r3, #0]
 8000c70:	709a      	strb	r2, [r3, #2]
						} // end of $GNVTG sentences selection

						//GGA
						// selecting only $GNGGA sentences, combined GPS and GLONASS
						// on my GPS sensor this good NMEA sentence is always 72 characters
						if ((strstr(nmeaSnt, "$GNGGA") != 0) && strlen(nmeaSnt) >= 71 && strstr(nmeaSnt, "*") != 0) {
 8000c72:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000c76:	495a      	ldr	r1, [pc, #360]	; (8000de0 <get_gps_data+0x7a8>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 f8c8 	bl	8004e0e <strstr>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d07f      	beq.n	8000d84 <get_gps_data+0x74c>
 8000c84:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff faab 	bl	80001e4 <strlen>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b46      	cmp	r3, #70	; 0x46
 8000c92:	d977      	bls.n	8000d84 <get_gps_data+0x74c>
 8000c94:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000c98:	212a      	movs	r1, #42	; 0x2a
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 f89d 	bl	8004dda <strchr>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d06e      	beq.n	8000d84 <get_gps_data+0x74c>

							rawSum = strstr(nmeaSnt, "*");
 8000ca6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000caa:	212a      	movs	r1, #42	; 0x2a
 8000cac:	4618      	mov	r0, r3
 8000cae:	f004 f894 	bl	8004dda <strchr>
 8000cb2:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450

							memcpy(smNmbr, &rawSum[1], 2);
 8000cb6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8000cba:	3301      	adds	r3, #1
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000cc4:	801a      	strh	r2, [r3, #0]

							smNmbr[2] = '\0';
 8000cc6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000cca:	2200      	movs	r2, #0
 8000ccc:	709a      	strb	r2, [r3, #2]

							uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8000cce:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fc70 	bl	80005b8 <nmea0183_checksum>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 344d 	strb.w	r3, [r7, #1101]	; 0x44d

							char hex[2];

							// "%X" unsigned hexadecimal integer (capital letters)
							sprintf(hex, "%X", intSum);
 8000cde:	f897 244d 	ldrb.w	r2, [r7, #1101]	; 0x44d
 8000ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ce6:	493f      	ldr	r1, [pc, #252]	; (8000de4 <get_gps_data+0x7ac>)
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 f847 	bl	8004d7c <siprintf>

							// checksum data verification, if OK, then we can really trust
							// the data in the the NMEA sentence
							if (strstr(smNmbr, hex) != NULL) {
 8000cee:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000cf2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f004 f888 	bl	8004e0e <strstr>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d03f      	beq.n	8000d84 <get_gps_data+0x74c>

								//if we want display good $GNGGA NMEA sentences
								//HAL_UART_Transmit(&huart2, (uint8_t*)nmeaSnt, 72, 70);
								//HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, 200);

								cnt = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467

								// splitting the good NMEA sentence into the tokens by the comma delimiter
								for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000d0a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000d0e:	492f      	ldr	r1, [pc, #188]	; (8000dcc <get_gps_data+0x794>)
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 f893 	bl	8004e3c <strtok>
 8000d16:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
 8000d1a:	e016      	b.n	8000d4a <get_gps_data+0x712>

									switch(cnt) {
 8000d1c:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 8000d20:	2b09      	cmp	r3, #9
 8000d22:	d107      	bne.n	8000d34 <get_gps_data+0x6fc>
										case 9:
											strcpy(altitude, pV);
 8000d24:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000d28:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 f861 	bl	8004df4 <strcpy>
											break;
 8000d32:	bf00      	nop
									}

									cnt++;
 8000d34:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 8000d38:	3301      	adds	r3, #1
 8000d3a:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
								for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000d3e:	4923      	ldr	r1, [pc, #140]	; (8000dcc <get_gps_data+0x794>)
 8000d40:	2000      	movs	r0, #0
 8000d42:	f004 f87b 	bl	8004e3c <strtok>
 8000d46:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
 8000d4a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1e4      	bne.n	8000d1c <get_gps_data+0x6e4>
//								newline();
//								println("Altitude (above mean sea level):");
//								println(altitude);
//								newline();

								if (strcmp(choice, "altitude") == 0) {
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4924      	ldr	r1, [pc, #144]	; (8000de8 <get_gps_data+0x7b0>)
 8000d56:	6818      	ldr	r0, [r3, #0]
 8000d58:	f7ff fa3a 	bl	80001d0 <strcmp>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10a      	bne.n	8000d78 <get_gps_data+0x740>
									println("test");
 8000d62:	4822      	ldr	r0, [pc, #136]	; (8000dec <get_gps_data+0x7b4>)
 8000d64:	f7ff fc4c 	bl	8000600 <println>
									strcpy(altitude_data, altitude);
 8000d68:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4820      	ldr	r0, [pc, #128]	; (8000df0 <get_gps_data+0x7b8>)
 8000d70:	f004 f840 	bl	8004df4 <strcpy>
									return altitude_data;
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <get_gps_data+0x7b8>)
 8000d76:	e023      	b.n	8000dc0 <get_gps_data+0x788>
								}

								strcat(gps_data, altitude);
 8000d78:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4816      	ldr	r0, [pc, #88]	; (8000dd8 <get_gps_data+0x7a0>)
 8000d80:	f004 f81c 	bl	8004dbc <strcat>
					while ((token = strsep(&string, "\n")) != NULL) {
 8000d84:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000d88:	491a      	ldr	r1, [pc, #104]	; (8000df4 <get_gps_data+0x7bc>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 f83a 	bl	8004e04 <strsep>
 8000d90:	f8c7 0454 	str.w	r0, [r7, #1108]	; 0x454
 8000d94:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f47f aca5 	bne.w	80006e8 <get_gps_data+0xb0>

						} // end of $GNGAA sentences selection

					} // end of splitting the buffStr by the "\n" delimiter with the strsep() C function

					flag = 0; // we are ready to get new data from the sensor
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <get_gps_data+0x7c0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]

//					println(gps_data);
//					newline();
//					newline();

					if (strcmp(choice, "all") == 0) {
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4915      	ldr	r1, [pc, #84]	; (8000dfc <get_gps_data+0x7c4>)
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	f7ff fa11 	bl	80001d0 <strcmp>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <get_gps_data+0x780>
						return gps_data;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <get_gps_data+0x7a0>)
 8000db6:	e003      	b.n	8000dc0 <get_gps_data+0x788>



				} // end of one interrupt/full-buffer cycle

				HAL_Delay(200);
 8000db8:	20c8      	movs	r0, #200	; 0xc8
 8000dba:	f000 fc4f 	bl	800165c <HAL_Delay>
				if (flag == 1) { // interrupt signals that the buffer buff[300] is full
 8000dbe:	e46c      	b.n	800069a <get_gps_data+0x62>
				/* USER CODE END WHILE */

				/* USER CODE BEGIN 3 */
			} //end while

}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f207 4784 	addw	r7, r7, #1156	; 0x484
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	08006208 	.word	0x08006208
 8000dd0:	08006238 	.word	0x08006238
 8000dd4:	20000298 	.word	0x20000298
 8000dd8:	2000019c 	.word	0x2000019c
 8000ddc:	080061f4 	.word	0x080061f4
 8000de0:	08006240 	.word	0x08006240
 8000de4:	08006204 	.word	0x08006204
 8000de8:	08006248 	.word	0x08006248
 8000dec:	08006254 	.word	0x08006254
 8000df0:	20000350 	.word	0x20000350
 8000df4:	0800625c 	.word	0x0800625c
 8000df8:	2000008c 	.word	0x2000008c
 8000dfc:	08006260 	.word	0x08006260

08000e00 <printlnx>:
 */
void printx(char *message) {
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 200);
}

void printlnx(char *message) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 200);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff f9eb 	bl	80001e4 <strlen>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	23c8      	movs	r3, #200	; 0xc8
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	4806      	ldr	r0, [pc, #24]	; (8000e30 <printlnx+0x30>)
 8000e18:	f002 fce8 	bl	80037ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, 200);
 8000e1c:	23c8      	movs	r3, #200	; 0xc8
 8000e1e:	2202      	movs	r2, #2
 8000e20:	4904      	ldr	r1, [pc, #16]	; (8000e34 <printlnx+0x34>)
 8000e22:	4803      	ldr	r0, [pc, #12]	; (8000e30 <printlnx+0x30>)
 8000e24:	f002 fce2 	bl	80037ec <HAL_UART_Transmit>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200002cc 	.word	0x200002cc
 8000e34:	080062c8 	.word	0x080062c8

08000e38 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e3e:	f000 fb91 	bl	8001564 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e42:	f000 f817 	bl	8000e74 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e46:	f000 f8e5 	bl	8001014 <MX_GPIO_Init>
	MX_DMA_Init();
 8000e4a:	f000 f8c5 	bl	8000fd8 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8000e4e:	f000 f863 	bl	8000f18 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000e52:	f000 f891 	bl	8000f78 <MX_USART2_UART_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {

		//printlnx("hi");
		//printlnx(get_gps_data());
		char* data = get_gps_data("all");
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <main+0x38>)
 8000e58:	f7ff fbee 	bl	8000638 <get_gps_data>
 8000e5c:	6078      	str	r0, [r7, #4]
		printlnx(data);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ffce 	bl	8000e00 <printlnx>
		HAL_Delay(1000);
 8000e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e68:	f000 fbf8 	bl	800165c <HAL_Delay>
	while (1) {
 8000e6c:	e7f3      	b.n	8000e56 <main+0x1e>
 8000e6e:	bf00      	nop
 8000e70:	080062cc 	.word	0x080062cc

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b096      	sub	sp, #88	; 0x58
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	2244      	movs	r2, #68	; 0x44
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f003 ff72 	bl	8004d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e9a:	f001 f95b 	bl	8002154 <HAL_PWREx_ControlVoltageScaling>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ea4:	f000 f91c 	bl	80010e0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb2:	2310      	movs	r3, #16
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 f992 	bl	8002200 <HAL_RCC_OscConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ee2:	f000 f8fd 	bl	80010e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eea:	2303      	movs	r3, #3
 8000eec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	2104      	movs	r1, #4
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fd64 	bl	80029cc <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f0a:	f000 f8e9 	bl	80010e0 <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3758      	adds	r7, #88	; 0x58
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_USART1_UART_Init+0x58>)
 8000f1e:	4a15      	ldr	r2, [pc, #84]	; (8000f74 <MX_USART1_UART_Init+0x5c>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_USART1_UART_Init+0x58>)
 8000f24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_USART1_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_USART1_UART_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_USART1_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_USART1_UART_Init+0x58>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_USART1_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_USART1_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_USART1_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_USART1_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_USART1_UART_Init+0x58>)
 8000f5c:	f002 fbf8 	bl	8003750 <HAL_UART_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f66:	f000 f8bb 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000118 	.word	0x20000118
 8000f74:	40013800 	.word	0x40013800

08000f78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_USART2_UART_Init+0x58>)
 8000f7e:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <MX_USART2_UART_Init+0x5c>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <MX_USART2_UART_Init+0x58>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_USART2_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_USART2_UART_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_USART2_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_USART2_UART_Init+0x58>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_USART2_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_USART2_UART_Init+0x58>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_USART2_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_USART2_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_USART2_UART_Init+0x58>)
 8000fbc:	f002 fbc8 	bl	8003750 <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fc6:	f000 f88b 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200002cc 	.word	0x200002cc
 8000fd4:	40004400 	.word	0x40004400

08000fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_DMA_Init+0x38>)
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <MX_DMA_Init+0x38>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6493      	str	r3, [r2, #72]	; 0x48
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_DMA_Init+0x38>)
 8000fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	200f      	movs	r0, #15
 8000ffc:	f000 fc2d 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001000:	200f      	movs	r0, #15
 8001002:	f000 fc46 	bl	8001892 <HAL_NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <MX_GPIO_Init+0xc4>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a2a      	ldr	r2, [pc, #168]	; (80010d8 <MX_GPIO_Init+0xc4>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <MX_GPIO_Init+0xc4>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <MX_GPIO_Init+0xc4>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a24      	ldr	r2, [pc, #144]	; (80010d8 <MX_GPIO_Init+0xc4>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <MX_GPIO_Init+0xc4>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_GPIO_Init+0xc4>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <MX_GPIO_Init+0xc4>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_GPIO_Init+0xc4>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_GPIO_Init+0xc4>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <MX_GPIO_Init+0xc4>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_GPIO_Init+0xc4>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	2120      	movs	r1, #32
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f001 f839 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800109c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	480b      	ldr	r0, [pc, #44]	; (80010dc <MX_GPIO_Init+0xc8>)
 80010ae:	f000 fe81 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010b2:	2320      	movs	r3, #32
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f000 fe72 	bl	8001db4 <HAL_GPIO_Init>

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000800 	.word	0x48000800

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_MspInit+0x44>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_MspInit+0x44>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6613      	str	r3, [r2, #96]	; 0x60
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_MspInit+0x44>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_MspInit+0x44>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x44>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6593      	str	r3, [r2, #88]	; 0x58
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x44>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0ae      	sub	sp, #184	; 0xb8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	2288      	movs	r2, #136	; 0x88
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fe09 	bl	8004d6c <memset>
  if(huart->Instance==USART1)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a5c      	ldr	r2, [pc, #368]	; (80012d0 <HAL_UART_MspInit+0x19c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d16f      	bne.n	8001244 <HAL_UART_MspInit+0x110>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001164:	2301      	movs	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001168:	2300      	movs	r3, #0
 800116a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fe31 	bl	8002dd8 <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800117c:	f7ff ffb0 	bl	80010e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001180:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 8001182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001184:	4a53      	ldr	r2, [pc, #332]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 8001186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118a:	6613      	str	r3, [r2, #96]	; 0x60
 800118c:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b4e      	ldr	r3, [pc, #312]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b4b      	ldr	r3, [pc, #300]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ca:	2307      	movs	r3, #7
 80011cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011d4:	4619      	mov	r1, r3
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011da:	f000 fdeb 	bl	8001db4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80011de:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 80011e0:	4a3e      	ldr	r2, [pc, #248]	; (80012dc <HAL_UART_MspInit+0x1a8>)
 80011e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80011e4:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 80011e6:	2202      	movs	r2, #2
 80011e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f0:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fc:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001202:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 800120a:	2220      	movs	r2, #32
 800120c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 8001210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001214:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001216:	4830      	ldr	r0, [pc, #192]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 8001218:	f000 fb56 	bl	80018c8 <HAL_DMA_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001222:	f7ff ff5d 	bl	80010e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 800122a:	671a      	str	r2, [r3, #112]	; 0x70
 800122c:	4a2a      	ldr	r2, [pc, #168]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2025      	movs	r0, #37	; 0x25
 8001238:	f000 fb0f 	bl	800185a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800123c:	2025      	movs	r0, #37	; 0x25
 800123e:	f000 fb28 	bl	8001892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001242:	e040      	b.n	80012c6 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a25      	ldr	r2, [pc, #148]	; (80012e0 <HAL_UART_MspInit+0x1ac>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d13b      	bne.n	80012c6 <HAL_UART_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800124e:	2302      	movs	r3, #2
 8001250:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001252:	2300      	movs	r3, #0
 8001254:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4618      	mov	r0, r3
 800125c:	f001 fdbc 	bl	8002dd8 <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_UART_MspInit+0x136>
      Error_Handler();
 8001266:	f7ff ff3b 	bl	80010e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 8001270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001274:	6593      	str	r3, [r2, #88]	; 0x58
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800129a:	230c      	movs	r3, #12
 800129c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b2:	2307      	movs	r3, #7
 80012b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012bc:	4619      	mov	r1, r3
 80012be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c2:	f000 fd77 	bl	8001db4 <HAL_GPIO_Init>
}
 80012c6:	bf00      	nop
 80012c8:	37b8      	adds	r7, #184	; 0xb8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40021000 	.word	0x40021000
 80012d8:	200000d0 	.word	0x200000d0
 80012dc:	40020058 	.word	0x40020058
 80012e0:	40004400 	.word	0x40004400

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <NMI_Handler+0x4>

080012ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler+0x4>

080012f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <UsageFault_Handler+0x4>

08001302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001330:	f000 f974 	bl	800161c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <DMA1_Channel5_IRQHandler+0x10>)
 800133e:	f000 fc5a 	bl	8001bf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200000d0 	.word	0x200000d0

0800134c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <USART1_IRQHandler+0x10>)
 8001352:	f002 fb35 	bl	80039c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000118 	.word	0x20000118

08001360 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	return 1;
 8001364:	2301      	movs	r3, #1
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_kill>:

int _kill(int pid, int sig)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800137a:	f003 fccd 	bl	8004d18 <__errno>
 800137e:	4603      	mov	r3, r0
 8001380:	2216      	movs	r2, #22
 8001382:	601a      	str	r2, [r3, #0]
	return -1;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_exit>:

void _exit (int status)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ffe7 	bl	8001370 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013a2:	e7fe      	b.n	80013a2 <_exit+0x12>

080013a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e00a      	b.n	80013cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013b6:	f3af 8000 	nop.w
 80013ba:	4601      	mov	r1, r0
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	b2ca      	uxtb	r2, r1
 80013c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbf0      	blt.n	80013b6 <_read+0x12>
	}

return len;
 80013d4:	687b      	ldr	r3, [r7, #4]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e009      	b.n	8001404 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	60ba      	str	r2, [r7, #8]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3301      	adds	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	dbf1      	blt.n	80013f0 <_write+0x12>
	}
	return len;
 800140c:	687b      	ldr	r3, [r7, #4]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_close>:

int _close(int file)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
	return -1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143e:	605a      	str	r2, [r3, #4]
	return 0;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_isatty>:

int _isatty(int file)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return 1;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	; (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f003 fc32 	bl	8004d18 <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20018000 	.word	0x20018000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	20000090 	.word	0x20000090
 80014e8:	20000398 	.word	0x20000398

080014ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <SystemInit+0x20>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <SystemInit+0x20>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001548 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001514:	f7ff ffea 	bl	80014ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <LoopForever+0x6>)
  ldr r1, =_edata
 800151a:	490d      	ldr	r1, [pc, #52]	; (8001550 <LoopForever+0xa>)
  ldr r2, =_sidata
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <LoopForever+0xe>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001530:	4c0a      	ldr	r4, [pc, #40]	; (800155c <LoopForever+0x16>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153e:	f003 fbf1 	bl	8004d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001542:	f7ff fc79 	bl	8000e38 <main>

08001546 <LoopForever>:

LoopForever:
    b LoopForever
 8001546:	e7fe      	b.n	8001546 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001548:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001550:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001554:	08006474 	.word	0x08006474
  ldr r2, =_sbss
 8001558:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800155c:	20000398 	.word	0x20000398

08001560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC1_2_IRQHandler>
	...

08001564 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_Init+0x3c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_Init+0x3c>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157a:	2003      	movs	r0, #3
 800157c:	f000 f962 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001580:	2000      	movs	r0, #0
 8001582:	f000 f80f 	bl	80015a4 <HAL_InitTick>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	e001      	b.n	8001596 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001592:	f7ff fdab 	bl	80010ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001596:	79fb      	ldrb	r3, [r7, #7]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40022000 	.word	0x40022000

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_InitTick+0x6c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d023      	beq.n	8001600 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_InitTick+0x70>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_InitTick+0x6c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f96d 	bl	80018ae <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10f      	bne.n	80015fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d809      	bhi.n	80015f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 f937 	bl	800185a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ec:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <HAL_InitTick+0x74>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e007      	b.n	8001604 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e004      	b.n	8001604 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e001      	b.n	8001604 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000008 	.word	0x20000008
 8001614:	20000000 	.word	0x20000000
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x20>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x24>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_IncTick+0x24>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000008 	.word	0x20000008
 8001640:	20000384 	.word	0x20000384

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_GetTick+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000384 	.word	0x20000384

0800165c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff ffee 	bl	8001644 <HAL_GetTick>
 8001668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001674:	d005      	beq.n	8001682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_Delay+0x44>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001682:	bf00      	nop
 8001684:	f7ff ffde 	bl	8001644 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	429a      	cmp	r2, r3
 8001692:	d8f7      	bhi.n	8001684 <HAL_Delay+0x28>
  {
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000008 	.word	0x20000008

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <__NVIC_EnableIRQ+0x38>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff29 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff3e 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff8e 	bl	8001798 <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5d 	bl	8001744 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff31 	bl	8001708 <__NVIC_EnableIRQ>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffa2 	bl	8001800 <SysTick_Config>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e098      	b.n	8001a0c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b4d      	ldr	r3, [pc, #308]	; (8001a18 <HAL_DMA_Init+0x150>)
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d80f      	bhi.n	8001906 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HAL_DMA_Init+0x154>)
 80018ee:	4413      	add	r3, r2
 80018f0:	4a4b      	ldr	r2, [pc, #300]	; (8001a20 <HAL_DMA_Init+0x158>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	009a      	lsls	r2, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a48      	ldr	r2, [pc, #288]	; (8001a24 <HAL_DMA_Init+0x15c>)
 8001902:	641a      	str	r2, [r3, #64]	; 0x40
 8001904:	e00e      	b.n	8001924 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <HAL_DMA_Init+0x160>)
 800190e:	4413      	add	r3, r2
 8001910:	4a43      	ldr	r2, [pc, #268]	; (8001a20 <HAL_DMA_Init+0x158>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	009a      	lsls	r2, r3, #2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a42      	ldr	r2, [pc, #264]	; (8001a2c <HAL_DMA_Init+0x164>)
 8001922:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800193a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800193e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001948:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001954:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001960:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800197e:	d039      	beq.n	80019f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	4a27      	ldr	r2, [pc, #156]	; (8001a24 <HAL_DMA_Init+0x15c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11a      	bne.n	80019c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <HAL_DMA_Init+0x168>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f003 031c 	and.w	r3, r3, #28
 8001996:	210f      	movs	r1, #15
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	4924      	ldr	r1, [pc, #144]	; (8001a30 <HAL_DMA_Init+0x168>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_DMA_Init+0x168>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	f003 031c 	and.w	r3, r3, #28
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	491d      	ldr	r1, [pc, #116]	; (8001a30 <HAL_DMA_Init+0x168>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
 80019be:	e019      	b.n	80019f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <HAL_DMA_Init+0x16c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	f003 031c 	and.w	r3, r3, #28
 80019cc:	210f      	movs	r1, #15
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	4917      	ldr	r1, [pc, #92]	; (8001a34 <HAL_DMA_Init+0x16c>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_DMA_Init+0x16c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6859      	ldr	r1, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f003 031c 	and.w	r3, r3, #28
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	4911      	ldr	r1, [pc, #68]	; (8001a34 <HAL_DMA_Init+0x16c>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40020407 	.word	0x40020407
 8001a1c:	bffdfff8 	.word	0xbffdfff8
 8001a20:	cccccccd 	.word	0xcccccccd
 8001a24:	40020000 	.word	0x40020000
 8001a28:	bffdfbf8 	.word	0xbffdfbf8
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	400200a8 	.word	0x400200a8
 8001a34:	400204a8 	.word	0x400204a8

08001a38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_DMA_Start_IT+0x20>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e04b      	b.n	8001af0 <HAL_DMA_Start_IT+0xb8>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d13a      	bne.n	8001ae2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0201 	bic.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	68b9      	ldr	r1, [r7, #8]
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f95f 	bl	8001d54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 020e 	orr.w	r2, r2, #14
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e00f      	b.n	8001ad0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0204 	bic.w	r2, r2, #4
 8001abe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 020a 	orr.w	r2, r2, #10
 8001ace:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e005      	b.n	8001aee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001aea:	2302      	movs	r3, #2
 8001aec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d008      	beq.n	8001b22 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2204      	movs	r2, #4
 8001b14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e022      	b.n	8001b68 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 020e 	bic.w	r2, r2, #14
 8001b30:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f003 021c 	and.w	r2, r3, #28
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2101      	movs	r1, #1
 8001b50:	fa01 f202 	lsl.w	r2, r1, r2
 8001b54:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d005      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	e029      	b.n	8001bec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 020e 	bic.w	r2, r2, #14
 8001ba6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	f003 021c 	and.w	r2, r3, #28
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
    }
  }
  return status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f003 031c 	and.w	r3, r3, #28
 8001c16:	2204      	movs	r2, #4
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d026      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x7a>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d021      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d107      	bne.n	8001c4a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0204 	bic.w	r2, r2, #4
 8001c48:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f003 021c 	and.w	r2, r3, #28
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	2104      	movs	r1, #4
 8001c58:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d071      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001c6e:	e06c      	b.n	8001d4a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c74:	f003 031c 	and.w	r3, r3, #28
 8001c78:	2202      	movs	r2, #2
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d02e      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0xec>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d029      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 020a 	bic.w	r2, r2, #10
 8001caa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	f003 021c 	and.w	r2, r3, #28
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d038      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ce0:	e033      	b.n	8001d4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f003 031c 	and.w	r3, r3, #28
 8001cea:	2208      	movs	r2, #8
 8001cec:	409a      	lsls	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d02a      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x156>
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d025      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 020e 	bic.w	r2, r2, #14
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	f003 021c 	and.w	r2, r3, #28
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d004      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d4a:	bf00      	nop
 8001d4c:	bf00      	nop
}
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f003 021c 	and.w	r2, r3, #28
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	2101      	movs	r1, #1
 8001d70:	fa01 f202 	lsl.w	r2, r1, r2
 8001d74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d108      	bne.n	8001d98 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d96:	e007      	b.n	8001da8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	60da      	str	r2, [r3, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	e17f      	b.n	80020c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8171 	beq.w	80020be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d005      	beq.n	8001df4 <HAL_GPIO_Init+0x40>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d130      	bne.n	8001e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	f003 0201 	and.w	r2, r3, #1
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d118      	bne.n	8001e94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	f003 0201 	and.w	r2, r3, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d017      	beq.n	8001ed0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	6939      	ldr	r1, [r7, #16]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80ac 	beq.w	80020be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	4b5f      	ldr	r3, [pc, #380]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8001f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6a:	4a5e      	ldr	r2, [pc, #376]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6613      	str	r3, [r2, #96]	; 0x60
 8001f72:	4b5c      	ldr	r3, [pc, #368]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8001f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f7e:	4a5a      	ldr	r2, [pc, #360]	; (80020e8 <HAL_GPIO_Init+0x334>)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fa8:	d025      	beq.n	8001ff6 <HAL_GPIO_Init+0x242>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4f      	ldr	r2, [pc, #316]	; (80020ec <HAL_GPIO_Init+0x338>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <HAL_GPIO_Init+0x23e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4e      	ldr	r2, [pc, #312]	; (80020f0 <HAL_GPIO_Init+0x33c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0x23a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4d      	ldr	r2, [pc, #308]	; (80020f4 <HAL_GPIO_Init+0x340>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x236>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4c      	ldr	r2, [pc, #304]	; (80020f8 <HAL_GPIO_Init+0x344>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x232>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4b      	ldr	r2, [pc, #300]	; (80020fc <HAL_GPIO_Init+0x348>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x22e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4a      	ldr	r2, [pc, #296]	; (8002100 <HAL_GPIO_Init+0x34c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x22a>
 8001fda:	2306      	movs	r3, #6
 8001fdc:	e00c      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001fde:	2307      	movs	r3, #7
 8001fe0:	e00a      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001fe2:	2305      	movs	r3, #5
 8001fe4:	e008      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001fea:	2303      	movs	r3, #3
 8001fec:	e004      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e002      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	f002 0203 	and.w	r2, r2, #3
 8001ffe:	0092      	lsls	r2, r2, #2
 8002000:	4093      	lsls	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002008:	4937      	ldr	r1, [pc, #220]	; (80020e8 <HAL_GPIO_Init+0x334>)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	3302      	adds	r3, #2
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002016:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <HAL_GPIO_Init+0x350>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800203a:	4a32      	ldr	r2, [pc, #200]	; (8002104 <HAL_GPIO_Init+0x350>)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002040:	4b30      	ldr	r3, [pc, #192]	; (8002104 <HAL_GPIO_Init+0x350>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002064:	4a27      	ldr	r2, [pc, #156]	; (8002104 <HAL_GPIO_Init+0x350>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800206a:	4b26      	ldr	r3, [pc, #152]	; (8002104 <HAL_GPIO_Init+0x350>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800208e:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_GPIO_Init+0x350>)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_GPIO_Init+0x350>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020b8:	4a12      	ldr	r2, [pc, #72]	; (8002104 <HAL_GPIO_Init+0x350>)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3301      	adds	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa22 f303 	lsr.w	r3, r2, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f47f ae78 	bne.w	8001dc4 <HAL_GPIO_Init+0x10>
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	371c      	adds	r7, #28
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010000 	.word	0x40010000
 80020ec:	48000400 	.word	0x48000400
 80020f0:	48000800 	.word	0x48000800
 80020f4:	48000c00 	.word	0x48000c00
 80020f8:	48001000 	.word	0x48001000
 80020fc:	48001400 	.word	0x48001400
 8002100:	48001800 	.word	0x48001800
 8002104:	40010400 	.word	0x40010400

08002108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]
 8002114:	4613      	mov	r3, r2
 8002116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002118:	787b      	ldrb	r3, [r7, #1]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002124:	e002      	b.n	800212c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <HAL_PWREx_GetVoltageRange+0x18>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40007000 	.word	0x40007000

08002154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002162:	d130      	bne.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800216c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002170:	d038      	beq.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800217a:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002180:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2232      	movs	r2, #50	; 0x32
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0c9b      	lsrs	r3, r3, #18
 8002194:	3301      	adds	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002198:	e002      	b.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3b01      	subs	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ac:	d102      	bne.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f2      	bne.n	800219a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c0:	d110      	bne.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e00f      	b.n	80021e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d2:	d007      	beq.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021dc:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40007000 	.word	0x40007000
 80021f8:	20000000 	.word	0x20000000
 80021fc:	431bde83 	.word	0x431bde83

08002200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e3d4      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002212:	4ba1      	ldr	r3, [pc, #644]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800221c:	4b9e      	ldr	r3, [pc, #632]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80e4 	beq.w	80023fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <HAL_RCC_OscConfig+0x4a>
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	f040 808b 	bne.w	8002358 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b01      	cmp	r3, #1
 8002246:	f040 8087 	bne.w	8002358 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800224a:	4b93      	ldr	r3, [pc, #588]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x62>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e3ac      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <HAL_RCC_OscConfig+0x7c>
 8002272:	4b89      	ldr	r3, [pc, #548]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800227a:	e005      	b.n	8002288 <HAL_RCC_OscConfig+0x88>
 800227c:	4b86      	ldr	r3, [pc, #536]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002288:	4293      	cmp	r3, r2
 800228a:	d223      	bcs.n	80022d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fd41 	bl	8002d18 <RCC_SetFlashLatencyFromMSIRange>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e38d      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a0:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a7c      	ldr	r2, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022a6:	f043 0308 	orr.w	r3, r3, #8
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4977      	ldr	r1, [pc, #476]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022be:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	4972      	ldr	r1, [pc, #456]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
 80022d2:	e025      	b.n	8002320 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d4:	4b70      	ldr	r3, [pc, #448]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6f      	ldr	r2, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022da:	f043 0308 	orr.w	r3, r3, #8
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	496a      	ldr	r1, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f2:	4b69      	ldr	r3, [pc, #420]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	4965      	ldr	r1, [pc, #404]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fd01 	bl	8002d18 <RCC_SetFlashLatencyFromMSIRange>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e34d      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002320:	f000 fc36 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	495a      	ldr	r1, [pc, #360]	; (800249c <HAL_RCC_OscConfig+0x29c>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
 800233c:	4a58      	ldr	r2, [pc, #352]	; (80024a0 <HAL_RCC_OscConfig+0x2a0>)
 800233e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002340:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <HAL_RCC_OscConfig+0x2a4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f92d 	bl	80015a4 <HAL_InitTick>
 800234a:	4603      	mov	r3, r0
 800234c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d052      	beq.n	80023fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	e331      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d032      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002360:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800236c:	f7ff f96a 	bl	8001644 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002374:	f7ff f966 	bl	8001644 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e31a      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002386:	4b44      	ldr	r3, [pc, #272]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a40      	ldr	r2, [pc, #256]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	493b      	ldr	r1, [pc, #236]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b0:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	4936      	ldr	r1, [pc, #216]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
 80023c4:	e01a      	b.n	80023fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023c6:	4b34      	ldr	r3, [pc, #208]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a33      	ldr	r2, [pc, #204]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d2:	f7ff f937 	bl	8001644 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023da:	f7ff f933 	bl	8001644 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e2e7      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x1da>
 80023f8:	e000      	b.n	80023fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d074      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b08      	cmp	r3, #8
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x21a>
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b0c      	cmp	r3, #12
 8002412:	d10e      	bne.n	8002432 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d10b      	bne.n	8002432 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241a:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d064      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d160      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e2c4      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x24a>
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a15      	ldr	r2, [pc, #84]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e01d      	b.n	8002486 <HAL_RCC_OscConfig+0x286>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002452:	d10c      	bne.n	800246e <HAL_RCC_OscConfig+0x26e>
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800245a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e00b      	b.n	8002486 <HAL_RCC_OscConfig+0x286>
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a06      	ldr	r2, [pc, #24]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002484:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7ff f8d9 	bl	8001644 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002494:	e011      	b.n	80024ba <HAL_RCC_OscConfig+0x2ba>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	080062d0 	.word	0x080062d0
 80024a0:	20000000 	.word	0x20000000
 80024a4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff f8cc 	bl	8001644 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e280      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ba:	4baf      	ldr	r3, [pc, #700]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x2a8>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7ff f8bc 	bl	8001644 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff f8b8 	bl	8001644 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e26c      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e2:	4ba5      	ldr	r3, [pc, #660]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2d0>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d060      	beq.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b04      	cmp	r3, #4
 8002502:	d005      	beq.n	8002510 <HAL_RCC_OscConfig+0x310>
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d119      	bne.n	800253e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d116      	bne.n	800253e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002510:	4b99      	ldr	r3, [pc, #612]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_OscConfig+0x328>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e249      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b93      	ldr	r3, [pc, #588]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	4990      	ldr	r1, [pc, #576]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800253c:	e040      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d023      	beq.n	800258e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002546:	4b8c      	ldr	r3, [pc, #560]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a8b      	ldr	r2, [pc, #556]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7ff f877 	bl	8001644 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7ff f873 	bl	8001644 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e227      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256c:	4b82      	ldr	r3, [pc, #520]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b7f      	ldr	r3, [pc, #508]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	497c      	ldr	r1, [pc, #496]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
 800258c:	e018      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b7a      	ldr	r3, [pc, #488]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a79      	ldr	r2, [pc, #484]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7ff f853 	bl	8001644 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7ff f84f 	bl	8001644 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e203      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b4:	4b70      	ldr	r3, [pc, #448]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d03c      	beq.n	8002646 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01c      	beq.n	800260e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d4:	4b68      	ldr	r3, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025da:	4a67      	ldr	r2, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7ff f82e 	bl	8001644 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7ff f82a 	bl	8001644 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1de      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fe:	4b5e      	ldr	r3, [pc, #376]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ef      	beq.n	80025ec <HAL_RCC_OscConfig+0x3ec>
 800260c:	e01b      	b.n	8002646 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260e:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7ff f811 	bl	8001644 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002626:	f7ff f80d 	bl	8001644 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1c1      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002638:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800263a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ef      	bne.n	8002626 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80a6 	beq.w	80027a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002658:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10d      	bne.n	8002680 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002664:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	4a43      	ldr	r2, [pc, #268]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800266a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266e:	6593      	str	r3, [r2, #88]	; 0x58
 8002670:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267c:	2301      	movs	r3, #1
 800267e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002680:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_RCC_OscConfig+0x57c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d118      	bne.n	80026be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800268c:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_RCC_OscConfig+0x57c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3a      	ldr	r2, [pc, #232]	; (800277c <HAL_RCC_OscConfig+0x57c>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002698:	f7fe ffd4 	bl	8001644 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a0:	f7fe ffd0 	bl	8001644 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e184      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b2:	4b32      	ldr	r3, [pc, #200]	; (800277c <HAL_RCC_OscConfig+0x57c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d108      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4d8>
 80026c6:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026d6:	e024      	b.n	8002722 <HAL_RCC_OscConfig+0x522>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d110      	bne.n	8002702 <HAL_RCC_OscConfig+0x502>
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	4a24      	ldr	r2, [pc, #144]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f0:	4b21      	ldr	r3, [pc, #132]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	4a20      	ldr	r2, [pc, #128]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002700:	e00f      	b.n	8002722 <HAL_RCC_OscConfig+0x522>
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	4a17      	ldr	r2, [pc, #92]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800271a:	f023 0304 	bic.w	r3, r3, #4
 800271e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fe ff8b 	bl	8001644 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002730:	e00a      	b.n	8002748 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe ff87 	bl	8001644 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e139      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ed      	beq.n	8002732 <HAL_RCC_OscConfig+0x532>
 8002756:	e01a      	b.n	800278e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7fe ff74 	bl	8001644 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800275e:	e00f      	b.n	8002780 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7fe ff70 	bl	8001644 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d906      	bls.n	8002780 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e122      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002780:	4b90      	ldr	r3, [pc, #576]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e8      	bne.n	8002760 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800278e:	7ffb      	ldrb	r3, [r7, #31]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002794:	4b8b      	ldr	r3, [pc, #556]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	4a8a      	ldr	r2, [pc, #552]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 800279a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8108 	beq.w	80029ba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	f040 80d0 	bne.w	8002954 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027b4:	4b83      	ldr	r3, [pc, #524]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0203 	and.w	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d130      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	3b01      	subs	r3, #1
 80027d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d127      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d11f      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027f4:	2a07      	cmp	r2, #7
 80027f6:	bf14      	ite	ne
 80027f8:	2201      	movne	r2, #1
 80027fa:	2200      	moveq	r2, #0
 80027fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027fe:	4293      	cmp	r3, r2
 8002800:	d113      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	085b      	lsrs	r3, r3, #1
 800280e:	3b01      	subs	r3, #1
 8002810:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d109      	bne.n	800282a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	3b01      	subs	r3, #1
 8002824:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d06e      	beq.n	8002908 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b0c      	cmp	r3, #12
 800282e:	d069      	beq.n	8002904 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002830:	4b64      	ldr	r3, [pc, #400]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800283c:	4b61      	ldr	r3, [pc, #388]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0b7      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800284c:	4b5d      	ldr	r3, [pc, #372]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5c      	ldr	r2, [pc, #368]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002856:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002858:	f7fe fef4 	bl	8001644 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fef0 	bl	8001644 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0a4      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002872:	4b54      	ldr	r3, [pc, #336]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800287e:	4b51      	ldr	r3, [pc, #324]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <HAL_RCC_OscConfig+0x7c8>)
 8002884:	4013      	ands	r3, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800288e:	3a01      	subs	r2, #1
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4311      	orrs	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002898:	0212      	lsls	r2, r2, #8
 800289a:	4311      	orrs	r1, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028a0:	0852      	lsrs	r2, r2, #1
 80028a2:	3a01      	subs	r2, #1
 80028a4:	0552      	lsls	r2, r2, #21
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028ac:	0852      	lsrs	r2, r2, #1
 80028ae:	3a01      	subs	r2, #1
 80028b0:	0652      	lsls	r2, r2, #25
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028b8:	0912      	lsrs	r2, r2, #4
 80028ba:	0452      	lsls	r2, r2, #17
 80028bc:	430a      	orrs	r2, r1
 80028be:	4941      	ldr	r1, [pc, #260]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028c4:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3e      	ldr	r2, [pc, #248]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d0:	4b3c      	ldr	r3, [pc, #240]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a3b      	ldr	r2, [pc, #236]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028dc:	f7fe feb2 	bl	8001644 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe feae 	bl	8001644 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e062      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002902:	e05a      	b.n	80029ba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e059      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002908:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d152      	bne.n	80029ba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002914:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2a      	ldr	r2, [pc, #168]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 800291a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002920:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800292c:	f7fe fe8a 	bl	8001644 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fe86 	bl	8001644 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e03a      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x734>
 8002952:	e032      	b.n	80029ba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d02d      	beq.n	80029b6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002960:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002964:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002978:	f023 0303 	bic.w	r3, r3, #3
 800297c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4a10      	ldr	r2, [pc, #64]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 8002984:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7fe fe59 	bl	8001644 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fe55 	bl	8001644 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e009      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCC_OscConfig+0x7c4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x796>
 80029b4:	e001      	b.n	80029ba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	f99d808c 	.word	0xf99d808c

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0c8      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b66      	ldr	r3, [pc, #408]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d910      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 0207 	bic.w	r2, r3, #7
 80029f6:	4961      	ldr	r1, [pc, #388]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b5f      	ldr	r3, [pc, #380]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0b0      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d04c      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a24:	4b56      	ldr	r3, [pc, #344]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d121      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e09e      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3c:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d115      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e092      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a54:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e086      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a64:	4b46      	ldr	r3, [pc, #280]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e07e      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a74:	4b42      	ldr	r3, [pc, #264]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 0203 	bic.w	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	493f      	ldr	r1, [pc, #252]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a86:	f7fe fddd 	bl	8001644 <HAL_GetTick>
 8002a8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8e:	f7fe fdd9 	bl	8001644 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e066      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa4:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 020c 	and.w	r2, r3, #12
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d1eb      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac2:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	492c      	ldr	r1, [pc, #176]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d210      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 0207 	bic.w	r2, r3, #7
 8002aea:	4924      	ldr	r1, [pc, #144]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <HAL_RCC_ClockConfig+0x1b0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e036      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4918      	ldr	r1, [pc, #96]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4910      	ldr	r1, [pc, #64]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b42:	f000 f825 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	490c      	ldr	r1, [pc, #48]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	5ccb      	ldrb	r3, [r1, r3]
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fd1c 	bl	80015a4 <HAL_InitTick>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b70:	7afb      	ldrb	r3, [r7, #11]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40021000 	.word	0x40021000
 8002b84:	080062d0 	.word	0x080062d0
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	20000004 	.word	0x20000004

08002b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9e:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba8:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d121      	bne.n	8002c02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d11e      	bne.n	8002c02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bc4:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bd0:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	e005      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bec:	4a2b      	ldr	r2, [pc, #172]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10d      	bne.n	8002c18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	e004      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	d134      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d003      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0xac>
 8002c34:	e005      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c36:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c38:	617b      	str	r3, [r7, #20]
      break;
 8002c3a:	e005      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c3e:	617b      	str	r3, [r7, #20]
      break;
 8002c40:	e002      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	617b      	str	r3, [r7, #20]
      break;
 8002c46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	3301      	adds	r3, #1
 8002c54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	fb02 f203 	mul.w	r2, r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	0e5b      	lsrs	r3, r3, #25
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c88:	69bb      	ldr	r3, [r7, #24]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	080062e8 	.word	0x080062e8
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	007a1200 	.word	0x007a1200

08002ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4904      	ldr	r1, [pc, #16]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	080062e0 	.word	0x080062e0

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cf0:	f7ff ffda 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	0adb      	lsrs	r3, r3, #11
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4904      	ldr	r1, [pc, #16]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	080062e0 	.word	0x080062e0

08002d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d30:	f7ff fa02 	bl	8002138 <HAL_PWREx_GetVoltageRange>
 8002d34:	6178      	str	r0, [r7, #20]
 8002d36:	e014      	b.n	8002d62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d42:	6593      	str	r3, [r2, #88]	; 0x58
 8002d44:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d50:	f7ff f9f2 	bl	8002138 <HAL_PWREx_GetVoltageRange>
 8002d54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d56:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	4a1d      	ldr	r2, [pc, #116]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d68:	d10b      	bne.n	8002d82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b80      	cmp	r3, #128	; 0x80
 8002d6e:	d919      	bls.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2ba0      	cmp	r3, #160	; 0xa0
 8002d74:	d902      	bls.n	8002d7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d76:	2302      	movs	r3, #2
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e013      	b.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	e010      	b.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b80      	cmp	r3, #128	; 0x80
 8002d86:	d902      	bls.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d88:	2303      	movs	r3, #3
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e00a      	b.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b80      	cmp	r3, #128	; 0x80
 8002d92:	d102      	bne.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d94:	2302      	movs	r3, #2
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e004      	b.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b70      	cmp	r3, #112	; 0x70
 8002d9e:	d101      	bne.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002da0:	2301      	movs	r3, #1
 8002da2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 0207 	bic.w	r2, r3, #7
 8002dac:	4909      	ldr	r1, [pc, #36]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d001      	beq.n	8002dc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40022000 	.word	0x40022000

08002dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002de0:	2300      	movs	r3, #0
 8002de2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002de4:	2300      	movs	r3, #0
 8002de6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d041      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dfc:	d02a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002dfe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e02:	d824      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e08:	d008      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e0e:	d81e      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e18:	d010      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e1a:	e018      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e1c:	4b86      	ldr	r3, [pc, #536]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4a85      	ldr	r2, [pc, #532]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e28:	e015      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fabb 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8002e36:	4603      	mov	r3, r0
 8002e38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e3a:	e00c      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3320      	adds	r3, #32
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fba6 	bl	8003594 <RCCEx_PLLSAI2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e4c:	e003      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	74fb      	strb	r3, [r7, #19]
      break;
 8002e52:	e000      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e5c:	4b76      	ldr	r3, [pc, #472]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6a:	4973      	ldr	r1, [pc, #460]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e72:	e001      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d041      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e8c:	d02a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e92:	d824      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e98:	d008      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e9e:	d81e      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea8:	d010      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eaa:	e018      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eac:	4b62      	ldr	r3, [pc, #392]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a61      	ldr	r2, [pc, #388]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fa73 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3320      	adds	r3, #32
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fb5e 	bl	8003594 <RCCEx_PLLSAI2_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eec:	4b52      	ldr	r3, [pc, #328]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efa:	494f      	ldr	r1, [pc, #316]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f02:	e001      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a0 	beq.w	8003056 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00d      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	4a40      	ldr	r2, [pc, #256]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3c:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3a      	ldr	r2, [pc, #232]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f58:	f7fe fb74 	bl	8001644 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f5e:	e009      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7fe fb70 	bl	8001644 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d902      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	74fb      	strb	r3, [r7, #19]
        break;
 8002f72:	e005      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ef      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d15c      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f86:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01f      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d019      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fb0:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	4a20      	ldr	r2, [pc, #128]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d016      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fe fb2f 	bl	8001644 <HAL_GetTick>
 8002fe6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe8:	e00b      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe fb2b 	bl	8001644 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d902      	bls.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	74fb      	strb	r3, [r7, #19]
            break;
 8003000:	e006      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ec      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	4904      	ldr	r1, [pc, #16]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800302e:	e009      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	74bb      	strb	r3, [r7, #18]
 8003034:	e006      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003044:	7c7b      	ldrb	r3, [r7, #17]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4b9e      	ldr	r3, [pc, #632]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	4a9d      	ldr	r2, [pc, #628]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003062:	4b98      	ldr	r3, [pc, #608]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003068:	f023 0203 	bic.w	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	4994      	ldr	r1, [pc, #592]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003084:	4b8f      	ldr	r3, [pc, #572]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f023 020c 	bic.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	498c      	ldr	r1, [pc, #560]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030a6:	4b87      	ldr	r3, [pc, #540]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	4983      	ldr	r1, [pc, #524]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030c8:	4b7e      	ldr	r3, [pc, #504]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	497b      	ldr	r1, [pc, #492]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030ea:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f8:	4972      	ldr	r1, [pc, #456]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800310c:	4b6d      	ldr	r3, [pc, #436]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	496a      	ldr	r1, [pc, #424]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800312e:	4b65      	ldr	r3, [pc, #404]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	4961      	ldr	r1, [pc, #388]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003150:	4b5c      	ldr	r3, [pc, #368]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315e:	4959      	ldr	r1, [pc, #356]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003172:	4b54      	ldr	r3, [pc, #336]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003180:	4950      	ldr	r1, [pc, #320]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	4948      	ldr	r1, [pc, #288]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031b6:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	493f      	ldr	r1, [pc, #252]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d028      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031d8:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e6:	4937      	ldr	r1, [pc, #220]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031f6:	d106      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a31      	ldr	r2, [pc, #196]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003202:	60d3      	str	r3, [r2, #12]
 8003204:	e011      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800320a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800320e:	d10c      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	2101      	movs	r1, #1
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f8c8 	bl	80033ac <RCCEx_PLLSAI1_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003226:	7cfb      	ldrb	r3, [r7, #19]
 8003228:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d028      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003236:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	491f      	ldr	r1, [pc, #124]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003254:	d106      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003260:	60d3      	str	r3, [r2, #12]
 8003262:	e011      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800326c:	d10c      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3304      	adds	r3, #4
 8003272:	2101      	movs	r1, #1
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f899 	bl	80033ac <RCCEx_PLLSAI1_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800327e:	7cfb      	ldrb	r3, [r7, #19]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d02b      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a2:	4908      	ldr	r1, [pc, #32]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b2:	d109      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a02      	ldr	r2, [pc, #8]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032be:	60d3      	str	r3, [r2, #12]
 80032c0:	e014      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032d0:	d10c      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 f867 	bl	80033ac <RCCEx_PLLSAI1_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d02f      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003306:	4928      	ldr	r1, [pc, #160]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003316:	d10d      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f844 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d014      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	74bb      	strb	r3, [r7, #18]
 8003332:	e011      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333c:	d10c      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3320      	adds	r3, #32
 8003342:	2102      	movs	r1, #2
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f925 	bl	8003594 <RCCEx_PLLSAI2_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003364:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003372:	490d      	ldr	r1, [pc, #52]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003396:	4904      	ldr	r1, [pc, #16]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800339e:	7cbb      	ldrb	r3, [r7, #18]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000

080033ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ba:	4b75      	ldr	r3, [pc, #468]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d018      	beq.n	80033f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033c6:	4b72      	ldr	r3, [pc, #456]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0203 	and.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10d      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
       ||
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033de:	4b6c      	ldr	r3, [pc, #432]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
       ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d047      	beq.n	8003482 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	e044      	b.n	8003482 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d018      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0x86>
 8003400:	2b03      	cmp	r3, #3
 8003402:	d825      	bhi.n	8003450 <RCCEx_PLLSAI1_Config+0xa4>
 8003404:	2b01      	cmp	r3, #1
 8003406:	d002      	beq.n	800340e <RCCEx_PLLSAI1_Config+0x62>
 8003408:	2b02      	cmp	r3, #2
 800340a:	d009      	beq.n	8003420 <RCCEx_PLLSAI1_Config+0x74>
 800340c:	e020      	b.n	8003450 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800340e:	4b60      	ldr	r3, [pc, #384]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11d      	bne.n	8003456 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800341e:	e01a      	b.n	8003456 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003420:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d116      	bne.n	800345a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003430:	e013      	b.n	800345a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003432:	4b57      	ldr	r3, [pc, #348]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800343e:	4b54      	ldr	r3, [pc, #336]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800344e:	e006      	b.n	800345e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      break;
 8003454:	e004      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003456:	bf00      	nop
 8003458:	e002      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800345a:	bf00      	nop
 800345c:	e000      	b.n	8003460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800345e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003466:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	430b      	orrs	r3, r1
 800347c:	4944      	ldr	r1, [pc, #272]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347e:	4313      	orrs	r3, r2
 8003480:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d17d      	bne.n	8003584 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003488:	4b41      	ldr	r3, [pc, #260]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a40      	ldr	r2, [pc, #256]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003494:	f7fe f8d6 	bl	8001644 <HAL_GetTick>
 8003498:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800349a:	e009      	b.n	80034b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800349c:	f7fe f8d2 	bl	8001644 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d902      	bls.n	80034b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	73fb      	strb	r3, [r7, #15]
        break;
 80034ae:	e005      	b.n	80034bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b0:	4b37      	ldr	r3, [pc, #220]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ef      	bne.n	800349c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d160      	bne.n	8003584 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d111      	bne.n	80034ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034c8:	4b31      	ldr	r3, [pc, #196]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6892      	ldr	r2, [r2, #8]
 80034d8:	0211      	lsls	r1, r2, #8
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68d2      	ldr	r2, [r2, #12]
 80034de:	0912      	lsrs	r2, r2, #4
 80034e0:	0452      	lsls	r2, r2, #17
 80034e2:	430a      	orrs	r2, r1
 80034e4:	492a      	ldr	r1, [pc, #168]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	610b      	str	r3, [r1, #16]
 80034ea:	e027      	b.n	800353c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d112      	bne.n	8003518 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034f2:	4b27      	ldr	r3, [pc, #156]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6892      	ldr	r2, [r2, #8]
 8003502:	0211      	lsls	r1, r2, #8
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6912      	ldr	r2, [r2, #16]
 8003508:	0852      	lsrs	r2, r2, #1
 800350a:	3a01      	subs	r2, #1
 800350c:	0552      	lsls	r2, r2, #21
 800350e:	430a      	orrs	r2, r1
 8003510:	491f      	ldr	r1, [pc, #124]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	610b      	str	r3, [r1, #16]
 8003516:	e011      	b.n	800353c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003520:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6892      	ldr	r2, [r2, #8]
 8003528:	0211      	lsls	r1, r2, #8
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6952      	ldr	r2, [r2, #20]
 800352e:	0852      	lsrs	r2, r2, #1
 8003530:	3a01      	subs	r2, #1
 8003532:	0652      	lsls	r2, r2, #25
 8003534:	430a      	orrs	r2, r1
 8003536:	4916      	ldr	r1, [pc, #88]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800353c:	4b14      	ldr	r3, [pc, #80]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a13      	ldr	r2, [pc, #76]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003542:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003546:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fe f87c 	bl	8001644 <HAL_GetTick>
 800354c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800354e:	e009      	b.n	8003564 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003550:	f7fe f878 	bl	8001644 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d902      	bls.n	8003564 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	73fb      	strb	r3, [r7, #15]
          break;
 8003562:	e005      	b.n	8003570 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ef      	beq.n	8003550 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	4904      	ldr	r1, [pc, #16]	; (8003590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003580:	4313      	orrs	r3, r2
 8003582:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000

08003594 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035a2:	4b6a      	ldr	r3, [pc, #424]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d018      	beq.n	80035e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035ae:	4b67      	ldr	r3, [pc, #412]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0203 	and.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d10d      	bne.n	80035da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
       ||
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035c6:	4b61      	ldr	r3, [pc, #388]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
       ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d047      	beq.n	800366a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	e044      	b.n	800366a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d018      	beq.n	800361a <RCCEx_PLLSAI2_Config+0x86>
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d825      	bhi.n	8003638 <RCCEx_PLLSAI2_Config+0xa4>
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d002      	beq.n	80035f6 <RCCEx_PLLSAI2_Config+0x62>
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d009      	beq.n	8003608 <RCCEx_PLLSAI2_Config+0x74>
 80035f4:	e020      	b.n	8003638 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035f6:	4b55      	ldr	r3, [pc, #340]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11d      	bne.n	800363e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003606:	e01a      	b.n	800363e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003608:	4b50      	ldr	r3, [pc, #320]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d116      	bne.n	8003642 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e013      	b.n	8003642 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800361a:	4b4c      	ldr	r3, [pc, #304]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003626:	4b49      	ldr	r3, [pc, #292]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003636:	e006      	b.n	8003646 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e004      	b.n	8003648 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800363e:	bf00      	nop
 8003640:	e002      	b.n	8003648 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003642:	bf00      	nop
 8003644:	e000      	b.n	8003648 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003646:	bf00      	nop
    }

    if(status == HAL_OK)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10d      	bne.n	800366a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800364e:	4b3f      	ldr	r3, [pc, #252]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	430b      	orrs	r3, r1
 8003664:	4939      	ldr	r1, [pc, #228]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003666:	4313      	orrs	r3, r2
 8003668:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d167      	bne.n	8003740 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003670:	4b36      	ldr	r3, [pc, #216]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a35      	ldr	r2, [pc, #212]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367c:	f7fd ffe2 	bl	8001644 <HAL_GetTick>
 8003680:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003682:	e009      	b.n	8003698 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003684:	f7fd ffde 	bl	8001644 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d902      	bls.n	8003698 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	73fb      	strb	r3, [r7, #15]
        break;
 8003696:	e005      	b.n	80036a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003698:	4b2c      	ldr	r3, [pc, #176]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1ef      	bne.n	8003684 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d14a      	bne.n	8003740 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d111      	bne.n	80036d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036b0:	4b26      	ldr	r3, [pc, #152]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6892      	ldr	r2, [r2, #8]
 80036c0:	0211      	lsls	r1, r2, #8
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68d2      	ldr	r2, [r2, #12]
 80036c6:	0912      	lsrs	r2, r2, #4
 80036c8:	0452      	lsls	r2, r2, #17
 80036ca:	430a      	orrs	r2, r1
 80036cc:	491f      	ldr	r1, [pc, #124]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	614b      	str	r3, [r1, #20]
 80036d2:	e011      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6892      	ldr	r2, [r2, #8]
 80036e4:	0211      	lsls	r1, r2, #8
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6912      	ldr	r2, [r2, #16]
 80036ea:	0852      	lsrs	r2, r2, #1
 80036ec:	3a01      	subs	r2, #1
 80036ee:	0652      	lsls	r2, r2, #25
 80036f0:	430a      	orrs	r2, r1
 80036f2:	4916      	ldr	r1, [pc, #88]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a13      	ldr	r2, [pc, #76]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fd ff9e 	bl	8001644 <HAL_GetTick>
 8003708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800370a:	e009      	b.n	8003720 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800370c:	f7fd ff9a 	bl	8001644 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d902      	bls.n	8003720 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	73fb      	strb	r3, [r7, #15]
          break;
 800371e:	e005      	b.n	800372c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ef      	beq.n	800370c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	4904      	ldr	r1, [pc, #16]	; (800374c <RCCEx_PLLSAI2_Config+0x1b8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000

08003750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e040      	b.n	80037e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fd fcde 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	; 0x24
 800377c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fc22 	bl	8003fd8 <UART_SetConfig>
 8003794:	4603      	mov	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e022      	b.n	80037e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fea0 	bl	80044ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 ff27 	bl	8004630 <UART_CheckIdleState>
 80037e2:	4603      	mov	r3, r0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003800:	2b20      	cmp	r3, #32
 8003802:	f040 8082 	bne.w	800390a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_UART_Transmit+0x26>
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e07a      	b.n	800390c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_UART_Transmit+0x38>
 8003820:	2302      	movs	r3, #2
 8003822:	e073      	b.n	800390c <HAL_UART_Transmit+0x120>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2221      	movs	r2, #33	; 0x21
 8003838:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800383a:	f7fd ff03 	bl	8001644 <HAL_GetTick>
 800383e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003858:	d108      	bne.n	800386c <HAL_UART_Transmit+0x80>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d104      	bne.n	800386c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	e003      	b.n	8003874 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800387c:	e02d      	b.n	80038da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2200      	movs	r2, #0
 8003886:	2180      	movs	r1, #128	; 0x80
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 ff1a 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e039      	b.n	800390c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	881a      	ldrh	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038aa:	b292      	uxth	r2, r2
 80038ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	3302      	adds	r3, #2
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	e008      	b.n	80038c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	b292      	uxth	r2, r2
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3301      	adds	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1cb      	bne.n	800387e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2200      	movs	r2, #0
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fee6 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e005      	b.n	800390c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003926:	2b20      	cmp	r3, #32
 8003928:	d142      	bne.n	80039b0 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_UART_Receive_DMA+0x22>
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e03b      	b.n	80039b2 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_UART_Receive_DMA+0x34>
 8003944:	2302      	movs	r3, #2
 8003946:	e034      	b.n	80039b2 <HAL_UART_Receive_DMA+0x9e>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_UART_Receive_DMA+0xa8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d01f      	beq.n	80039a0 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d018      	beq.n	80039a0 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	613b      	str	r3, [r7, #16]
   return(result);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	69f9      	ldr	r1, [r7, #28]
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	61bb      	str	r3, [r7, #24]
   return(result);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e6      	bne.n	800396e <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 ff50 	bl	800484c <UART_Start_Receive_DMA>
 80039ac:	4603      	mov	r3, r0
 80039ae:	e000      	b.n	80039b2 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
  }
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3728      	adds	r7, #40	; 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40008000 	.word	0x40008000

080039c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b0ba      	sub	sp, #232	; 0xe8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80039ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80039ee:	4013      	ands	r3, r2
 80039f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80039f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d115      	bne.n	8003a28 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00f      	beq.n	8003a28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 82a6 	beq.w	8003f6a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
      }
      return;
 8003a26:	e2a0      	b.n	8003f6a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003a28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8117 	beq.w	8003c60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a42:	4b85      	ldr	r3, [pc, #532]	; (8003c58 <HAL_UART_IRQHandler+0x298>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 810a 	beq.w	8003c60 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d011      	beq.n	8003a7c <HAL_UART_IRQHandler+0xbc>
 8003a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a72:	f043 0201 	orr.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d011      	beq.n	8003aac <HAL_UART_IRQHandler+0xec>
 8003a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00b      	beq.n	8003aac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d011      	beq.n	8003adc <HAL_UART_IRQHandler+0x11c>
 8003ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00b      	beq.n	8003adc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2204      	movs	r2, #4
 8003aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad2:	f043 0202 	orr.w	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d017      	beq.n	8003b18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2208      	movs	r2, #8
 8003b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b0e:	f043 0208 	orr.w	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d012      	beq.n	8003b4a <HAL_UART_IRQHandler+0x18a>
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00c      	beq.n	8003b4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b40:	f043 0220 	orr.w	r2, r3, #32
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 820c 	beq.w	8003f6e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	d005      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d04f      	beq.n	8003c42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 ff1e 	bl	80049e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b40      	cmp	r3, #64	; 0x40
 8003bb4:	d141      	bne.n	8003c3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3308      	adds	r3, #8
 8003bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003be2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1d9      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d013      	beq.n	8003c32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <HAL_UART_IRQHandler+0x29c>)
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fd ffac 	bl	8001b74 <HAL_DMA_Abort_IT>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d017      	beq.n	8003c52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e00f      	b.n	8003c52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f9ba 	bl	8003fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	e00b      	b.n	8003c52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f9b6 	bl	8003fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	e007      	b.n	8003c52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f9b2 	bl	8003fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003c50:	e18d      	b.n	8003f6e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c52:	bf00      	nop
    return;
 8003c54:	e18b      	b.n	8003f6e <HAL_UART_IRQHandler+0x5ae>
 8003c56:	bf00      	nop
 8003c58:	04000120 	.word	0x04000120
 8003c5c:	08004c83 	.word	0x08004c83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	f040 8146 	bne.w	8003ef6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 813f 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8138 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2210      	movs	r2, #16
 8003c8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	f040 80b4 	bne.w	8003e06 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003caa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 815f 	beq.w	8003f72 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	f080 8157 	bcs.w	8003f72 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 8085 	bne.w	8003dea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1da      	bne.n	8003ce0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e1      	bne.n	8003d2a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3308      	adds	r3, #8
 8003d86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e3      	bne.n	8003d66 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dba:	f023 0310 	bic.w	r3, r3, #16
 8003dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e4      	bne.n	8003daa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fd fe87 	bl	8001af8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8de 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e04:	e0b5      	b.n	8003f72 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80a7 	beq.w	8003f76 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a2 	beq.w	8003f76 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e54:	647b      	str	r3, [r7, #68]	; 0x44
 8003e56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e4      	bne.n	8003e32 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	623b      	str	r3, [r7, #32]
   return(result);
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3308      	adds	r3, #8
 8003e88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e8c:	633a      	str	r2, [r7, #48]	; 0x30
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e3      	bne.n	8003e68 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0310 	bic.w	r3, r3, #16
 8003ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	69b9      	ldr	r1, [r7, #24]
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e4      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f866 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ef4:	e03f      	b.n	8003f76 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00e      	beq.n	8003f20 <HAL_UART_IRQHandler+0x560>
 8003f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fef2 	bl	8004d02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f1e:	e02d      	b.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01c      	beq.n	8003f7a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	4798      	blx	r3
    }
    return;
 8003f48:	e017      	b.n	8003f7a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d012      	beq.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
 8003f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fea3 	bl	8004cae <UART_EndTransmit_IT>
    return;
 8003f68:	e008      	b.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f6a:	bf00      	nop
 8003f6c:	e006      	b.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f6e:	bf00      	nop
 8003f70:	e004      	b.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f72:	bf00      	nop
 8003f74:	e002      	b.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f7c:	37e8      	adds	r7, #232	; 0xe8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop

08003f84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd8:	b5b0      	push	{r4, r5, r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4bad      	ldr	r3, [pc, #692]	; (80042b8 <UART_SetConfig+0x2e0>)
 8004004:	4013      	ands	r3, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	69f9      	ldr	r1, [r7, #28]
 800400c:	430b      	orrs	r3, r1
 800400e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4aa2      	ldr	r2, [pc, #648]	; (80042bc <UART_SetConfig+0x2e4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	4313      	orrs	r3, r2
 800403e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a99      	ldr	r2, [pc, #612]	; (80042c0 <UART_SetConfig+0x2e8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d121      	bne.n	80040a2 <UART_SetConfig+0xca>
 800405e:	4b99      	ldr	r3, [pc, #612]	; (80042c4 <UART_SetConfig+0x2ec>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	2b03      	cmp	r3, #3
 800406a:	d817      	bhi.n	800409c <UART_SetConfig+0xc4>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0x9c>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004085 	.word	0x08004085
 8004078:	08004091 	.word	0x08004091
 800407c:	0800408b 	.word	0x0800408b
 8004080:	08004097 	.word	0x08004097
 8004084:	2301      	movs	r3, #1
 8004086:	76fb      	strb	r3, [r7, #27]
 8004088:	e0e7      	b.n	800425a <UART_SetConfig+0x282>
 800408a:	2302      	movs	r3, #2
 800408c:	76fb      	strb	r3, [r7, #27]
 800408e:	e0e4      	b.n	800425a <UART_SetConfig+0x282>
 8004090:	2304      	movs	r3, #4
 8004092:	76fb      	strb	r3, [r7, #27]
 8004094:	e0e1      	b.n	800425a <UART_SetConfig+0x282>
 8004096:	2308      	movs	r3, #8
 8004098:	76fb      	strb	r3, [r7, #27]
 800409a:	e0de      	b.n	800425a <UART_SetConfig+0x282>
 800409c:	2310      	movs	r3, #16
 800409e:	76fb      	strb	r3, [r7, #27]
 80040a0:	e0db      	b.n	800425a <UART_SetConfig+0x282>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a88      	ldr	r2, [pc, #544]	; (80042c8 <UART_SetConfig+0x2f0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d132      	bne.n	8004112 <UART_SetConfig+0x13a>
 80040ac:	4b85      	ldr	r3, [pc, #532]	; (80042c4 <UART_SetConfig+0x2ec>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d828      	bhi.n	800410c <UART_SetConfig+0x134>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <UART_SetConfig+0xe8>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040f5 	.word	0x080040f5
 80040c4:	0800410d 	.word	0x0800410d
 80040c8:	0800410d 	.word	0x0800410d
 80040cc:	0800410d 	.word	0x0800410d
 80040d0:	08004101 	.word	0x08004101
 80040d4:	0800410d 	.word	0x0800410d
 80040d8:	0800410d 	.word	0x0800410d
 80040dc:	0800410d 	.word	0x0800410d
 80040e0:	080040fb 	.word	0x080040fb
 80040e4:	0800410d 	.word	0x0800410d
 80040e8:	0800410d 	.word	0x0800410d
 80040ec:	0800410d 	.word	0x0800410d
 80040f0:	08004107 	.word	0x08004107
 80040f4:	2300      	movs	r3, #0
 80040f6:	76fb      	strb	r3, [r7, #27]
 80040f8:	e0af      	b.n	800425a <UART_SetConfig+0x282>
 80040fa:	2302      	movs	r3, #2
 80040fc:	76fb      	strb	r3, [r7, #27]
 80040fe:	e0ac      	b.n	800425a <UART_SetConfig+0x282>
 8004100:	2304      	movs	r3, #4
 8004102:	76fb      	strb	r3, [r7, #27]
 8004104:	e0a9      	b.n	800425a <UART_SetConfig+0x282>
 8004106:	2308      	movs	r3, #8
 8004108:	76fb      	strb	r3, [r7, #27]
 800410a:	e0a6      	b.n	800425a <UART_SetConfig+0x282>
 800410c:	2310      	movs	r3, #16
 800410e:	76fb      	strb	r3, [r7, #27]
 8004110:	e0a3      	b.n	800425a <UART_SetConfig+0x282>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6d      	ldr	r2, [pc, #436]	; (80042cc <UART_SetConfig+0x2f4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d120      	bne.n	800415e <UART_SetConfig+0x186>
 800411c:	4b69      	ldr	r3, [pc, #420]	; (80042c4 <UART_SetConfig+0x2ec>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004126:	2b30      	cmp	r3, #48	; 0x30
 8004128:	d013      	beq.n	8004152 <UART_SetConfig+0x17a>
 800412a:	2b30      	cmp	r3, #48	; 0x30
 800412c:	d814      	bhi.n	8004158 <UART_SetConfig+0x180>
 800412e:	2b20      	cmp	r3, #32
 8004130:	d009      	beq.n	8004146 <UART_SetConfig+0x16e>
 8004132:	2b20      	cmp	r3, #32
 8004134:	d810      	bhi.n	8004158 <UART_SetConfig+0x180>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <UART_SetConfig+0x168>
 800413a:	2b10      	cmp	r3, #16
 800413c:	d006      	beq.n	800414c <UART_SetConfig+0x174>
 800413e:	e00b      	b.n	8004158 <UART_SetConfig+0x180>
 8004140:	2300      	movs	r3, #0
 8004142:	76fb      	strb	r3, [r7, #27]
 8004144:	e089      	b.n	800425a <UART_SetConfig+0x282>
 8004146:	2302      	movs	r3, #2
 8004148:	76fb      	strb	r3, [r7, #27]
 800414a:	e086      	b.n	800425a <UART_SetConfig+0x282>
 800414c:	2304      	movs	r3, #4
 800414e:	76fb      	strb	r3, [r7, #27]
 8004150:	e083      	b.n	800425a <UART_SetConfig+0x282>
 8004152:	2308      	movs	r3, #8
 8004154:	76fb      	strb	r3, [r7, #27]
 8004156:	e080      	b.n	800425a <UART_SetConfig+0x282>
 8004158:	2310      	movs	r3, #16
 800415a:	76fb      	strb	r3, [r7, #27]
 800415c:	e07d      	b.n	800425a <UART_SetConfig+0x282>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5b      	ldr	r2, [pc, #364]	; (80042d0 <UART_SetConfig+0x2f8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d120      	bne.n	80041aa <UART_SetConfig+0x1d2>
 8004168:	4b56      	ldr	r3, [pc, #344]	; (80042c4 <UART_SetConfig+0x2ec>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004172:	2bc0      	cmp	r3, #192	; 0xc0
 8004174:	d013      	beq.n	800419e <UART_SetConfig+0x1c6>
 8004176:	2bc0      	cmp	r3, #192	; 0xc0
 8004178:	d814      	bhi.n	80041a4 <UART_SetConfig+0x1cc>
 800417a:	2b80      	cmp	r3, #128	; 0x80
 800417c:	d009      	beq.n	8004192 <UART_SetConfig+0x1ba>
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d810      	bhi.n	80041a4 <UART_SetConfig+0x1cc>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <UART_SetConfig+0x1b4>
 8004186:	2b40      	cmp	r3, #64	; 0x40
 8004188:	d006      	beq.n	8004198 <UART_SetConfig+0x1c0>
 800418a:	e00b      	b.n	80041a4 <UART_SetConfig+0x1cc>
 800418c:	2300      	movs	r3, #0
 800418e:	76fb      	strb	r3, [r7, #27]
 8004190:	e063      	b.n	800425a <UART_SetConfig+0x282>
 8004192:	2302      	movs	r3, #2
 8004194:	76fb      	strb	r3, [r7, #27]
 8004196:	e060      	b.n	800425a <UART_SetConfig+0x282>
 8004198:	2304      	movs	r3, #4
 800419a:	76fb      	strb	r3, [r7, #27]
 800419c:	e05d      	b.n	800425a <UART_SetConfig+0x282>
 800419e:	2308      	movs	r3, #8
 80041a0:	76fb      	strb	r3, [r7, #27]
 80041a2:	e05a      	b.n	800425a <UART_SetConfig+0x282>
 80041a4:	2310      	movs	r3, #16
 80041a6:	76fb      	strb	r3, [r7, #27]
 80041a8:	e057      	b.n	800425a <UART_SetConfig+0x282>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a49      	ldr	r2, [pc, #292]	; (80042d4 <UART_SetConfig+0x2fc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d125      	bne.n	8004200 <UART_SetConfig+0x228>
 80041b4:	4b43      	ldr	r3, [pc, #268]	; (80042c4 <UART_SetConfig+0x2ec>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c2:	d017      	beq.n	80041f4 <UART_SetConfig+0x21c>
 80041c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c8:	d817      	bhi.n	80041fa <UART_SetConfig+0x222>
 80041ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ce:	d00b      	beq.n	80041e8 <UART_SetConfig+0x210>
 80041d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d4:	d811      	bhi.n	80041fa <UART_SetConfig+0x222>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <UART_SetConfig+0x20a>
 80041da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041de:	d006      	beq.n	80041ee <UART_SetConfig+0x216>
 80041e0:	e00b      	b.n	80041fa <UART_SetConfig+0x222>
 80041e2:	2300      	movs	r3, #0
 80041e4:	76fb      	strb	r3, [r7, #27]
 80041e6:	e038      	b.n	800425a <UART_SetConfig+0x282>
 80041e8:	2302      	movs	r3, #2
 80041ea:	76fb      	strb	r3, [r7, #27]
 80041ec:	e035      	b.n	800425a <UART_SetConfig+0x282>
 80041ee:	2304      	movs	r3, #4
 80041f0:	76fb      	strb	r3, [r7, #27]
 80041f2:	e032      	b.n	800425a <UART_SetConfig+0x282>
 80041f4:	2308      	movs	r3, #8
 80041f6:	76fb      	strb	r3, [r7, #27]
 80041f8:	e02f      	b.n	800425a <UART_SetConfig+0x282>
 80041fa:	2310      	movs	r3, #16
 80041fc:	76fb      	strb	r3, [r7, #27]
 80041fe:	e02c      	b.n	800425a <UART_SetConfig+0x282>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2d      	ldr	r2, [pc, #180]	; (80042bc <UART_SetConfig+0x2e4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d125      	bne.n	8004256 <UART_SetConfig+0x27e>
 800420a:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <UART_SetConfig+0x2ec>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004214:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004218:	d017      	beq.n	800424a <UART_SetConfig+0x272>
 800421a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800421e:	d817      	bhi.n	8004250 <UART_SetConfig+0x278>
 8004220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004224:	d00b      	beq.n	800423e <UART_SetConfig+0x266>
 8004226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422a:	d811      	bhi.n	8004250 <UART_SetConfig+0x278>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <UART_SetConfig+0x260>
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004234:	d006      	beq.n	8004244 <UART_SetConfig+0x26c>
 8004236:	e00b      	b.n	8004250 <UART_SetConfig+0x278>
 8004238:	2300      	movs	r3, #0
 800423a:	76fb      	strb	r3, [r7, #27]
 800423c:	e00d      	b.n	800425a <UART_SetConfig+0x282>
 800423e:	2302      	movs	r3, #2
 8004240:	76fb      	strb	r3, [r7, #27]
 8004242:	e00a      	b.n	800425a <UART_SetConfig+0x282>
 8004244:	2304      	movs	r3, #4
 8004246:	76fb      	strb	r3, [r7, #27]
 8004248:	e007      	b.n	800425a <UART_SetConfig+0x282>
 800424a:	2308      	movs	r3, #8
 800424c:	76fb      	strb	r3, [r7, #27]
 800424e:	e004      	b.n	800425a <UART_SetConfig+0x282>
 8004250:	2310      	movs	r3, #16
 8004252:	76fb      	strb	r3, [r7, #27]
 8004254:	e001      	b.n	800425a <UART_SetConfig+0x282>
 8004256:	2310      	movs	r3, #16
 8004258:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a17      	ldr	r2, [pc, #92]	; (80042bc <UART_SetConfig+0x2e4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	f040 8087 	bne.w	8004374 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004266:	7efb      	ldrb	r3, [r7, #27]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d837      	bhi.n	80042dc <UART_SetConfig+0x304>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <UART_SetConfig+0x29c>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	08004299 	.word	0x08004299
 8004278:	080042dd 	.word	0x080042dd
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042dd 	.word	0x080042dd
 8004284:	080042a7 	.word	0x080042a7
 8004288:	080042dd 	.word	0x080042dd
 800428c:	080042dd 	.word	0x080042dd
 8004290:	080042dd 	.word	0x080042dd
 8004294:	080042af 	.word	0x080042af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004298:	f7fe fd12 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 800429c:	6178      	str	r0, [r7, #20]
        break;
 800429e:	e022      	b.n	80042e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <UART_SetConfig+0x300>)
 80042a2:	617b      	str	r3, [r7, #20]
        break;
 80042a4:	e01f      	b.n	80042e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a6:	f7fe fc73 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 80042aa:	6178      	str	r0, [r7, #20]
        break;
 80042ac:	e01b      	b.n	80042e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b2:	617b      	str	r3, [r7, #20]
        break;
 80042b4:	e017      	b.n	80042e6 <UART_SetConfig+0x30e>
 80042b6:	bf00      	nop
 80042b8:	efff69f3 	.word	0xefff69f3
 80042bc:	40008000 	.word	0x40008000
 80042c0:	40013800 	.word	0x40013800
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40004400 	.word	0x40004400
 80042cc:	40004800 	.word	0x40004800
 80042d0:	40004c00 	.word	0x40004c00
 80042d4:	40005000 	.word	0x40005000
 80042d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	76bb      	strb	r3, [r7, #26]
        break;
 80042e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80f1 	beq.w	80044d0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d305      	bcc.n	800430a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	429a      	cmp	r2, r3
 8004308:	d902      	bls.n	8004310 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	76bb      	strb	r3, [r7, #26]
 800430e:	e0df      	b.n	80044d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	4618      	mov	r0, r3
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	020b      	lsls	r3, r1, #8
 8004322:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004326:	0202      	lsls	r2, r0, #8
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	6849      	ldr	r1, [r1, #4]
 800432c:	0849      	lsrs	r1, r1, #1
 800432e:	4608      	mov	r0, r1
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	1814      	adds	r4, r2, r0
 8004336:	eb43 0501 	adc.w	r5, r3, r1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	461a      	mov	r2, r3
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	4620      	mov	r0, r4
 8004346:	4629      	mov	r1, r5
 8004348:	f7fb ffaa 	bl	80002a0 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800435a:	d308      	bcc.n	800436e <UART_SetConfig+0x396>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004362:	d204      	bcs.n	800436e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	e0b0      	b.n	80044d0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	76bb      	strb	r3, [r7, #26]
 8004372:	e0ad      	b.n	80044d0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437c:	d15b      	bne.n	8004436 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800437e:	7efb      	ldrb	r3, [r7, #27]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d828      	bhi.n	80043d6 <UART_SetConfig+0x3fe>
 8004384:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0x3b4>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043d7 	.word	0x080043d7
 800439c:	080043c7 	.word	0x080043c7
 80043a0:	080043d7 	.word	0x080043d7
 80043a4:	080043d7 	.word	0x080043d7
 80043a8:	080043d7 	.word	0x080043d7
 80043ac:	080043cf 	.word	0x080043cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7fe fc86 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 80043b4:	6178      	str	r0, [r7, #20]
        break;
 80043b6:	e013      	b.n	80043e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7fe fc98 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 80043bc:	6178      	str	r0, [r7, #20]
        break;
 80043be:	e00f      	b.n	80043e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c0:	4b49      	ldr	r3, [pc, #292]	; (80044e8 <UART_SetConfig+0x510>)
 80043c2:	617b      	str	r3, [r7, #20]
        break;
 80043c4:	e00c      	b.n	80043e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c6:	f7fe fbe3 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 80043ca:	6178      	str	r0, [r7, #20]
        break;
 80043cc:	e008      	b.n	80043e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d2:	617b      	str	r3, [r7, #20]
        break;
 80043d4:	e004      	b.n	80043e0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	76bb      	strb	r3, [r7, #26]
        break;
 80043de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d074      	beq.n	80044d0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	005a      	lsls	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	085b      	lsrs	r3, r3, #1
 80043f0:	441a      	add	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	d916      	bls.n	8004430 <UART_SetConfig+0x458>
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d212      	bcs.n	8004430 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f023 030f 	bic.w	r3, r3, #15
 8004412:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	b29b      	uxth	r3, r3
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	b29a      	uxth	r2, r3
 8004420:	89fb      	ldrh	r3, [r7, #14]
 8004422:	4313      	orrs	r3, r2
 8004424:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	89fa      	ldrh	r2, [r7, #14]
 800442c:	60da      	str	r2, [r3, #12]
 800442e:	e04f      	b.n	80044d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	76bb      	strb	r3, [r7, #26]
 8004434:	e04c      	b.n	80044d0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004436:	7efb      	ldrb	r3, [r7, #27]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d828      	bhi.n	800448e <UART_SetConfig+0x4b6>
 800443c:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0x46c>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	08004469 	.word	0x08004469
 8004448:	08004471 	.word	0x08004471
 800444c:	08004479 	.word	0x08004479
 8004450:	0800448f 	.word	0x0800448f
 8004454:	0800447f 	.word	0x0800447f
 8004458:	0800448f 	.word	0x0800448f
 800445c:	0800448f 	.word	0x0800448f
 8004460:	0800448f 	.word	0x0800448f
 8004464:	08004487 	.word	0x08004487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004468:	f7fe fc2a 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 800446c:	6178      	str	r0, [r7, #20]
        break;
 800446e:	e013      	b.n	8004498 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004470:	f7fe fc3c 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8004474:	6178      	str	r0, [r7, #20]
        break;
 8004476:	e00f      	b.n	8004498 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004478:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <UART_SetConfig+0x510>)
 800447a:	617b      	str	r3, [r7, #20]
        break;
 800447c:	e00c      	b.n	8004498 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447e:	f7fe fb87 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8004482:	6178      	str	r0, [r7, #20]
        break;
 8004484:	e008      	b.n	8004498 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800448a:	617b      	str	r3, [r7, #20]
        break;
 800448c:	e004      	b.n	8004498 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	76bb      	strb	r3, [r7, #26]
        break;
 8004496:	bf00      	nop
    }

    if (pclk != 0U)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d018      	beq.n	80044d0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	085a      	lsrs	r2, r3, #1
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	441a      	add	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b0f      	cmp	r3, #15
 80044b6:	d909      	bls.n	80044cc <UART_SetConfig+0x4f4>
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044be:	d205      	bcs.n	80044cc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60da      	str	r2, [r3, #12]
 80044ca:	e001      	b.n	80044d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bdb0      	pop	{r4, r5, r7, pc}
 80044e6:	bf00      	nop
 80044e8:	00f42400 	.word	0x00f42400

080044ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01a      	beq.n	8004602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ea:	d10a      	bne.n	8004602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	605a      	str	r2, [r3, #4]
  }
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af02      	add	r7, sp, #8
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004640:	f7fd f800 	bl	8001644 <HAL_GetTick>
 8004644:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b08      	cmp	r3, #8
 8004652:	d10e      	bne.n	8004672 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f82d 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e023      	b.n	80046ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b04      	cmp	r3, #4
 800467e:	d10e      	bne.n	800469e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f817 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e00d      	b.n	80046ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b09c      	sub	sp, #112	; 0x70
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d2:	e0a5      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	f000 80a1 	beq.w	8004820 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046de:	f7fc ffb1 	bl	8001644 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d302      	bcc.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80046ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d13e      	bne.n	8004772 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004708:	667b      	str	r3, [r7, #100]	; 0x64
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004714:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e6      	bne.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3308      	adds	r3, #8
 800472c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	663b      	str	r3, [r7, #96]	; 0x60
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004746:	64ba      	str	r2, [r7, #72]	; 0x48
 8004748:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800474c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e5      	bne.n	8004726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e067      	b.n	8004842 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d04f      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478e:	d147      	bne.n	8004820 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004798:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e6      	bne.n	800479a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3308      	adds	r3, #8
 80047d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	613b      	str	r3, [r7, #16]
   return(result);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3308      	adds	r3, #8
 80047ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047ec:	623a      	str	r2, [r7, #32]
 80047ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	69f9      	ldr	r1, [r7, #28]
 80047f2:	6a3a      	ldr	r2, [r7, #32]
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e010      	b.n	8004842 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69da      	ldr	r2, [r3, #28]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	f43f af4a 	beq.w	80046d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3770      	adds	r7, #112	; 0x70
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b096      	sub	sp, #88	; 0x58
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2222      	movs	r2, #34	; 0x22
 8004874:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02b      	beq.n	80048d6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	4a42      	ldr	r2, [pc, #264]	; (800498c <UART_Start_Receive_DMA+0x140>)
 8004884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488a:	4a41      	ldr	r2, [pc, #260]	; (8004990 <UART_Start_Receive_DMA+0x144>)
 800488c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	4a40      	ldr	r2, [pc, #256]	; (8004994 <UART_Start_Receive_DMA+0x148>)
 8004894:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	2200      	movs	r2, #0
 800489c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3324      	adds	r3, #36	; 0x24
 80048a8:	4619      	mov	r1, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	461a      	mov	r2, r3
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	f7fd f8c1 	bl	8001a38 <HAL_DMA_Start_IT>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00c      	beq.n	80048d6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2210      	movs	r2, #16
 80048c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e055      	b.n	8004982 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d018      	beq.n	8004918 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fa:	657b      	str	r3, [r7, #84]	; 0x54
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004904:	64bb      	str	r3, [r7, #72]	; 0x48
 8004906:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800490a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e6      	bne.n	80048e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3308      	adds	r3, #8
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	653b      	str	r3, [r7, #80]	; 0x50
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3308      	adds	r3, #8
 8004936:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004938:	637a      	str	r2, [r7, #52]	; 0x34
 800493a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e5      	bne.n	8004918 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3308      	adds	r3, #8
 8004952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	613b      	str	r3, [r7, #16]
   return(result);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3308      	adds	r3, #8
 800496a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800496c:	623a      	str	r2, [r7, #32]
 800496e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	69f9      	ldr	r1, [r7, #28]
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	61bb      	str	r3, [r7, #24]
   return(result);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e5      	bne.n	800494c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3758      	adds	r7, #88	; 0x58
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	08004aab 	.word	0x08004aab
 8004990:	08004bcf 	.word	0x08004bcf
 8004994:	08004c07 	.word	0x08004c07

08004998 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	; 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049b4:	61fb      	str	r3, [r7, #28]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	6979      	ldr	r1, [r7, #20]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	613b      	str	r3, [r7, #16]
   return(result);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e6      	bne.n	80049a0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	679a      	str	r2, [r3, #120]	; 0x78
}
 80049d8:	bf00      	nop
 80049da:	3724      	adds	r7, #36	; 0x24
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b095      	sub	sp, #84	; 0x54
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e6      	bne.n	80049ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3308      	adds	r3, #8
 8004a24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e5      	bne.n	8004a1e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d118      	bne.n	8004a8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f023 0310 	bic.w	r3, r3, #16
 8004a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	6979      	ldr	r1, [r7, #20]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	613b      	str	r3, [r7, #16]
   return(result);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e6      	bne.n	8004a5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004a9e:	bf00      	nop
 8004aa0:	3754      	adds	r7, #84	; 0x54
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b09c      	sub	sp, #112	; 0x70
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d170      	bne.n	8004ba8 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004af2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e6      	bne.n	8004ace <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3308      	adds	r3, #8
 8004b06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	f023 0301 	bic.w	r3, r3, #1
 8004b16:	667b      	str	r3, [r7, #100]	; 0x64
 8004b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b20:	647a      	str	r2, [r7, #68]	; 0x44
 8004b22:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e5      	bne.n	8004b00 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3308      	adds	r3, #8
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	623b      	str	r3, [r7, #32]
   return(result);
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b4a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b54:	633a      	str	r2, [r7, #48]	; 0x30
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e5      	bne.n	8004b34 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d118      	bne.n	8004ba8 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0310 	bic.w	r3, r3, #16
 8004b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	69b9      	ldr	r1, [r7, #24]
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e6      	bne.n	8004b76 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d107      	bne.n	8004bc0 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004bba:	f7ff fa01 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bbe:	e002      	b.n	8004bc6 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004bc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004bc2:	f7fb fce9 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8004bc6:	bf00      	nop
 8004bc8:	3770      	adds	r7, #112	; 0x70
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d109      	bne.n	8004bf8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	4619      	mov	r1, r3
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f7ff f9e5 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bf6:	e002      	b.n	8004bfe <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff f9cd 	bl	8003f98 <HAL_UART_RxHalfCpltCallback>
}
 8004bfe:	bf00      	nop
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c18:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d109      	bne.n	8004c42 <UART_DMAError+0x3c>
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	2b21      	cmp	r3, #33	; 0x21
 8004c32:	d106      	bne.n	8004c42 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004c3c:	6978      	ldr	r0, [r7, #20]
 8004c3e:	f7ff feab 	bl	8004998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	d109      	bne.n	8004c64 <UART_DMAError+0x5e>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b22      	cmp	r3, #34	; 0x22
 8004c54:	d106      	bne.n	8004c64 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004c5e:	6978      	ldr	r0, [r7, #20]
 8004c60:	f7ff fec0 	bl	80049e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c6a:	f043 0210 	orr.w	r2, r3, #16
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c74:	6978      	ldr	r0, [r7, #20]
 8004c76:	f7ff f999 	bl	8003fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c7a:	bf00      	nop
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff f983 	bl	8003fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b088      	sub	sp, #32
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cca:	61fb      	str	r3, [r7, #28]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	61bb      	str	r3, [r7, #24]
 8004cd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6979      	ldr	r1, [r7, #20]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e6      	bne.n	8004cb6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff f945 	bl	8003f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cfa:	bf00      	nop
 8004cfc:	3720      	adds	r7, #32
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <__errno>:
 8004d18:	4b01      	ldr	r3, [pc, #4]	; (8004d20 <__errno+0x8>)
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	2000000c 	.word	0x2000000c

08004d24 <__libc_init_array>:
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	4d0d      	ldr	r5, [pc, #52]	; (8004d5c <__libc_init_array+0x38>)
 8004d28:	4c0d      	ldr	r4, [pc, #52]	; (8004d60 <__libc_init_array+0x3c>)
 8004d2a:	1b64      	subs	r4, r4, r5
 8004d2c:	10a4      	asrs	r4, r4, #2
 8004d2e:	2600      	movs	r6, #0
 8004d30:	42a6      	cmp	r6, r4
 8004d32:	d109      	bne.n	8004d48 <__libc_init_array+0x24>
 8004d34:	4d0b      	ldr	r5, [pc, #44]	; (8004d64 <__libc_init_array+0x40>)
 8004d36:	4c0c      	ldr	r4, [pc, #48]	; (8004d68 <__libc_init_array+0x44>)
 8004d38:	f001 fa50 	bl	80061dc <_init>
 8004d3c:	1b64      	subs	r4, r4, r5
 8004d3e:	10a4      	asrs	r4, r4, #2
 8004d40:	2600      	movs	r6, #0
 8004d42:	42a6      	cmp	r6, r4
 8004d44:	d105      	bne.n	8004d52 <__libc_init_array+0x2e>
 8004d46:	bd70      	pop	{r4, r5, r6, pc}
 8004d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4c:	4798      	blx	r3
 8004d4e:	3601      	adds	r6, #1
 8004d50:	e7ee      	b.n	8004d30 <__libc_init_array+0xc>
 8004d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d56:	4798      	blx	r3
 8004d58:	3601      	adds	r6, #1
 8004d5a:	e7f2      	b.n	8004d42 <__libc_init_array+0x1e>
 8004d5c:	0800646c 	.word	0x0800646c
 8004d60:	0800646c 	.word	0x0800646c
 8004d64:	0800646c 	.word	0x0800646c
 8004d68:	08006470 	.word	0x08006470

08004d6c <memset>:
 8004d6c:	4402      	add	r2, r0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d100      	bne.n	8004d76 <memset+0xa>
 8004d74:	4770      	bx	lr
 8004d76:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7a:	e7f9      	b.n	8004d70 <memset+0x4>

08004d7c <siprintf>:
 8004d7c:	b40e      	push	{r1, r2, r3}
 8004d7e:	b500      	push	{lr}
 8004d80:	b09c      	sub	sp, #112	; 0x70
 8004d82:	ab1d      	add	r3, sp, #116	; 0x74
 8004d84:	9002      	str	r0, [sp, #8]
 8004d86:	9006      	str	r0, [sp, #24]
 8004d88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d8c:	4809      	ldr	r0, [pc, #36]	; (8004db4 <siprintf+0x38>)
 8004d8e:	9107      	str	r1, [sp, #28]
 8004d90:	9104      	str	r1, [sp, #16]
 8004d92:	4909      	ldr	r1, [pc, #36]	; (8004db8 <siprintf+0x3c>)
 8004d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d98:	9105      	str	r1, [sp, #20]
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	a902      	add	r1, sp, #8
 8004da0:	f000 f9e6 	bl	8005170 <_svfiprintf_r>
 8004da4:	9b02      	ldr	r3, [sp, #8]
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	b01c      	add	sp, #112	; 0x70
 8004dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004db0:	b003      	add	sp, #12
 8004db2:	4770      	bx	lr
 8004db4:	2000000c 	.word	0x2000000c
 8004db8:	ffff0208 	.word	0xffff0208

08004dbc <strcat>:
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	7814      	ldrb	r4, [r2, #0]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	3201      	adds	r2, #1
 8004dc6:	2c00      	cmp	r4, #0
 8004dc8:	d1fa      	bne.n	8004dc0 <strcat+0x4>
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dd4:	2a00      	cmp	r2, #0
 8004dd6:	d1f9      	bne.n	8004dcc <strcat+0x10>
 8004dd8:	bd10      	pop	{r4, pc}

08004dda <strchr>:
 8004dda:	b2c9      	uxtb	r1, r1
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004de2:	b11a      	cbz	r2, 8004dec <strchr+0x12>
 8004de4:	428a      	cmp	r2, r1
 8004de6:	d1f9      	bne.n	8004ddc <strchr+0x2>
 8004de8:	4618      	mov	r0, r3
 8004dea:	4770      	bx	lr
 8004dec:	2900      	cmp	r1, #0
 8004dee:	bf18      	it	ne
 8004df0:	2300      	movne	r3, #0
 8004df2:	e7f9      	b.n	8004de8 <strchr+0xe>

08004df4 <strcpy>:
 8004df4:	4603      	mov	r3, r0
 8004df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dfa:	f803 2b01 	strb.w	r2, [r3], #1
 8004dfe:	2a00      	cmp	r2, #0
 8004e00:	d1f9      	bne.n	8004df6 <strcpy+0x2>
 8004e02:	4770      	bx	lr

08004e04 <strsep>:
 8004e04:	4602      	mov	r2, r0
 8004e06:	2300      	movs	r3, #0
 8004e08:	6800      	ldr	r0, [r0, #0]
 8004e0a:	f000 b84b 	b.w	8004ea4 <__strtok_r>

08004e0e <strstr>:
 8004e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e10:	780c      	ldrb	r4, [r1, #0]
 8004e12:	b164      	cbz	r4, 8004e2e <strstr+0x20>
 8004e14:	4603      	mov	r3, r0
 8004e16:	781a      	ldrb	r2, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	1c5e      	adds	r6, r3, #1
 8004e1c:	b90a      	cbnz	r2, 8004e22 <strstr+0x14>
 8004e1e:	4610      	mov	r0, r2
 8004e20:	e005      	b.n	8004e2e <strstr+0x20>
 8004e22:	4294      	cmp	r4, r2
 8004e24:	d108      	bne.n	8004e38 <strstr+0x2a>
 8004e26:	460d      	mov	r5, r1
 8004e28:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004e2c:	b902      	cbnz	r2, 8004e30 <strstr+0x22>
 8004e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e30:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004e34:	4297      	cmp	r7, r2
 8004e36:	d0f7      	beq.n	8004e28 <strstr+0x1a>
 8004e38:	4633      	mov	r3, r6
 8004e3a:	e7ec      	b.n	8004e16 <strstr+0x8>

08004e3c <strtok>:
 8004e3c:	4b16      	ldr	r3, [pc, #88]	; (8004e98 <strtok+0x5c>)
 8004e3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e40:	681e      	ldr	r6, [r3, #0]
 8004e42:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004e44:	4605      	mov	r5, r0
 8004e46:	b9fc      	cbnz	r4, 8004e88 <strtok+0x4c>
 8004e48:	2050      	movs	r0, #80	; 0x50
 8004e4a:	9101      	str	r1, [sp, #4]
 8004e4c:	f000 f882 	bl	8004f54 <malloc>
 8004e50:	9901      	ldr	r1, [sp, #4]
 8004e52:	65b0      	str	r0, [r6, #88]	; 0x58
 8004e54:	4602      	mov	r2, r0
 8004e56:	b920      	cbnz	r0, 8004e62 <strtok+0x26>
 8004e58:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <strtok+0x60>)
 8004e5a:	4811      	ldr	r0, [pc, #68]	; (8004ea0 <strtok+0x64>)
 8004e5c:	2157      	movs	r1, #87	; 0x57
 8004e5e:	f000 f849 	bl	8004ef4 <__assert_func>
 8004e62:	e9c0 4400 	strd	r4, r4, [r0]
 8004e66:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004e6a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004e6e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004e72:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004e76:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004e7a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004e7e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004e82:	6184      	str	r4, [r0, #24]
 8004e84:	7704      	strb	r4, [r0, #28]
 8004e86:	6244      	str	r4, [r0, #36]	; 0x24
 8004e88:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	b002      	add	sp, #8
 8004e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e94:	f000 b806 	b.w	8004ea4 <__strtok_r>
 8004e98:	2000000c 	.word	0x2000000c
 8004e9c:	0800631c 	.word	0x0800631c
 8004ea0:	08006333 	.word	0x08006333

08004ea4 <__strtok_r>:
 8004ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea6:	b908      	cbnz	r0, 8004eac <__strtok_r+0x8>
 8004ea8:	6810      	ldr	r0, [r2, #0]
 8004eaa:	b188      	cbz	r0, 8004ed0 <__strtok_r+0x2c>
 8004eac:	4604      	mov	r4, r0
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004eb4:	460f      	mov	r7, r1
 8004eb6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004eba:	b91e      	cbnz	r6, 8004ec4 <__strtok_r+0x20>
 8004ebc:	b965      	cbnz	r5, 8004ed8 <__strtok_r+0x34>
 8004ebe:	6015      	str	r5, [r2, #0]
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	e005      	b.n	8004ed0 <__strtok_r+0x2c>
 8004ec4:	42b5      	cmp	r5, r6
 8004ec6:	d1f6      	bne.n	8004eb6 <__strtok_r+0x12>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f0      	bne.n	8004eae <__strtok_r+0xa>
 8004ecc:	6014      	str	r4, [r2, #0]
 8004ece:	7003      	strb	r3, [r0, #0]
 8004ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ed2:	461c      	mov	r4, r3
 8004ed4:	e00c      	b.n	8004ef0 <__strtok_r+0x4c>
 8004ed6:	b915      	cbnz	r5, 8004ede <__strtok_r+0x3a>
 8004ed8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004edc:	460e      	mov	r6, r1
 8004ede:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004ee2:	42ab      	cmp	r3, r5
 8004ee4:	d1f7      	bne.n	8004ed6 <__strtok_r+0x32>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f3      	beq.n	8004ed2 <__strtok_r+0x2e>
 8004eea:	2300      	movs	r3, #0
 8004eec:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004ef0:	6014      	str	r4, [r2, #0]
 8004ef2:	e7ed      	b.n	8004ed0 <__strtok_r+0x2c>

08004ef4 <__assert_func>:
 8004ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ef6:	4614      	mov	r4, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <__assert_func+0x2c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4605      	mov	r5, r0
 8004f00:	68d8      	ldr	r0, [r3, #12]
 8004f02:	b14c      	cbz	r4, 8004f18 <__assert_func+0x24>
 8004f04:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <__assert_func+0x30>)
 8004f06:	9100      	str	r1, [sp, #0]
 8004f08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f0c:	4906      	ldr	r1, [pc, #24]	; (8004f28 <__assert_func+0x34>)
 8004f0e:	462b      	mov	r3, r5
 8004f10:	f000 f80e 	bl	8004f30 <fiprintf>
 8004f14:	f000 fdea 	bl	8005aec <abort>
 8004f18:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <__assert_func+0x38>)
 8004f1a:	461c      	mov	r4, r3
 8004f1c:	e7f3      	b.n	8004f06 <__assert_func+0x12>
 8004f1e:	bf00      	nop
 8004f20:	2000000c 	.word	0x2000000c
 8004f24:	08006394 	.word	0x08006394
 8004f28:	080063a1 	.word	0x080063a1
 8004f2c:	080063cf 	.word	0x080063cf

08004f30 <fiprintf>:
 8004f30:	b40e      	push	{r1, r2, r3}
 8004f32:	b503      	push	{r0, r1, lr}
 8004f34:	4601      	mov	r1, r0
 8004f36:	ab03      	add	r3, sp, #12
 8004f38:	4805      	ldr	r0, [pc, #20]	; (8004f50 <fiprintf+0x20>)
 8004f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f3e:	6800      	ldr	r0, [r0, #0]
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	f000 fa3f 	bl	80053c4 <_vfiprintf_r>
 8004f46:	b002      	add	sp, #8
 8004f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f4c:	b003      	add	sp, #12
 8004f4e:	4770      	bx	lr
 8004f50:	2000000c 	.word	0x2000000c

08004f54 <malloc>:
 8004f54:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <malloc+0xc>)
 8004f56:	4601      	mov	r1, r0
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	f000 b853 	b.w	8005004 <_malloc_r>
 8004f5e:	bf00      	nop
 8004f60:	2000000c 	.word	0x2000000c

08004f64 <_free_r>:
 8004f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f66:	2900      	cmp	r1, #0
 8004f68:	d048      	beq.n	8004ffc <_free_r+0x98>
 8004f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6e:	9001      	str	r0, [sp, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f1a1 0404 	sub.w	r4, r1, #4
 8004f76:	bfb8      	it	lt
 8004f78:	18e4      	addlt	r4, r4, r3
 8004f7a:	f001 f805 	bl	8005f88 <__malloc_lock>
 8004f7e:	4a20      	ldr	r2, [pc, #128]	; (8005000 <_free_r+0x9c>)
 8004f80:	9801      	ldr	r0, [sp, #4]
 8004f82:	6813      	ldr	r3, [r2, #0]
 8004f84:	4615      	mov	r5, r2
 8004f86:	b933      	cbnz	r3, 8004f96 <_free_r+0x32>
 8004f88:	6063      	str	r3, [r4, #4]
 8004f8a:	6014      	str	r4, [r2, #0]
 8004f8c:	b003      	add	sp, #12
 8004f8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f92:	f000 bfff 	b.w	8005f94 <__malloc_unlock>
 8004f96:	42a3      	cmp	r3, r4
 8004f98:	d90b      	bls.n	8004fb2 <_free_r+0x4e>
 8004f9a:	6821      	ldr	r1, [r4, #0]
 8004f9c:	1862      	adds	r2, r4, r1
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	bf04      	itt	eq
 8004fa2:	681a      	ldreq	r2, [r3, #0]
 8004fa4:	685b      	ldreq	r3, [r3, #4]
 8004fa6:	6063      	str	r3, [r4, #4]
 8004fa8:	bf04      	itt	eq
 8004faa:	1852      	addeq	r2, r2, r1
 8004fac:	6022      	streq	r2, [r4, #0]
 8004fae:	602c      	str	r4, [r5, #0]
 8004fb0:	e7ec      	b.n	8004f8c <_free_r+0x28>
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	b10b      	cbz	r3, 8004fbc <_free_r+0x58>
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	d9fa      	bls.n	8004fb2 <_free_r+0x4e>
 8004fbc:	6811      	ldr	r1, [r2, #0]
 8004fbe:	1855      	adds	r5, r2, r1
 8004fc0:	42a5      	cmp	r5, r4
 8004fc2:	d10b      	bne.n	8004fdc <_free_r+0x78>
 8004fc4:	6824      	ldr	r4, [r4, #0]
 8004fc6:	4421      	add	r1, r4
 8004fc8:	1854      	adds	r4, r2, r1
 8004fca:	42a3      	cmp	r3, r4
 8004fcc:	6011      	str	r1, [r2, #0]
 8004fce:	d1dd      	bne.n	8004f8c <_free_r+0x28>
 8004fd0:	681c      	ldr	r4, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	6053      	str	r3, [r2, #4]
 8004fd6:	4421      	add	r1, r4
 8004fd8:	6011      	str	r1, [r2, #0]
 8004fda:	e7d7      	b.n	8004f8c <_free_r+0x28>
 8004fdc:	d902      	bls.n	8004fe4 <_free_r+0x80>
 8004fde:	230c      	movs	r3, #12
 8004fe0:	6003      	str	r3, [r0, #0]
 8004fe2:	e7d3      	b.n	8004f8c <_free_r+0x28>
 8004fe4:	6825      	ldr	r5, [r4, #0]
 8004fe6:	1961      	adds	r1, r4, r5
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	bf04      	itt	eq
 8004fec:	6819      	ldreq	r1, [r3, #0]
 8004fee:	685b      	ldreq	r3, [r3, #4]
 8004ff0:	6063      	str	r3, [r4, #4]
 8004ff2:	bf04      	itt	eq
 8004ff4:	1949      	addeq	r1, r1, r5
 8004ff6:	6021      	streq	r1, [r4, #0]
 8004ff8:	6054      	str	r4, [r2, #4]
 8004ffa:	e7c7      	b.n	8004f8c <_free_r+0x28>
 8004ffc:	b003      	add	sp, #12
 8004ffe:	bd30      	pop	{r4, r5, pc}
 8005000:	20000094 	.word	0x20000094

08005004 <_malloc_r>:
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	1ccd      	adds	r5, r1, #3
 8005008:	f025 0503 	bic.w	r5, r5, #3
 800500c:	3508      	adds	r5, #8
 800500e:	2d0c      	cmp	r5, #12
 8005010:	bf38      	it	cc
 8005012:	250c      	movcc	r5, #12
 8005014:	2d00      	cmp	r5, #0
 8005016:	4606      	mov	r6, r0
 8005018:	db01      	blt.n	800501e <_malloc_r+0x1a>
 800501a:	42a9      	cmp	r1, r5
 800501c:	d903      	bls.n	8005026 <_malloc_r+0x22>
 800501e:	230c      	movs	r3, #12
 8005020:	6033      	str	r3, [r6, #0]
 8005022:	2000      	movs	r0, #0
 8005024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005026:	f000 ffaf 	bl	8005f88 <__malloc_lock>
 800502a:	4921      	ldr	r1, [pc, #132]	; (80050b0 <_malloc_r+0xac>)
 800502c:	680a      	ldr	r2, [r1, #0]
 800502e:	4614      	mov	r4, r2
 8005030:	b99c      	cbnz	r4, 800505a <_malloc_r+0x56>
 8005032:	4f20      	ldr	r7, [pc, #128]	; (80050b4 <_malloc_r+0xb0>)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	b923      	cbnz	r3, 8005042 <_malloc_r+0x3e>
 8005038:	4621      	mov	r1, r4
 800503a:	4630      	mov	r0, r6
 800503c:	f000 fc86 	bl	800594c <_sbrk_r>
 8005040:	6038      	str	r0, [r7, #0]
 8005042:	4629      	mov	r1, r5
 8005044:	4630      	mov	r0, r6
 8005046:	f000 fc81 	bl	800594c <_sbrk_r>
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	d123      	bne.n	8005096 <_malloc_r+0x92>
 800504e:	230c      	movs	r3, #12
 8005050:	6033      	str	r3, [r6, #0]
 8005052:	4630      	mov	r0, r6
 8005054:	f000 ff9e 	bl	8005f94 <__malloc_unlock>
 8005058:	e7e3      	b.n	8005022 <_malloc_r+0x1e>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	1b5b      	subs	r3, r3, r5
 800505e:	d417      	bmi.n	8005090 <_malloc_r+0x8c>
 8005060:	2b0b      	cmp	r3, #11
 8005062:	d903      	bls.n	800506c <_malloc_r+0x68>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	441c      	add	r4, r3
 8005068:	6025      	str	r5, [r4, #0]
 800506a:	e004      	b.n	8005076 <_malloc_r+0x72>
 800506c:	6863      	ldr	r3, [r4, #4]
 800506e:	42a2      	cmp	r2, r4
 8005070:	bf0c      	ite	eq
 8005072:	600b      	streq	r3, [r1, #0]
 8005074:	6053      	strne	r3, [r2, #4]
 8005076:	4630      	mov	r0, r6
 8005078:	f000 ff8c 	bl	8005f94 <__malloc_unlock>
 800507c:	f104 000b 	add.w	r0, r4, #11
 8005080:	1d23      	adds	r3, r4, #4
 8005082:	f020 0007 	bic.w	r0, r0, #7
 8005086:	1ac2      	subs	r2, r0, r3
 8005088:	d0cc      	beq.n	8005024 <_malloc_r+0x20>
 800508a:	1a1b      	subs	r3, r3, r0
 800508c:	50a3      	str	r3, [r4, r2]
 800508e:	e7c9      	b.n	8005024 <_malloc_r+0x20>
 8005090:	4622      	mov	r2, r4
 8005092:	6864      	ldr	r4, [r4, #4]
 8005094:	e7cc      	b.n	8005030 <_malloc_r+0x2c>
 8005096:	1cc4      	adds	r4, r0, #3
 8005098:	f024 0403 	bic.w	r4, r4, #3
 800509c:	42a0      	cmp	r0, r4
 800509e:	d0e3      	beq.n	8005068 <_malloc_r+0x64>
 80050a0:	1a21      	subs	r1, r4, r0
 80050a2:	4630      	mov	r0, r6
 80050a4:	f000 fc52 	bl	800594c <_sbrk_r>
 80050a8:	3001      	adds	r0, #1
 80050aa:	d1dd      	bne.n	8005068 <_malloc_r+0x64>
 80050ac:	e7cf      	b.n	800504e <_malloc_r+0x4a>
 80050ae:	bf00      	nop
 80050b0:	20000094 	.word	0x20000094
 80050b4:	20000098 	.word	0x20000098

080050b8 <__ssputs_r>:
 80050b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050bc:	688e      	ldr	r6, [r1, #8]
 80050be:	429e      	cmp	r6, r3
 80050c0:	4682      	mov	sl, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	4690      	mov	r8, r2
 80050c6:	461f      	mov	r7, r3
 80050c8:	d838      	bhi.n	800513c <__ssputs_r+0x84>
 80050ca:	898a      	ldrh	r2, [r1, #12]
 80050cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050d0:	d032      	beq.n	8005138 <__ssputs_r+0x80>
 80050d2:	6825      	ldr	r5, [r4, #0]
 80050d4:	6909      	ldr	r1, [r1, #16]
 80050d6:	eba5 0901 	sub.w	r9, r5, r1
 80050da:	6965      	ldr	r5, [r4, #20]
 80050dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050e4:	3301      	adds	r3, #1
 80050e6:	444b      	add	r3, r9
 80050e8:	106d      	asrs	r5, r5, #1
 80050ea:	429d      	cmp	r5, r3
 80050ec:	bf38      	it	cc
 80050ee:	461d      	movcc	r5, r3
 80050f0:	0553      	lsls	r3, r2, #21
 80050f2:	d531      	bpl.n	8005158 <__ssputs_r+0xa0>
 80050f4:	4629      	mov	r1, r5
 80050f6:	f7ff ff85 	bl	8005004 <_malloc_r>
 80050fa:	4606      	mov	r6, r0
 80050fc:	b950      	cbnz	r0, 8005114 <__ssputs_r+0x5c>
 80050fe:	230c      	movs	r3, #12
 8005100:	f8ca 3000 	str.w	r3, [sl]
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005114:	6921      	ldr	r1, [r4, #16]
 8005116:	464a      	mov	r2, r9
 8005118:	f000 ff0e 	bl	8005f38 <memcpy>
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005126:	81a3      	strh	r3, [r4, #12]
 8005128:	6126      	str	r6, [r4, #16]
 800512a:	6165      	str	r5, [r4, #20]
 800512c:	444e      	add	r6, r9
 800512e:	eba5 0509 	sub.w	r5, r5, r9
 8005132:	6026      	str	r6, [r4, #0]
 8005134:	60a5      	str	r5, [r4, #8]
 8005136:	463e      	mov	r6, r7
 8005138:	42be      	cmp	r6, r7
 800513a:	d900      	bls.n	800513e <__ssputs_r+0x86>
 800513c:	463e      	mov	r6, r7
 800513e:	4632      	mov	r2, r6
 8005140:	6820      	ldr	r0, [r4, #0]
 8005142:	4641      	mov	r1, r8
 8005144:	f000 ff06 	bl	8005f54 <memmove>
 8005148:	68a3      	ldr	r3, [r4, #8]
 800514a:	6822      	ldr	r2, [r4, #0]
 800514c:	1b9b      	subs	r3, r3, r6
 800514e:	4432      	add	r2, r6
 8005150:	60a3      	str	r3, [r4, #8]
 8005152:	6022      	str	r2, [r4, #0]
 8005154:	2000      	movs	r0, #0
 8005156:	e7db      	b.n	8005110 <__ssputs_r+0x58>
 8005158:	462a      	mov	r2, r5
 800515a:	f000 ff21 	bl	8005fa0 <_realloc_r>
 800515e:	4606      	mov	r6, r0
 8005160:	2800      	cmp	r0, #0
 8005162:	d1e1      	bne.n	8005128 <__ssputs_r+0x70>
 8005164:	6921      	ldr	r1, [r4, #16]
 8005166:	4650      	mov	r0, sl
 8005168:	f7ff fefc 	bl	8004f64 <_free_r>
 800516c:	e7c7      	b.n	80050fe <__ssputs_r+0x46>
	...

08005170 <_svfiprintf_r>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	4698      	mov	r8, r3
 8005176:	898b      	ldrh	r3, [r1, #12]
 8005178:	061b      	lsls	r3, r3, #24
 800517a:	b09d      	sub	sp, #116	; 0x74
 800517c:	4607      	mov	r7, r0
 800517e:	460d      	mov	r5, r1
 8005180:	4614      	mov	r4, r2
 8005182:	d50e      	bpl.n	80051a2 <_svfiprintf_r+0x32>
 8005184:	690b      	ldr	r3, [r1, #16]
 8005186:	b963      	cbnz	r3, 80051a2 <_svfiprintf_r+0x32>
 8005188:	2140      	movs	r1, #64	; 0x40
 800518a:	f7ff ff3b 	bl	8005004 <_malloc_r>
 800518e:	6028      	str	r0, [r5, #0]
 8005190:	6128      	str	r0, [r5, #16]
 8005192:	b920      	cbnz	r0, 800519e <_svfiprintf_r+0x2e>
 8005194:	230c      	movs	r3, #12
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	e0d1      	b.n	8005342 <_svfiprintf_r+0x1d2>
 800519e:	2340      	movs	r3, #64	; 0x40
 80051a0:	616b      	str	r3, [r5, #20]
 80051a2:	2300      	movs	r3, #0
 80051a4:	9309      	str	r3, [sp, #36]	; 0x24
 80051a6:	2320      	movs	r3, #32
 80051a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80051b0:	2330      	movs	r3, #48	; 0x30
 80051b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800535c <_svfiprintf_r+0x1ec>
 80051b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051ba:	f04f 0901 	mov.w	r9, #1
 80051be:	4623      	mov	r3, r4
 80051c0:	469a      	mov	sl, r3
 80051c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051c6:	b10a      	cbz	r2, 80051cc <_svfiprintf_r+0x5c>
 80051c8:	2a25      	cmp	r2, #37	; 0x25
 80051ca:	d1f9      	bne.n	80051c0 <_svfiprintf_r+0x50>
 80051cc:	ebba 0b04 	subs.w	fp, sl, r4
 80051d0:	d00b      	beq.n	80051ea <_svfiprintf_r+0x7a>
 80051d2:	465b      	mov	r3, fp
 80051d4:	4622      	mov	r2, r4
 80051d6:	4629      	mov	r1, r5
 80051d8:	4638      	mov	r0, r7
 80051da:	f7ff ff6d 	bl	80050b8 <__ssputs_r>
 80051de:	3001      	adds	r0, #1
 80051e0:	f000 80aa 	beq.w	8005338 <_svfiprintf_r+0x1c8>
 80051e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051e6:	445a      	add	r2, fp
 80051e8:	9209      	str	r2, [sp, #36]	; 0x24
 80051ea:	f89a 3000 	ldrb.w	r3, [sl]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 80a2 	beq.w	8005338 <_svfiprintf_r+0x1c8>
 80051f4:	2300      	movs	r3, #0
 80051f6:	f04f 32ff 	mov.w	r2, #4294967295
 80051fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051fe:	f10a 0a01 	add.w	sl, sl, #1
 8005202:	9304      	str	r3, [sp, #16]
 8005204:	9307      	str	r3, [sp, #28]
 8005206:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800520a:	931a      	str	r3, [sp, #104]	; 0x68
 800520c:	4654      	mov	r4, sl
 800520e:	2205      	movs	r2, #5
 8005210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005214:	4851      	ldr	r0, [pc, #324]	; (800535c <_svfiprintf_r+0x1ec>)
 8005216:	f7fa fff3 	bl	8000200 <memchr>
 800521a:	9a04      	ldr	r2, [sp, #16]
 800521c:	b9d8      	cbnz	r0, 8005256 <_svfiprintf_r+0xe6>
 800521e:	06d0      	lsls	r0, r2, #27
 8005220:	bf44      	itt	mi
 8005222:	2320      	movmi	r3, #32
 8005224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005228:	0711      	lsls	r1, r2, #28
 800522a:	bf44      	itt	mi
 800522c:	232b      	movmi	r3, #43	; 0x2b
 800522e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005232:	f89a 3000 	ldrb.w	r3, [sl]
 8005236:	2b2a      	cmp	r3, #42	; 0x2a
 8005238:	d015      	beq.n	8005266 <_svfiprintf_r+0xf6>
 800523a:	9a07      	ldr	r2, [sp, #28]
 800523c:	4654      	mov	r4, sl
 800523e:	2000      	movs	r0, #0
 8005240:	f04f 0c0a 	mov.w	ip, #10
 8005244:	4621      	mov	r1, r4
 8005246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800524a:	3b30      	subs	r3, #48	; 0x30
 800524c:	2b09      	cmp	r3, #9
 800524e:	d94e      	bls.n	80052ee <_svfiprintf_r+0x17e>
 8005250:	b1b0      	cbz	r0, 8005280 <_svfiprintf_r+0x110>
 8005252:	9207      	str	r2, [sp, #28]
 8005254:	e014      	b.n	8005280 <_svfiprintf_r+0x110>
 8005256:	eba0 0308 	sub.w	r3, r0, r8
 800525a:	fa09 f303 	lsl.w	r3, r9, r3
 800525e:	4313      	orrs	r3, r2
 8005260:	9304      	str	r3, [sp, #16]
 8005262:	46a2      	mov	sl, r4
 8005264:	e7d2      	b.n	800520c <_svfiprintf_r+0x9c>
 8005266:	9b03      	ldr	r3, [sp, #12]
 8005268:	1d19      	adds	r1, r3, #4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	9103      	str	r1, [sp, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	bfbb      	ittet	lt
 8005272:	425b      	neglt	r3, r3
 8005274:	f042 0202 	orrlt.w	r2, r2, #2
 8005278:	9307      	strge	r3, [sp, #28]
 800527a:	9307      	strlt	r3, [sp, #28]
 800527c:	bfb8      	it	lt
 800527e:	9204      	strlt	r2, [sp, #16]
 8005280:	7823      	ldrb	r3, [r4, #0]
 8005282:	2b2e      	cmp	r3, #46	; 0x2e
 8005284:	d10c      	bne.n	80052a0 <_svfiprintf_r+0x130>
 8005286:	7863      	ldrb	r3, [r4, #1]
 8005288:	2b2a      	cmp	r3, #42	; 0x2a
 800528a:	d135      	bne.n	80052f8 <_svfiprintf_r+0x188>
 800528c:	9b03      	ldr	r3, [sp, #12]
 800528e:	1d1a      	adds	r2, r3, #4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	9203      	str	r2, [sp, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	bfb8      	it	lt
 8005298:	f04f 33ff 	movlt.w	r3, #4294967295
 800529c:	3402      	adds	r4, #2
 800529e:	9305      	str	r3, [sp, #20]
 80052a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800536c <_svfiprintf_r+0x1fc>
 80052a4:	7821      	ldrb	r1, [r4, #0]
 80052a6:	2203      	movs	r2, #3
 80052a8:	4650      	mov	r0, sl
 80052aa:	f7fa ffa9 	bl	8000200 <memchr>
 80052ae:	b140      	cbz	r0, 80052c2 <_svfiprintf_r+0x152>
 80052b0:	2340      	movs	r3, #64	; 0x40
 80052b2:	eba0 000a 	sub.w	r0, r0, sl
 80052b6:	fa03 f000 	lsl.w	r0, r3, r0
 80052ba:	9b04      	ldr	r3, [sp, #16]
 80052bc:	4303      	orrs	r3, r0
 80052be:	3401      	adds	r4, #1
 80052c0:	9304      	str	r3, [sp, #16]
 80052c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c6:	4826      	ldr	r0, [pc, #152]	; (8005360 <_svfiprintf_r+0x1f0>)
 80052c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052cc:	2206      	movs	r2, #6
 80052ce:	f7fa ff97 	bl	8000200 <memchr>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	d038      	beq.n	8005348 <_svfiprintf_r+0x1d8>
 80052d6:	4b23      	ldr	r3, [pc, #140]	; (8005364 <_svfiprintf_r+0x1f4>)
 80052d8:	bb1b      	cbnz	r3, 8005322 <_svfiprintf_r+0x1b2>
 80052da:	9b03      	ldr	r3, [sp, #12]
 80052dc:	3307      	adds	r3, #7
 80052de:	f023 0307 	bic.w	r3, r3, #7
 80052e2:	3308      	adds	r3, #8
 80052e4:	9303      	str	r3, [sp, #12]
 80052e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e8:	4433      	add	r3, r6
 80052ea:	9309      	str	r3, [sp, #36]	; 0x24
 80052ec:	e767      	b.n	80051be <_svfiprintf_r+0x4e>
 80052ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80052f2:	460c      	mov	r4, r1
 80052f4:	2001      	movs	r0, #1
 80052f6:	e7a5      	b.n	8005244 <_svfiprintf_r+0xd4>
 80052f8:	2300      	movs	r3, #0
 80052fa:	3401      	adds	r4, #1
 80052fc:	9305      	str	r3, [sp, #20]
 80052fe:	4619      	mov	r1, r3
 8005300:	f04f 0c0a 	mov.w	ip, #10
 8005304:	4620      	mov	r0, r4
 8005306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800530a:	3a30      	subs	r2, #48	; 0x30
 800530c:	2a09      	cmp	r2, #9
 800530e:	d903      	bls.n	8005318 <_svfiprintf_r+0x1a8>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0c5      	beq.n	80052a0 <_svfiprintf_r+0x130>
 8005314:	9105      	str	r1, [sp, #20]
 8005316:	e7c3      	b.n	80052a0 <_svfiprintf_r+0x130>
 8005318:	fb0c 2101 	mla	r1, ip, r1, r2
 800531c:	4604      	mov	r4, r0
 800531e:	2301      	movs	r3, #1
 8005320:	e7f0      	b.n	8005304 <_svfiprintf_r+0x194>
 8005322:	ab03      	add	r3, sp, #12
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	462a      	mov	r2, r5
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <_svfiprintf_r+0x1f8>)
 800532a:	a904      	add	r1, sp, #16
 800532c:	4638      	mov	r0, r7
 800532e:	f3af 8000 	nop.w
 8005332:	1c42      	adds	r2, r0, #1
 8005334:	4606      	mov	r6, r0
 8005336:	d1d6      	bne.n	80052e6 <_svfiprintf_r+0x176>
 8005338:	89ab      	ldrh	r3, [r5, #12]
 800533a:	065b      	lsls	r3, r3, #25
 800533c:	f53f af2c 	bmi.w	8005198 <_svfiprintf_r+0x28>
 8005340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005342:	b01d      	add	sp, #116	; 0x74
 8005344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005348:	ab03      	add	r3, sp, #12
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	462a      	mov	r2, r5
 800534e:	4b06      	ldr	r3, [pc, #24]	; (8005368 <_svfiprintf_r+0x1f8>)
 8005350:	a904      	add	r1, sp, #16
 8005352:	4638      	mov	r0, r7
 8005354:	f000 f9d4 	bl	8005700 <_printf_i>
 8005358:	e7eb      	b.n	8005332 <_svfiprintf_r+0x1c2>
 800535a:	bf00      	nop
 800535c:	080063d0 	.word	0x080063d0
 8005360:	080063da 	.word	0x080063da
 8005364:	00000000 	.word	0x00000000
 8005368:	080050b9 	.word	0x080050b9
 800536c:	080063d6 	.word	0x080063d6

08005370 <__sfputc_r>:
 8005370:	6893      	ldr	r3, [r2, #8]
 8005372:	3b01      	subs	r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	b410      	push	{r4}
 8005378:	6093      	str	r3, [r2, #8]
 800537a:	da08      	bge.n	800538e <__sfputc_r+0x1e>
 800537c:	6994      	ldr	r4, [r2, #24]
 800537e:	42a3      	cmp	r3, r4
 8005380:	db01      	blt.n	8005386 <__sfputc_r+0x16>
 8005382:	290a      	cmp	r1, #10
 8005384:	d103      	bne.n	800538e <__sfputc_r+0x1e>
 8005386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800538a:	f000 baef 	b.w	800596c <__swbuf_r>
 800538e:	6813      	ldr	r3, [r2, #0]
 8005390:	1c58      	adds	r0, r3, #1
 8005392:	6010      	str	r0, [r2, #0]
 8005394:	7019      	strb	r1, [r3, #0]
 8005396:	4608      	mov	r0, r1
 8005398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800539c:	4770      	bx	lr

0800539e <__sfputs_r>:
 800539e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a0:	4606      	mov	r6, r0
 80053a2:	460f      	mov	r7, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	18d5      	adds	r5, r2, r3
 80053a8:	42ac      	cmp	r4, r5
 80053aa:	d101      	bne.n	80053b0 <__sfputs_r+0x12>
 80053ac:	2000      	movs	r0, #0
 80053ae:	e007      	b.n	80053c0 <__sfputs_r+0x22>
 80053b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b4:	463a      	mov	r2, r7
 80053b6:	4630      	mov	r0, r6
 80053b8:	f7ff ffda 	bl	8005370 <__sfputc_r>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d1f3      	bne.n	80053a8 <__sfputs_r+0xa>
 80053c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053c4 <_vfiprintf_r>:
 80053c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c8:	460d      	mov	r5, r1
 80053ca:	b09d      	sub	sp, #116	; 0x74
 80053cc:	4614      	mov	r4, r2
 80053ce:	4698      	mov	r8, r3
 80053d0:	4606      	mov	r6, r0
 80053d2:	b118      	cbz	r0, 80053dc <_vfiprintf_r+0x18>
 80053d4:	6983      	ldr	r3, [r0, #24]
 80053d6:	b90b      	cbnz	r3, 80053dc <_vfiprintf_r+0x18>
 80053d8:	f000 fcaa 	bl	8005d30 <__sinit>
 80053dc:	4b89      	ldr	r3, [pc, #548]	; (8005604 <_vfiprintf_r+0x240>)
 80053de:	429d      	cmp	r5, r3
 80053e0:	d11b      	bne.n	800541a <_vfiprintf_r+0x56>
 80053e2:	6875      	ldr	r5, [r6, #4]
 80053e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053e6:	07d9      	lsls	r1, r3, #31
 80053e8:	d405      	bmi.n	80053f6 <_vfiprintf_r+0x32>
 80053ea:	89ab      	ldrh	r3, [r5, #12]
 80053ec:	059a      	lsls	r2, r3, #22
 80053ee:	d402      	bmi.n	80053f6 <_vfiprintf_r+0x32>
 80053f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053f2:	f000 fd3b 	bl	8005e6c <__retarget_lock_acquire_recursive>
 80053f6:	89ab      	ldrh	r3, [r5, #12]
 80053f8:	071b      	lsls	r3, r3, #28
 80053fa:	d501      	bpl.n	8005400 <_vfiprintf_r+0x3c>
 80053fc:	692b      	ldr	r3, [r5, #16]
 80053fe:	b9eb      	cbnz	r3, 800543c <_vfiprintf_r+0x78>
 8005400:	4629      	mov	r1, r5
 8005402:	4630      	mov	r0, r6
 8005404:	f000 fb04 	bl	8005a10 <__swsetup_r>
 8005408:	b1c0      	cbz	r0, 800543c <_vfiprintf_r+0x78>
 800540a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800540c:	07dc      	lsls	r4, r3, #31
 800540e:	d50e      	bpl.n	800542e <_vfiprintf_r+0x6a>
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	b01d      	add	sp, #116	; 0x74
 8005416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541a:	4b7b      	ldr	r3, [pc, #492]	; (8005608 <_vfiprintf_r+0x244>)
 800541c:	429d      	cmp	r5, r3
 800541e:	d101      	bne.n	8005424 <_vfiprintf_r+0x60>
 8005420:	68b5      	ldr	r5, [r6, #8]
 8005422:	e7df      	b.n	80053e4 <_vfiprintf_r+0x20>
 8005424:	4b79      	ldr	r3, [pc, #484]	; (800560c <_vfiprintf_r+0x248>)
 8005426:	429d      	cmp	r5, r3
 8005428:	bf08      	it	eq
 800542a:	68f5      	ldreq	r5, [r6, #12]
 800542c:	e7da      	b.n	80053e4 <_vfiprintf_r+0x20>
 800542e:	89ab      	ldrh	r3, [r5, #12]
 8005430:	0598      	lsls	r0, r3, #22
 8005432:	d4ed      	bmi.n	8005410 <_vfiprintf_r+0x4c>
 8005434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005436:	f000 fd1a 	bl	8005e6e <__retarget_lock_release_recursive>
 800543a:	e7e9      	b.n	8005410 <_vfiprintf_r+0x4c>
 800543c:	2300      	movs	r3, #0
 800543e:	9309      	str	r3, [sp, #36]	; 0x24
 8005440:	2320      	movs	r3, #32
 8005442:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005446:	f8cd 800c 	str.w	r8, [sp, #12]
 800544a:	2330      	movs	r3, #48	; 0x30
 800544c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005610 <_vfiprintf_r+0x24c>
 8005450:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005454:	f04f 0901 	mov.w	r9, #1
 8005458:	4623      	mov	r3, r4
 800545a:	469a      	mov	sl, r3
 800545c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005460:	b10a      	cbz	r2, 8005466 <_vfiprintf_r+0xa2>
 8005462:	2a25      	cmp	r2, #37	; 0x25
 8005464:	d1f9      	bne.n	800545a <_vfiprintf_r+0x96>
 8005466:	ebba 0b04 	subs.w	fp, sl, r4
 800546a:	d00b      	beq.n	8005484 <_vfiprintf_r+0xc0>
 800546c:	465b      	mov	r3, fp
 800546e:	4622      	mov	r2, r4
 8005470:	4629      	mov	r1, r5
 8005472:	4630      	mov	r0, r6
 8005474:	f7ff ff93 	bl	800539e <__sfputs_r>
 8005478:	3001      	adds	r0, #1
 800547a:	f000 80aa 	beq.w	80055d2 <_vfiprintf_r+0x20e>
 800547e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005480:	445a      	add	r2, fp
 8005482:	9209      	str	r2, [sp, #36]	; 0x24
 8005484:	f89a 3000 	ldrb.w	r3, [sl]
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 80a2 	beq.w	80055d2 <_vfiprintf_r+0x20e>
 800548e:	2300      	movs	r3, #0
 8005490:	f04f 32ff 	mov.w	r2, #4294967295
 8005494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005498:	f10a 0a01 	add.w	sl, sl, #1
 800549c:	9304      	str	r3, [sp, #16]
 800549e:	9307      	str	r3, [sp, #28]
 80054a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054a4:	931a      	str	r3, [sp, #104]	; 0x68
 80054a6:	4654      	mov	r4, sl
 80054a8:	2205      	movs	r2, #5
 80054aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ae:	4858      	ldr	r0, [pc, #352]	; (8005610 <_vfiprintf_r+0x24c>)
 80054b0:	f7fa fea6 	bl	8000200 <memchr>
 80054b4:	9a04      	ldr	r2, [sp, #16]
 80054b6:	b9d8      	cbnz	r0, 80054f0 <_vfiprintf_r+0x12c>
 80054b8:	06d1      	lsls	r1, r2, #27
 80054ba:	bf44      	itt	mi
 80054bc:	2320      	movmi	r3, #32
 80054be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054c2:	0713      	lsls	r3, r2, #28
 80054c4:	bf44      	itt	mi
 80054c6:	232b      	movmi	r3, #43	; 0x2b
 80054c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054cc:	f89a 3000 	ldrb.w	r3, [sl]
 80054d0:	2b2a      	cmp	r3, #42	; 0x2a
 80054d2:	d015      	beq.n	8005500 <_vfiprintf_r+0x13c>
 80054d4:	9a07      	ldr	r2, [sp, #28]
 80054d6:	4654      	mov	r4, sl
 80054d8:	2000      	movs	r0, #0
 80054da:	f04f 0c0a 	mov.w	ip, #10
 80054de:	4621      	mov	r1, r4
 80054e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054e4:	3b30      	subs	r3, #48	; 0x30
 80054e6:	2b09      	cmp	r3, #9
 80054e8:	d94e      	bls.n	8005588 <_vfiprintf_r+0x1c4>
 80054ea:	b1b0      	cbz	r0, 800551a <_vfiprintf_r+0x156>
 80054ec:	9207      	str	r2, [sp, #28]
 80054ee:	e014      	b.n	800551a <_vfiprintf_r+0x156>
 80054f0:	eba0 0308 	sub.w	r3, r0, r8
 80054f4:	fa09 f303 	lsl.w	r3, r9, r3
 80054f8:	4313      	orrs	r3, r2
 80054fa:	9304      	str	r3, [sp, #16]
 80054fc:	46a2      	mov	sl, r4
 80054fe:	e7d2      	b.n	80054a6 <_vfiprintf_r+0xe2>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	1d19      	adds	r1, r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	9103      	str	r1, [sp, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	bfbb      	ittet	lt
 800550c:	425b      	neglt	r3, r3
 800550e:	f042 0202 	orrlt.w	r2, r2, #2
 8005512:	9307      	strge	r3, [sp, #28]
 8005514:	9307      	strlt	r3, [sp, #28]
 8005516:	bfb8      	it	lt
 8005518:	9204      	strlt	r2, [sp, #16]
 800551a:	7823      	ldrb	r3, [r4, #0]
 800551c:	2b2e      	cmp	r3, #46	; 0x2e
 800551e:	d10c      	bne.n	800553a <_vfiprintf_r+0x176>
 8005520:	7863      	ldrb	r3, [r4, #1]
 8005522:	2b2a      	cmp	r3, #42	; 0x2a
 8005524:	d135      	bne.n	8005592 <_vfiprintf_r+0x1ce>
 8005526:	9b03      	ldr	r3, [sp, #12]
 8005528:	1d1a      	adds	r2, r3, #4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	9203      	str	r2, [sp, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	bfb8      	it	lt
 8005532:	f04f 33ff 	movlt.w	r3, #4294967295
 8005536:	3402      	adds	r4, #2
 8005538:	9305      	str	r3, [sp, #20]
 800553a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005620 <_vfiprintf_r+0x25c>
 800553e:	7821      	ldrb	r1, [r4, #0]
 8005540:	2203      	movs	r2, #3
 8005542:	4650      	mov	r0, sl
 8005544:	f7fa fe5c 	bl	8000200 <memchr>
 8005548:	b140      	cbz	r0, 800555c <_vfiprintf_r+0x198>
 800554a:	2340      	movs	r3, #64	; 0x40
 800554c:	eba0 000a 	sub.w	r0, r0, sl
 8005550:	fa03 f000 	lsl.w	r0, r3, r0
 8005554:	9b04      	ldr	r3, [sp, #16]
 8005556:	4303      	orrs	r3, r0
 8005558:	3401      	adds	r4, #1
 800555a:	9304      	str	r3, [sp, #16]
 800555c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005560:	482c      	ldr	r0, [pc, #176]	; (8005614 <_vfiprintf_r+0x250>)
 8005562:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005566:	2206      	movs	r2, #6
 8005568:	f7fa fe4a 	bl	8000200 <memchr>
 800556c:	2800      	cmp	r0, #0
 800556e:	d03f      	beq.n	80055f0 <_vfiprintf_r+0x22c>
 8005570:	4b29      	ldr	r3, [pc, #164]	; (8005618 <_vfiprintf_r+0x254>)
 8005572:	bb1b      	cbnz	r3, 80055bc <_vfiprintf_r+0x1f8>
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	3307      	adds	r3, #7
 8005578:	f023 0307 	bic.w	r3, r3, #7
 800557c:	3308      	adds	r3, #8
 800557e:	9303      	str	r3, [sp, #12]
 8005580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005582:	443b      	add	r3, r7
 8005584:	9309      	str	r3, [sp, #36]	; 0x24
 8005586:	e767      	b.n	8005458 <_vfiprintf_r+0x94>
 8005588:	fb0c 3202 	mla	r2, ip, r2, r3
 800558c:	460c      	mov	r4, r1
 800558e:	2001      	movs	r0, #1
 8005590:	e7a5      	b.n	80054de <_vfiprintf_r+0x11a>
 8005592:	2300      	movs	r3, #0
 8005594:	3401      	adds	r4, #1
 8005596:	9305      	str	r3, [sp, #20]
 8005598:	4619      	mov	r1, r3
 800559a:	f04f 0c0a 	mov.w	ip, #10
 800559e:	4620      	mov	r0, r4
 80055a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055a4:	3a30      	subs	r2, #48	; 0x30
 80055a6:	2a09      	cmp	r2, #9
 80055a8:	d903      	bls.n	80055b2 <_vfiprintf_r+0x1ee>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0c5      	beq.n	800553a <_vfiprintf_r+0x176>
 80055ae:	9105      	str	r1, [sp, #20]
 80055b0:	e7c3      	b.n	800553a <_vfiprintf_r+0x176>
 80055b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80055b6:	4604      	mov	r4, r0
 80055b8:	2301      	movs	r3, #1
 80055ba:	e7f0      	b.n	800559e <_vfiprintf_r+0x1da>
 80055bc:	ab03      	add	r3, sp, #12
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	462a      	mov	r2, r5
 80055c2:	4b16      	ldr	r3, [pc, #88]	; (800561c <_vfiprintf_r+0x258>)
 80055c4:	a904      	add	r1, sp, #16
 80055c6:	4630      	mov	r0, r6
 80055c8:	f3af 8000 	nop.w
 80055cc:	4607      	mov	r7, r0
 80055ce:	1c78      	adds	r0, r7, #1
 80055d0:	d1d6      	bne.n	8005580 <_vfiprintf_r+0x1bc>
 80055d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055d4:	07d9      	lsls	r1, r3, #31
 80055d6:	d405      	bmi.n	80055e4 <_vfiprintf_r+0x220>
 80055d8:	89ab      	ldrh	r3, [r5, #12]
 80055da:	059a      	lsls	r2, r3, #22
 80055dc:	d402      	bmi.n	80055e4 <_vfiprintf_r+0x220>
 80055de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055e0:	f000 fc45 	bl	8005e6e <__retarget_lock_release_recursive>
 80055e4:	89ab      	ldrh	r3, [r5, #12]
 80055e6:	065b      	lsls	r3, r3, #25
 80055e8:	f53f af12 	bmi.w	8005410 <_vfiprintf_r+0x4c>
 80055ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ee:	e711      	b.n	8005414 <_vfiprintf_r+0x50>
 80055f0:	ab03      	add	r3, sp, #12
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	462a      	mov	r2, r5
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <_vfiprintf_r+0x258>)
 80055f8:	a904      	add	r1, sp, #16
 80055fa:	4630      	mov	r0, r6
 80055fc:	f000 f880 	bl	8005700 <_printf_i>
 8005600:	e7e4      	b.n	80055cc <_vfiprintf_r+0x208>
 8005602:	bf00      	nop
 8005604:	08006424 	.word	0x08006424
 8005608:	08006444 	.word	0x08006444
 800560c:	08006404 	.word	0x08006404
 8005610:	080063d0 	.word	0x080063d0
 8005614:	080063da 	.word	0x080063da
 8005618:	00000000 	.word	0x00000000
 800561c:	0800539f 	.word	0x0800539f
 8005620:	080063d6 	.word	0x080063d6

08005624 <_printf_common>:
 8005624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005628:	4616      	mov	r6, r2
 800562a:	4699      	mov	r9, r3
 800562c:	688a      	ldr	r2, [r1, #8]
 800562e:	690b      	ldr	r3, [r1, #16]
 8005630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005634:	4293      	cmp	r3, r2
 8005636:	bfb8      	it	lt
 8005638:	4613      	movlt	r3, r2
 800563a:	6033      	str	r3, [r6, #0]
 800563c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005640:	4607      	mov	r7, r0
 8005642:	460c      	mov	r4, r1
 8005644:	b10a      	cbz	r2, 800564a <_printf_common+0x26>
 8005646:	3301      	adds	r3, #1
 8005648:	6033      	str	r3, [r6, #0]
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	0699      	lsls	r1, r3, #26
 800564e:	bf42      	ittt	mi
 8005650:	6833      	ldrmi	r3, [r6, #0]
 8005652:	3302      	addmi	r3, #2
 8005654:	6033      	strmi	r3, [r6, #0]
 8005656:	6825      	ldr	r5, [r4, #0]
 8005658:	f015 0506 	ands.w	r5, r5, #6
 800565c:	d106      	bne.n	800566c <_printf_common+0x48>
 800565e:	f104 0a19 	add.w	sl, r4, #25
 8005662:	68e3      	ldr	r3, [r4, #12]
 8005664:	6832      	ldr	r2, [r6, #0]
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	42ab      	cmp	r3, r5
 800566a:	dc26      	bgt.n	80056ba <_printf_common+0x96>
 800566c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005670:	1e13      	subs	r3, r2, #0
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	bf18      	it	ne
 8005676:	2301      	movne	r3, #1
 8005678:	0692      	lsls	r2, r2, #26
 800567a:	d42b      	bmi.n	80056d4 <_printf_common+0xb0>
 800567c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005680:	4649      	mov	r1, r9
 8005682:	4638      	mov	r0, r7
 8005684:	47c0      	blx	r8
 8005686:	3001      	adds	r0, #1
 8005688:	d01e      	beq.n	80056c8 <_printf_common+0xa4>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	68e5      	ldr	r5, [r4, #12]
 800568e:	6832      	ldr	r2, [r6, #0]
 8005690:	f003 0306 	and.w	r3, r3, #6
 8005694:	2b04      	cmp	r3, #4
 8005696:	bf08      	it	eq
 8005698:	1aad      	subeq	r5, r5, r2
 800569a:	68a3      	ldr	r3, [r4, #8]
 800569c:	6922      	ldr	r2, [r4, #16]
 800569e:	bf0c      	ite	eq
 80056a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a4:	2500      	movne	r5, #0
 80056a6:	4293      	cmp	r3, r2
 80056a8:	bfc4      	itt	gt
 80056aa:	1a9b      	subgt	r3, r3, r2
 80056ac:	18ed      	addgt	r5, r5, r3
 80056ae:	2600      	movs	r6, #0
 80056b0:	341a      	adds	r4, #26
 80056b2:	42b5      	cmp	r5, r6
 80056b4:	d11a      	bne.n	80056ec <_printf_common+0xc8>
 80056b6:	2000      	movs	r0, #0
 80056b8:	e008      	b.n	80056cc <_printf_common+0xa8>
 80056ba:	2301      	movs	r3, #1
 80056bc:	4652      	mov	r2, sl
 80056be:	4649      	mov	r1, r9
 80056c0:	4638      	mov	r0, r7
 80056c2:	47c0      	blx	r8
 80056c4:	3001      	adds	r0, #1
 80056c6:	d103      	bne.n	80056d0 <_printf_common+0xac>
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295
 80056cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d0:	3501      	adds	r5, #1
 80056d2:	e7c6      	b.n	8005662 <_printf_common+0x3e>
 80056d4:	18e1      	adds	r1, r4, r3
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	2030      	movs	r0, #48	; 0x30
 80056da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056de:	4422      	add	r2, r4
 80056e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056e8:	3302      	adds	r3, #2
 80056ea:	e7c7      	b.n	800567c <_printf_common+0x58>
 80056ec:	2301      	movs	r3, #1
 80056ee:	4622      	mov	r2, r4
 80056f0:	4649      	mov	r1, r9
 80056f2:	4638      	mov	r0, r7
 80056f4:	47c0      	blx	r8
 80056f6:	3001      	adds	r0, #1
 80056f8:	d0e6      	beq.n	80056c8 <_printf_common+0xa4>
 80056fa:	3601      	adds	r6, #1
 80056fc:	e7d9      	b.n	80056b2 <_printf_common+0x8e>
	...

08005700 <_printf_i>:
 8005700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005704:	460c      	mov	r4, r1
 8005706:	4691      	mov	r9, r2
 8005708:	7e27      	ldrb	r7, [r4, #24]
 800570a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800570c:	2f78      	cmp	r7, #120	; 0x78
 800570e:	4680      	mov	r8, r0
 8005710:	469a      	mov	sl, r3
 8005712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005716:	d807      	bhi.n	8005728 <_printf_i+0x28>
 8005718:	2f62      	cmp	r7, #98	; 0x62
 800571a:	d80a      	bhi.n	8005732 <_printf_i+0x32>
 800571c:	2f00      	cmp	r7, #0
 800571e:	f000 80d8 	beq.w	80058d2 <_printf_i+0x1d2>
 8005722:	2f58      	cmp	r7, #88	; 0x58
 8005724:	f000 80a3 	beq.w	800586e <_printf_i+0x16e>
 8005728:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800572c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005730:	e03a      	b.n	80057a8 <_printf_i+0xa8>
 8005732:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005736:	2b15      	cmp	r3, #21
 8005738:	d8f6      	bhi.n	8005728 <_printf_i+0x28>
 800573a:	a001      	add	r0, pc, #4	; (adr r0, 8005740 <_printf_i+0x40>)
 800573c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005740:	08005799 	.word	0x08005799
 8005744:	080057ad 	.word	0x080057ad
 8005748:	08005729 	.word	0x08005729
 800574c:	08005729 	.word	0x08005729
 8005750:	08005729 	.word	0x08005729
 8005754:	08005729 	.word	0x08005729
 8005758:	080057ad 	.word	0x080057ad
 800575c:	08005729 	.word	0x08005729
 8005760:	08005729 	.word	0x08005729
 8005764:	08005729 	.word	0x08005729
 8005768:	08005729 	.word	0x08005729
 800576c:	080058b9 	.word	0x080058b9
 8005770:	080057dd 	.word	0x080057dd
 8005774:	0800589b 	.word	0x0800589b
 8005778:	08005729 	.word	0x08005729
 800577c:	08005729 	.word	0x08005729
 8005780:	080058db 	.word	0x080058db
 8005784:	08005729 	.word	0x08005729
 8005788:	080057dd 	.word	0x080057dd
 800578c:	08005729 	.word	0x08005729
 8005790:	08005729 	.word	0x08005729
 8005794:	080058a3 	.word	0x080058a3
 8005798:	680b      	ldr	r3, [r1, #0]
 800579a:	1d1a      	adds	r2, r3, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	600a      	str	r2, [r1, #0]
 80057a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a8:	2301      	movs	r3, #1
 80057aa:	e0a3      	b.n	80058f4 <_printf_i+0x1f4>
 80057ac:	6825      	ldr	r5, [r4, #0]
 80057ae:	6808      	ldr	r0, [r1, #0]
 80057b0:	062e      	lsls	r6, r5, #24
 80057b2:	f100 0304 	add.w	r3, r0, #4
 80057b6:	d50a      	bpl.n	80057ce <_printf_i+0xce>
 80057b8:	6805      	ldr	r5, [r0, #0]
 80057ba:	600b      	str	r3, [r1, #0]
 80057bc:	2d00      	cmp	r5, #0
 80057be:	da03      	bge.n	80057c8 <_printf_i+0xc8>
 80057c0:	232d      	movs	r3, #45	; 0x2d
 80057c2:	426d      	negs	r5, r5
 80057c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c8:	485e      	ldr	r0, [pc, #376]	; (8005944 <_printf_i+0x244>)
 80057ca:	230a      	movs	r3, #10
 80057cc:	e019      	b.n	8005802 <_printf_i+0x102>
 80057ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057d2:	6805      	ldr	r5, [r0, #0]
 80057d4:	600b      	str	r3, [r1, #0]
 80057d6:	bf18      	it	ne
 80057d8:	b22d      	sxthne	r5, r5
 80057da:	e7ef      	b.n	80057bc <_printf_i+0xbc>
 80057dc:	680b      	ldr	r3, [r1, #0]
 80057de:	6825      	ldr	r5, [r4, #0]
 80057e0:	1d18      	adds	r0, r3, #4
 80057e2:	6008      	str	r0, [r1, #0]
 80057e4:	0628      	lsls	r0, r5, #24
 80057e6:	d501      	bpl.n	80057ec <_printf_i+0xec>
 80057e8:	681d      	ldr	r5, [r3, #0]
 80057ea:	e002      	b.n	80057f2 <_printf_i+0xf2>
 80057ec:	0669      	lsls	r1, r5, #25
 80057ee:	d5fb      	bpl.n	80057e8 <_printf_i+0xe8>
 80057f0:	881d      	ldrh	r5, [r3, #0]
 80057f2:	4854      	ldr	r0, [pc, #336]	; (8005944 <_printf_i+0x244>)
 80057f4:	2f6f      	cmp	r7, #111	; 0x6f
 80057f6:	bf0c      	ite	eq
 80057f8:	2308      	moveq	r3, #8
 80057fa:	230a      	movne	r3, #10
 80057fc:	2100      	movs	r1, #0
 80057fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005802:	6866      	ldr	r6, [r4, #4]
 8005804:	60a6      	str	r6, [r4, #8]
 8005806:	2e00      	cmp	r6, #0
 8005808:	bfa2      	ittt	ge
 800580a:	6821      	ldrge	r1, [r4, #0]
 800580c:	f021 0104 	bicge.w	r1, r1, #4
 8005810:	6021      	strge	r1, [r4, #0]
 8005812:	b90d      	cbnz	r5, 8005818 <_printf_i+0x118>
 8005814:	2e00      	cmp	r6, #0
 8005816:	d04d      	beq.n	80058b4 <_printf_i+0x1b4>
 8005818:	4616      	mov	r6, r2
 800581a:	fbb5 f1f3 	udiv	r1, r5, r3
 800581e:	fb03 5711 	mls	r7, r3, r1, r5
 8005822:	5dc7      	ldrb	r7, [r0, r7]
 8005824:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005828:	462f      	mov	r7, r5
 800582a:	42bb      	cmp	r3, r7
 800582c:	460d      	mov	r5, r1
 800582e:	d9f4      	bls.n	800581a <_printf_i+0x11a>
 8005830:	2b08      	cmp	r3, #8
 8005832:	d10b      	bne.n	800584c <_printf_i+0x14c>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	07df      	lsls	r7, r3, #31
 8005838:	d508      	bpl.n	800584c <_printf_i+0x14c>
 800583a:	6923      	ldr	r3, [r4, #16]
 800583c:	6861      	ldr	r1, [r4, #4]
 800583e:	4299      	cmp	r1, r3
 8005840:	bfde      	ittt	le
 8005842:	2330      	movle	r3, #48	; 0x30
 8005844:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005848:	f106 36ff 	addle.w	r6, r6, #4294967295
 800584c:	1b92      	subs	r2, r2, r6
 800584e:	6122      	str	r2, [r4, #16]
 8005850:	f8cd a000 	str.w	sl, [sp]
 8005854:	464b      	mov	r3, r9
 8005856:	aa03      	add	r2, sp, #12
 8005858:	4621      	mov	r1, r4
 800585a:	4640      	mov	r0, r8
 800585c:	f7ff fee2 	bl	8005624 <_printf_common>
 8005860:	3001      	adds	r0, #1
 8005862:	d14c      	bne.n	80058fe <_printf_i+0x1fe>
 8005864:	f04f 30ff 	mov.w	r0, #4294967295
 8005868:	b004      	add	sp, #16
 800586a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586e:	4835      	ldr	r0, [pc, #212]	; (8005944 <_printf_i+0x244>)
 8005870:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	680e      	ldr	r6, [r1, #0]
 8005878:	061f      	lsls	r7, r3, #24
 800587a:	f856 5b04 	ldr.w	r5, [r6], #4
 800587e:	600e      	str	r6, [r1, #0]
 8005880:	d514      	bpl.n	80058ac <_printf_i+0x1ac>
 8005882:	07d9      	lsls	r1, r3, #31
 8005884:	bf44      	itt	mi
 8005886:	f043 0320 	orrmi.w	r3, r3, #32
 800588a:	6023      	strmi	r3, [r4, #0]
 800588c:	b91d      	cbnz	r5, 8005896 <_printf_i+0x196>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	f023 0320 	bic.w	r3, r3, #32
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	2310      	movs	r3, #16
 8005898:	e7b0      	b.n	80057fc <_printf_i+0xfc>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	f043 0320 	orr.w	r3, r3, #32
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	2378      	movs	r3, #120	; 0x78
 80058a4:	4828      	ldr	r0, [pc, #160]	; (8005948 <_printf_i+0x248>)
 80058a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058aa:	e7e3      	b.n	8005874 <_printf_i+0x174>
 80058ac:	065e      	lsls	r6, r3, #25
 80058ae:	bf48      	it	mi
 80058b0:	b2ad      	uxthmi	r5, r5
 80058b2:	e7e6      	b.n	8005882 <_printf_i+0x182>
 80058b4:	4616      	mov	r6, r2
 80058b6:	e7bb      	b.n	8005830 <_printf_i+0x130>
 80058b8:	680b      	ldr	r3, [r1, #0]
 80058ba:	6826      	ldr	r6, [r4, #0]
 80058bc:	6960      	ldr	r0, [r4, #20]
 80058be:	1d1d      	adds	r5, r3, #4
 80058c0:	600d      	str	r5, [r1, #0]
 80058c2:	0635      	lsls	r5, r6, #24
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	d501      	bpl.n	80058cc <_printf_i+0x1cc>
 80058c8:	6018      	str	r0, [r3, #0]
 80058ca:	e002      	b.n	80058d2 <_printf_i+0x1d2>
 80058cc:	0671      	lsls	r1, r6, #25
 80058ce:	d5fb      	bpl.n	80058c8 <_printf_i+0x1c8>
 80058d0:	8018      	strh	r0, [r3, #0]
 80058d2:	2300      	movs	r3, #0
 80058d4:	6123      	str	r3, [r4, #16]
 80058d6:	4616      	mov	r6, r2
 80058d8:	e7ba      	b.n	8005850 <_printf_i+0x150>
 80058da:	680b      	ldr	r3, [r1, #0]
 80058dc:	1d1a      	adds	r2, r3, #4
 80058de:	600a      	str	r2, [r1, #0]
 80058e0:	681e      	ldr	r6, [r3, #0]
 80058e2:	6862      	ldr	r2, [r4, #4]
 80058e4:	2100      	movs	r1, #0
 80058e6:	4630      	mov	r0, r6
 80058e8:	f7fa fc8a 	bl	8000200 <memchr>
 80058ec:	b108      	cbz	r0, 80058f2 <_printf_i+0x1f2>
 80058ee:	1b80      	subs	r0, r0, r6
 80058f0:	6060      	str	r0, [r4, #4]
 80058f2:	6863      	ldr	r3, [r4, #4]
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	2300      	movs	r3, #0
 80058f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058fc:	e7a8      	b.n	8005850 <_printf_i+0x150>
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	4632      	mov	r2, r6
 8005902:	4649      	mov	r1, r9
 8005904:	4640      	mov	r0, r8
 8005906:	47d0      	blx	sl
 8005908:	3001      	adds	r0, #1
 800590a:	d0ab      	beq.n	8005864 <_printf_i+0x164>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	079b      	lsls	r3, r3, #30
 8005910:	d413      	bmi.n	800593a <_printf_i+0x23a>
 8005912:	68e0      	ldr	r0, [r4, #12]
 8005914:	9b03      	ldr	r3, [sp, #12]
 8005916:	4298      	cmp	r0, r3
 8005918:	bfb8      	it	lt
 800591a:	4618      	movlt	r0, r3
 800591c:	e7a4      	b.n	8005868 <_printf_i+0x168>
 800591e:	2301      	movs	r3, #1
 8005920:	4632      	mov	r2, r6
 8005922:	4649      	mov	r1, r9
 8005924:	4640      	mov	r0, r8
 8005926:	47d0      	blx	sl
 8005928:	3001      	adds	r0, #1
 800592a:	d09b      	beq.n	8005864 <_printf_i+0x164>
 800592c:	3501      	adds	r5, #1
 800592e:	68e3      	ldr	r3, [r4, #12]
 8005930:	9903      	ldr	r1, [sp, #12]
 8005932:	1a5b      	subs	r3, r3, r1
 8005934:	42ab      	cmp	r3, r5
 8005936:	dcf2      	bgt.n	800591e <_printf_i+0x21e>
 8005938:	e7eb      	b.n	8005912 <_printf_i+0x212>
 800593a:	2500      	movs	r5, #0
 800593c:	f104 0619 	add.w	r6, r4, #25
 8005940:	e7f5      	b.n	800592e <_printf_i+0x22e>
 8005942:	bf00      	nop
 8005944:	080063e1 	.word	0x080063e1
 8005948:	080063f2 	.word	0x080063f2

0800594c <_sbrk_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d06      	ldr	r5, [pc, #24]	; (8005968 <_sbrk_r+0x1c>)
 8005950:	2300      	movs	r3, #0
 8005952:	4604      	mov	r4, r0
 8005954:	4608      	mov	r0, r1
 8005956:	602b      	str	r3, [r5, #0]
 8005958:	f7fb fd92 	bl	8001480 <_sbrk>
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d102      	bne.n	8005966 <_sbrk_r+0x1a>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	b103      	cbz	r3, 8005966 <_sbrk_r+0x1a>
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	bd38      	pop	{r3, r4, r5, pc}
 8005968:	20000394 	.word	0x20000394

0800596c <__swbuf_r>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	460e      	mov	r6, r1
 8005970:	4614      	mov	r4, r2
 8005972:	4605      	mov	r5, r0
 8005974:	b118      	cbz	r0, 800597e <__swbuf_r+0x12>
 8005976:	6983      	ldr	r3, [r0, #24]
 8005978:	b90b      	cbnz	r3, 800597e <__swbuf_r+0x12>
 800597a:	f000 f9d9 	bl	8005d30 <__sinit>
 800597e:	4b21      	ldr	r3, [pc, #132]	; (8005a04 <__swbuf_r+0x98>)
 8005980:	429c      	cmp	r4, r3
 8005982:	d12b      	bne.n	80059dc <__swbuf_r+0x70>
 8005984:	686c      	ldr	r4, [r5, #4]
 8005986:	69a3      	ldr	r3, [r4, #24]
 8005988:	60a3      	str	r3, [r4, #8]
 800598a:	89a3      	ldrh	r3, [r4, #12]
 800598c:	071a      	lsls	r2, r3, #28
 800598e:	d52f      	bpl.n	80059f0 <__swbuf_r+0x84>
 8005990:	6923      	ldr	r3, [r4, #16]
 8005992:	b36b      	cbz	r3, 80059f0 <__swbuf_r+0x84>
 8005994:	6923      	ldr	r3, [r4, #16]
 8005996:	6820      	ldr	r0, [r4, #0]
 8005998:	1ac0      	subs	r0, r0, r3
 800599a:	6963      	ldr	r3, [r4, #20]
 800599c:	b2f6      	uxtb	r6, r6
 800599e:	4283      	cmp	r3, r0
 80059a0:	4637      	mov	r7, r6
 80059a2:	dc04      	bgt.n	80059ae <__swbuf_r+0x42>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 f92e 	bl	8005c08 <_fflush_r>
 80059ac:	bb30      	cbnz	r0, 80059fc <__swbuf_r+0x90>
 80059ae:	68a3      	ldr	r3, [r4, #8]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	60a3      	str	r3, [r4, #8]
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	6022      	str	r2, [r4, #0]
 80059ba:	701e      	strb	r6, [r3, #0]
 80059bc:	6963      	ldr	r3, [r4, #20]
 80059be:	3001      	adds	r0, #1
 80059c0:	4283      	cmp	r3, r0
 80059c2:	d004      	beq.n	80059ce <__swbuf_r+0x62>
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	07db      	lsls	r3, r3, #31
 80059c8:	d506      	bpl.n	80059d8 <__swbuf_r+0x6c>
 80059ca:	2e0a      	cmp	r6, #10
 80059cc:	d104      	bne.n	80059d8 <__swbuf_r+0x6c>
 80059ce:	4621      	mov	r1, r4
 80059d0:	4628      	mov	r0, r5
 80059d2:	f000 f919 	bl	8005c08 <_fflush_r>
 80059d6:	b988      	cbnz	r0, 80059fc <__swbuf_r+0x90>
 80059d8:	4638      	mov	r0, r7
 80059da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <__swbuf_r+0x9c>)
 80059de:	429c      	cmp	r4, r3
 80059e0:	d101      	bne.n	80059e6 <__swbuf_r+0x7a>
 80059e2:	68ac      	ldr	r4, [r5, #8]
 80059e4:	e7cf      	b.n	8005986 <__swbuf_r+0x1a>
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <__swbuf_r+0xa0>)
 80059e8:	429c      	cmp	r4, r3
 80059ea:	bf08      	it	eq
 80059ec:	68ec      	ldreq	r4, [r5, #12]
 80059ee:	e7ca      	b.n	8005986 <__swbuf_r+0x1a>
 80059f0:	4621      	mov	r1, r4
 80059f2:	4628      	mov	r0, r5
 80059f4:	f000 f80c 	bl	8005a10 <__swsetup_r>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d0cb      	beq.n	8005994 <__swbuf_r+0x28>
 80059fc:	f04f 37ff 	mov.w	r7, #4294967295
 8005a00:	e7ea      	b.n	80059d8 <__swbuf_r+0x6c>
 8005a02:	bf00      	nop
 8005a04:	08006424 	.word	0x08006424
 8005a08:	08006444 	.word	0x08006444
 8005a0c:	08006404 	.word	0x08006404

08005a10 <__swsetup_r>:
 8005a10:	4b32      	ldr	r3, [pc, #200]	; (8005adc <__swsetup_r+0xcc>)
 8005a12:	b570      	push	{r4, r5, r6, lr}
 8005a14:	681d      	ldr	r5, [r3, #0]
 8005a16:	4606      	mov	r6, r0
 8005a18:	460c      	mov	r4, r1
 8005a1a:	b125      	cbz	r5, 8005a26 <__swsetup_r+0x16>
 8005a1c:	69ab      	ldr	r3, [r5, #24]
 8005a1e:	b913      	cbnz	r3, 8005a26 <__swsetup_r+0x16>
 8005a20:	4628      	mov	r0, r5
 8005a22:	f000 f985 	bl	8005d30 <__sinit>
 8005a26:	4b2e      	ldr	r3, [pc, #184]	; (8005ae0 <__swsetup_r+0xd0>)
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	d10f      	bne.n	8005a4c <__swsetup_r+0x3c>
 8005a2c:	686c      	ldr	r4, [r5, #4]
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a34:	0719      	lsls	r1, r3, #28
 8005a36:	d42c      	bmi.n	8005a92 <__swsetup_r+0x82>
 8005a38:	06dd      	lsls	r5, r3, #27
 8005a3a:	d411      	bmi.n	8005a60 <__swsetup_r+0x50>
 8005a3c:	2309      	movs	r3, #9
 8005a3e:	6033      	str	r3, [r6, #0]
 8005a40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4a:	e03e      	b.n	8005aca <__swsetup_r+0xba>
 8005a4c:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <__swsetup_r+0xd4>)
 8005a4e:	429c      	cmp	r4, r3
 8005a50:	d101      	bne.n	8005a56 <__swsetup_r+0x46>
 8005a52:	68ac      	ldr	r4, [r5, #8]
 8005a54:	e7eb      	b.n	8005a2e <__swsetup_r+0x1e>
 8005a56:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <__swsetup_r+0xd8>)
 8005a58:	429c      	cmp	r4, r3
 8005a5a:	bf08      	it	eq
 8005a5c:	68ec      	ldreq	r4, [r5, #12]
 8005a5e:	e7e6      	b.n	8005a2e <__swsetup_r+0x1e>
 8005a60:	0758      	lsls	r0, r3, #29
 8005a62:	d512      	bpl.n	8005a8a <__swsetup_r+0x7a>
 8005a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a66:	b141      	cbz	r1, 8005a7a <__swsetup_r+0x6a>
 8005a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d002      	beq.n	8005a76 <__swsetup_r+0x66>
 8005a70:	4630      	mov	r0, r6
 8005a72:	f7ff fa77 	bl	8004f64 <_free_r>
 8005a76:	2300      	movs	r3, #0
 8005a78:	6363      	str	r3, [r4, #52]	; 0x34
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	2300      	movs	r3, #0
 8005a84:	6063      	str	r3, [r4, #4]
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	f043 0308 	orr.w	r3, r3, #8
 8005a90:	81a3      	strh	r3, [r4, #12]
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	b94b      	cbnz	r3, 8005aaa <__swsetup_r+0x9a>
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa0:	d003      	beq.n	8005aaa <__swsetup_r+0x9a>
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f000 fa07 	bl	8005eb8 <__smakebuf_r>
 8005aaa:	89a0      	ldrh	r0, [r4, #12]
 8005aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ab0:	f010 0301 	ands.w	r3, r0, #1
 8005ab4:	d00a      	beq.n	8005acc <__swsetup_r+0xbc>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60a3      	str	r3, [r4, #8]
 8005aba:	6963      	ldr	r3, [r4, #20]
 8005abc:	425b      	negs	r3, r3
 8005abe:	61a3      	str	r3, [r4, #24]
 8005ac0:	6923      	ldr	r3, [r4, #16]
 8005ac2:	b943      	cbnz	r3, 8005ad6 <__swsetup_r+0xc6>
 8005ac4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ac8:	d1ba      	bne.n	8005a40 <__swsetup_r+0x30>
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	0781      	lsls	r1, r0, #30
 8005ace:	bf58      	it	pl
 8005ad0:	6963      	ldrpl	r3, [r4, #20]
 8005ad2:	60a3      	str	r3, [r4, #8]
 8005ad4:	e7f4      	b.n	8005ac0 <__swsetup_r+0xb0>
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e7f7      	b.n	8005aca <__swsetup_r+0xba>
 8005ada:	bf00      	nop
 8005adc:	2000000c 	.word	0x2000000c
 8005ae0:	08006424 	.word	0x08006424
 8005ae4:	08006444 	.word	0x08006444
 8005ae8:	08006404 	.word	0x08006404

08005aec <abort>:
 8005aec:	b508      	push	{r3, lr}
 8005aee:	2006      	movs	r0, #6
 8005af0:	f000 faa4 	bl	800603c <raise>
 8005af4:	2001      	movs	r0, #1
 8005af6:	f7fb fc4b 	bl	8001390 <_exit>
	...

08005afc <__sflush_r>:
 8005afc:	898a      	ldrh	r2, [r1, #12]
 8005afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b02:	4605      	mov	r5, r0
 8005b04:	0710      	lsls	r0, r2, #28
 8005b06:	460c      	mov	r4, r1
 8005b08:	d458      	bmi.n	8005bbc <__sflush_r+0xc0>
 8005b0a:	684b      	ldr	r3, [r1, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dc05      	bgt.n	8005b1c <__sflush_r+0x20>
 8005b10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	dc02      	bgt.n	8005b1c <__sflush_r+0x20>
 8005b16:	2000      	movs	r0, #0
 8005b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b1e:	2e00      	cmp	r6, #0
 8005b20:	d0f9      	beq.n	8005b16 <__sflush_r+0x1a>
 8005b22:	2300      	movs	r3, #0
 8005b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b28:	682f      	ldr	r7, [r5, #0]
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	d032      	beq.n	8005b94 <__sflush_r+0x98>
 8005b2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	075a      	lsls	r2, r3, #29
 8005b34:	d505      	bpl.n	8005b42 <__sflush_r+0x46>
 8005b36:	6863      	ldr	r3, [r4, #4]
 8005b38:	1ac0      	subs	r0, r0, r3
 8005b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b3c:	b10b      	cbz	r3, 8005b42 <__sflush_r+0x46>
 8005b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b40:	1ac0      	subs	r0, r0, r3
 8005b42:	2300      	movs	r3, #0
 8005b44:	4602      	mov	r2, r0
 8005b46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b48:	6a21      	ldr	r1, [r4, #32]
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b0      	blx	r6
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	d106      	bne.n	8005b62 <__sflush_r+0x66>
 8005b54:	6829      	ldr	r1, [r5, #0]
 8005b56:	291d      	cmp	r1, #29
 8005b58:	d82c      	bhi.n	8005bb4 <__sflush_r+0xb8>
 8005b5a:	4a2a      	ldr	r2, [pc, #168]	; (8005c04 <__sflush_r+0x108>)
 8005b5c:	40ca      	lsrs	r2, r1
 8005b5e:	07d6      	lsls	r6, r2, #31
 8005b60:	d528      	bpl.n	8005bb4 <__sflush_r+0xb8>
 8005b62:	2200      	movs	r2, #0
 8005b64:	6062      	str	r2, [r4, #4]
 8005b66:	04d9      	lsls	r1, r3, #19
 8005b68:	6922      	ldr	r2, [r4, #16]
 8005b6a:	6022      	str	r2, [r4, #0]
 8005b6c:	d504      	bpl.n	8005b78 <__sflush_r+0x7c>
 8005b6e:	1c42      	adds	r2, r0, #1
 8005b70:	d101      	bne.n	8005b76 <__sflush_r+0x7a>
 8005b72:	682b      	ldr	r3, [r5, #0]
 8005b74:	b903      	cbnz	r3, 8005b78 <__sflush_r+0x7c>
 8005b76:	6560      	str	r0, [r4, #84]	; 0x54
 8005b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b7a:	602f      	str	r7, [r5, #0]
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	d0ca      	beq.n	8005b16 <__sflush_r+0x1a>
 8005b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b84:	4299      	cmp	r1, r3
 8005b86:	d002      	beq.n	8005b8e <__sflush_r+0x92>
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f7ff f9eb 	bl	8004f64 <_free_r>
 8005b8e:	2000      	movs	r0, #0
 8005b90:	6360      	str	r0, [r4, #52]	; 0x34
 8005b92:	e7c1      	b.n	8005b18 <__sflush_r+0x1c>
 8005b94:	6a21      	ldr	r1, [r4, #32]
 8005b96:	2301      	movs	r3, #1
 8005b98:	4628      	mov	r0, r5
 8005b9a:	47b0      	blx	r6
 8005b9c:	1c41      	adds	r1, r0, #1
 8005b9e:	d1c7      	bne.n	8005b30 <__sflush_r+0x34>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0c4      	beq.n	8005b30 <__sflush_r+0x34>
 8005ba6:	2b1d      	cmp	r3, #29
 8005ba8:	d001      	beq.n	8005bae <__sflush_r+0xb2>
 8005baa:	2b16      	cmp	r3, #22
 8005bac:	d101      	bne.n	8005bb2 <__sflush_r+0xb6>
 8005bae:	602f      	str	r7, [r5, #0]
 8005bb0:	e7b1      	b.n	8005b16 <__sflush_r+0x1a>
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	e7ad      	b.n	8005b18 <__sflush_r+0x1c>
 8005bbc:	690f      	ldr	r7, [r1, #16]
 8005bbe:	2f00      	cmp	r7, #0
 8005bc0:	d0a9      	beq.n	8005b16 <__sflush_r+0x1a>
 8005bc2:	0793      	lsls	r3, r2, #30
 8005bc4:	680e      	ldr	r6, [r1, #0]
 8005bc6:	bf08      	it	eq
 8005bc8:	694b      	ldreq	r3, [r1, #20]
 8005bca:	600f      	str	r7, [r1, #0]
 8005bcc:	bf18      	it	ne
 8005bce:	2300      	movne	r3, #0
 8005bd0:	eba6 0807 	sub.w	r8, r6, r7
 8005bd4:	608b      	str	r3, [r1, #8]
 8005bd6:	f1b8 0f00 	cmp.w	r8, #0
 8005bda:	dd9c      	ble.n	8005b16 <__sflush_r+0x1a>
 8005bdc:	6a21      	ldr	r1, [r4, #32]
 8005bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005be0:	4643      	mov	r3, r8
 8005be2:	463a      	mov	r2, r7
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b0      	blx	r6
 8005be8:	2800      	cmp	r0, #0
 8005bea:	dc06      	bgt.n	8005bfa <__sflush_r+0xfe>
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf2:	81a3      	strh	r3, [r4, #12]
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf8:	e78e      	b.n	8005b18 <__sflush_r+0x1c>
 8005bfa:	4407      	add	r7, r0
 8005bfc:	eba8 0800 	sub.w	r8, r8, r0
 8005c00:	e7e9      	b.n	8005bd6 <__sflush_r+0xda>
 8005c02:	bf00      	nop
 8005c04:	20400001 	.word	0x20400001

08005c08 <_fflush_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	690b      	ldr	r3, [r1, #16]
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	b913      	cbnz	r3, 8005c18 <_fflush_r+0x10>
 8005c12:	2500      	movs	r5, #0
 8005c14:	4628      	mov	r0, r5
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	b118      	cbz	r0, 8005c22 <_fflush_r+0x1a>
 8005c1a:	6983      	ldr	r3, [r0, #24]
 8005c1c:	b90b      	cbnz	r3, 8005c22 <_fflush_r+0x1a>
 8005c1e:	f000 f887 	bl	8005d30 <__sinit>
 8005c22:	4b14      	ldr	r3, [pc, #80]	; (8005c74 <_fflush_r+0x6c>)
 8005c24:	429c      	cmp	r4, r3
 8005c26:	d11b      	bne.n	8005c60 <_fflush_r+0x58>
 8005c28:	686c      	ldr	r4, [r5, #4]
 8005c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0ef      	beq.n	8005c12 <_fflush_r+0xa>
 8005c32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c34:	07d0      	lsls	r0, r2, #31
 8005c36:	d404      	bmi.n	8005c42 <_fflush_r+0x3a>
 8005c38:	0599      	lsls	r1, r3, #22
 8005c3a:	d402      	bmi.n	8005c42 <_fflush_r+0x3a>
 8005c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c3e:	f000 f915 	bl	8005e6c <__retarget_lock_acquire_recursive>
 8005c42:	4628      	mov	r0, r5
 8005c44:	4621      	mov	r1, r4
 8005c46:	f7ff ff59 	bl	8005afc <__sflush_r>
 8005c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c4c:	07da      	lsls	r2, r3, #31
 8005c4e:	4605      	mov	r5, r0
 8005c50:	d4e0      	bmi.n	8005c14 <_fflush_r+0xc>
 8005c52:	89a3      	ldrh	r3, [r4, #12]
 8005c54:	059b      	lsls	r3, r3, #22
 8005c56:	d4dd      	bmi.n	8005c14 <_fflush_r+0xc>
 8005c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5a:	f000 f908 	bl	8005e6e <__retarget_lock_release_recursive>
 8005c5e:	e7d9      	b.n	8005c14 <_fflush_r+0xc>
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <_fflush_r+0x70>)
 8005c62:	429c      	cmp	r4, r3
 8005c64:	d101      	bne.n	8005c6a <_fflush_r+0x62>
 8005c66:	68ac      	ldr	r4, [r5, #8]
 8005c68:	e7df      	b.n	8005c2a <_fflush_r+0x22>
 8005c6a:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <_fflush_r+0x74>)
 8005c6c:	429c      	cmp	r4, r3
 8005c6e:	bf08      	it	eq
 8005c70:	68ec      	ldreq	r4, [r5, #12]
 8005c72:	e7da      	b.n	8005c2a <_fflush_r+0x22>
 8005c74:	08006424 	.word	0x08006424
 8005c78:	08006444 	.word	0x08006444
 8005c7c:	08006404 	.word	0x08006404

08005c80 <std>:
 8005c80:	2300      	movs	r3, #0
 8005c82:	b510      	push	{r4, lr}
 8005c84:	4604      	mov	r4, r0
 8005c86:	e9c0 3300 	strd	r3, r3, [r0]
 8005c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c8e:	6083      	str	r3, [r0, #8]
 8005c90:	8181      	strh	r1, [r0, #12]
 8005c92:	6643      	str	r3, [r0, #100]	; 0x64
 8005c94:	81c2      	strh	r2, [r0, #14]
 8005c96:	6183      	str	r3, [r0, #24]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	305c      	adds	r0, #92	; 0x5c
 8005c9e:	f7ff f865 	bl	8004d6c <memset>
 8005ca2:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <std+0x38>)
 8005ca4:	6263      	str	r3, [r4, #36]	; 0x24
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <std+0x3c>)
 8005ca8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <std+0x40>)
 8005cac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cae:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <std+0x44>)
 8005cb0:	6224      	str	r4, [r4, #32]
 8005cb2:	6323      	str	r3, [r4, #48]	; 0x30
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	bf00      	nop
 8005cb8:	08006075 	.word	0x08006075
 8005cbc:	08006097 	.word	0x08006097
 8005cc0:	080060cf 	.word	0x080060cf
 8005cc4:	080060f3 	.word	0x080060f3

08005cc8 <_cleanup_r>:
 8005cc8:	4901      	ldr	r1, [pc, #4]	; (8005cd0 <_cleanup_r+0x8>)
 8005cca:	f000 b8af 	b.w	8005e2c <_fwalk_reent>
 8005cce:	bf00      	nop
 8005cd0:	08005c09 	.word	0x08005c09

08005cd4 <__sfmoreglue>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	1e4a      	subs	r2, r1, #1
 8005cd8:	2568      	movs	r5, #104	; 0x68
 8005cda:	4355      	muls	r5, r2
 8005cdc:	460e      	mov	r6, r1
 8005cde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ce2:	f7ff f98f 	bl	8005004 <_malloc_r>
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	b140      	cbz	r0, 8005cfc <__sfmoreglue+0x28>
 8005cea:	2100      	movs	r1, #0
 8005cec:	e9c0 1600 	strd	r1, r6, [r0]
 8005cf0:	300c      	adds	r0, #12
 8005cf2:	60a0      	str	r0, [r4, #8]
 8005cf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cf8:	f7ff f838 	bl	8004d6c <memset>
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}

08005d00 <__sfp_lock_acquire>:
 8005d00:	4801      	ldr	r0, [pc, #4]	; (8005d08 <__sfp_lock_acquire+0x8>)
 8005d02:	f000 b8b3 	b.w	8005e6c <__retarget_lock_acquire_recursive>
 8005d06:	bf00      	nop
 8005d08:	20000390 	.word	0x20000390

08005d0c <__sfp_lock_release>:
 8005d0c:	4801      	ldr	r0, [pc, #4]	; (8005d14 <__sfp_lock_release+0x8>)
 8005d0e:	f000 b8ae 	b.w	8005e6e <__retarget_lock_release_recursive>
 8005d12:	bf00      	nop
 8005d14:	20000390 	.word	0x20000390

08005d18 <__sinit_lock_acquire>:
 8005d18:	4801      	ldr	r0, [pc, #4]	; (8005d20 <__sinit_lock_acquire+0x8>)
 8005d1a:	f000 b8a7 	b.w	8005e6c <__retarget_lock_acquire_recursive>
 8005d1e:	bf00      	nop
 8005d20:	2000038b 	.word	0x2000038b

08005d24 <__sinit_lock_release>:
 8005d24:	4801      	ldr	r0, [pc, #4]	; (8005d2c <__sinit_lock_release+0x8>)
 8005d26:	f000 b8a2 	b.w	8005e6e <__retarget_lock_release_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	2000038b 	.word	0x2000038b

08005d30 <__sinit>:
 8005d30:	b510      	push	{r4, lr}
 8005d32:	4604      	mov	r4, r0
 8005d34:	f7ff fff0 	bl	8005d18 <__sinit_lock_acquire>
 8005d38:	69a3      	ldr	r3, [r4, #24]
 8005d3a:	b11b      	cbz	r3, 8005d44 <__sinit+0x14>
 8005d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d40:	f7ff bff0 	b.w	8005d24 <__sinit_lock_release>
 8005d44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d48:	6523      	str	r3, [r4, #80]	; 0x50
 8005d4a:	4b13      	ldr	r3, [pc, #76]	; (8005d98 <__sinit+0x68>)
 8005d4c:	4a13      	ldr	r2, [pc, #76]	; (8005d9c <__sinit+0x6c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	bf04      	itt	eq
 8005d56:	2301      	moveq	r3, #1
 8005d58:	61a3      	streq	r3, [r4, #24]
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 f820 	bl	8005da0 <__sfp>
 8005d60:	6060      	str	r0, [r4, #4]
 8005d62:	4620      	mov	r0, r4
 8005d64:	f000 f81c 	bl	8005da0 <__sfp>
 8005d68:	60a0      	str	r0, [r4, #8]
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f000 f818 	bl	8005da0 <__sfp>
 8005d70:	2200      	movs	r2, #0
 8005d72:	60e0      	str	r0, [r4, #12]
 8005d74:	2104      	movs	r1, #4
 8005d76:	6860      	ldr	r0, [r4, #4]
 8005d78:	f7ff ff82 	bl	8005c80 <std>
 8005d7c:	68a0      	ldr	r0, [r4, #8]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	2109      	movs	r1, #9
 8005d82:	f7ff ff7d 	bl	8005c80 <std>
 8005d86:	68e0      	ldr	r0, [r4, #12]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	2112      	movs	r1, #18
 8005d8c:	f7ff ff78 	bl	8005c80 <std>
 8005d90:	2301      	movs	r3, #1
 8005d92:	61a3      	str	r3, [r4, #24]
 8005d94:	e7d2      	b.n	8005d3c <__sinit+0xc>
 8005d96:	bf00      	nop
 8005d98:	08006318 	.word	0x08006318
 8005d9c:	08005cc9 	.word	0x08005cc9

08005da0 <__sfp>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	4607      	mov	r7, r0
 8005da4:	f7ff ffac 	bl	8005d00 <__sfp_lock_acquire>
 8005da8:	4b1e      	ldr	r3, [pc, #120]	; (8005e24 <__sfp+0x84>)
 8005daa:	681e      	ldr	r6, [r3, #0]
 8005dac:	69b3      	ldr	r3, [r6, #24]
 8005dae:	b913      	cbnz	r3, 8005db6 <__sfp+0x16>
 8005db0:	4630      	mov	r0, r6
 8005db2:	f7ff ffbd 	bl	8005d30 <__sinit>
 8005db6:	3648      	adds	r6, #72	; 0x48
 8005db8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	d503      	bpl.n	8005dc8 <__sfp+0x28>
 8005dc0:	6833      	ldr	r3, [r6, #0]
 8005dc2:	b30b      	cbz	r3, 8005e08 <__sfp+0x68>
 8005dc4:	6836      	ldr	r6, [r6, #0]
 8005dc6:	e7f7      	b.n	8005db8 <__sfp+0x18>
 8005dc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005dcc:	b9d5      	cbnz	r5, 8005e04 <__sfp+0x64>
 8005dce:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <__sfp+0x88>)
 8005dd0:	60e3      	str	r3, [r4, #12]
 8005dd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dd6:	6665      	str	r5, [r4, #100]	; 0x64
 8005dd8:	f000 f847 	bl	8005e6a <__retarget_lock_init_recursive>
 8005ddc:	f7ff ff96 	bl	8005d0c <__sfp_lock_release>
 8005de0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005de4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005de8:	6025      	str	r5, [r4, #0]
 8005dea:	61a5      	str	r5, [r4, #24]
 8005dec:	2208      	movs	r2, #8
 8005dee:	4629      	mov	r1, r5
 8005df0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005df4:	f7fe ffba 	bl	8004d6c <memset>
 8005df8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005dfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e00:	4620      	mov	r0, r4
 8005e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e04:	3468      	adds	r4, #104	; 0x68
 8005e06:	e7d9      	b.n	8005dbc <__sfp+0x1c>
 8005e08:	2104      	movs	r1, #4
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	f7ff ff62 	bl	8005cd4 <__sfmoreglue>
 8005e10:	4604      	mov	r4, r0
 8005e12:	6030      	str	r0, [r6, #0]
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d1d5      	bne.n	8005dc4 <__sfp+0x24>
 8005e18:	f7ff ff78 	bl	8005d0c <__sfp_lock_release>
 8005e1c:	230c      	movs	r3, #12
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	e7ee      	b.n	8005e00 <__sfp+0x60>
 8005e22:	bf00      	nop
 8005e24:	08006318 	.word	0x08006318
 8005e28:	ffff0001 	.word	0xffff0001

08005e2c <_fwalk_reent>:
 8005e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e30:	4606      	mov	r6, r0
 8005e32:	4688      	mov	r8, r1
 8005e34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e38:	2700      	movs	r7, #0
 8005e3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e3e:	f1b9 0901 	subs.w	r9, r9, #1
 8005e42:	d505      	bpl.n	8005e50 <_fwalk_reent+0x24>
 8005e44:	6824      	ldr	r4, [r4, #0]
 8005e46:	2c00      	cmp	r4, #0
 8005e48:	d1f7      	bne.n	8005e3a <_fwalk_reent+0xe>
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e50:	89ab      	ldrh	r3, [r5, #12]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d907      	bls.n	8005e66 <_fwalk_reent+0x3a>
 8005e56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	d003      	beq.n	8005e66 <_fwalk_reent+0x3a>
 8005e5e:	4629      	mov	r1, r5
 8005e60:	4630      	mov	r0, r6
 8005e62:	47c0      	blx	r8
 8005e64:	4307      	orrs	r7, r0
 8005e66:	3568      	adds	r5, #104	; 0x68
 8005e68:	e7e9      	b.n	8005e3e <_fwalk_reent+0x12>

08005e6a <__retarget_lock_init_recursive>:
 8005e6a:	4770      	bx	lr

08005e6c <__retarget_lock_acquire_recursive>:
 8005e6c:	4770      	bx	lr

08005e6e <__retarget_lock_release_recursive>:
 8005e6e:	4770      	bx	lr

08005e70 <__swhatbuf_r>:
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	460e      	mov	r6, r1
 8005e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	b096      	sub	sp, #88	; 0x58
 8005e7c:	4614      	mov	r4, r2
 8005e7e:	461d      	mov	r5, r3
 8005e80:	da07      	bge.n	8005e92 <__swhatbuf_r+0x22>
 8005e82:	2300      	movs	r3, #0
 8005e84:	602b      	str	r3, [r5, #0]
 8005e86:	89b3      	ldrh	r3, [r6, #12]
 8005e88:	061a      	lsls	r2, r3, #24
 8005e8a:	d410      	bmi.n	8005eae <__swhatbuf_r+0x3e>
 8005e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e90:	e00e      	b.n	8005eb0 <__swhatbuf_r+0x40>
 8005e92:	466a      	mov	r2, sp
 8005e94:	f000 f954 	bl	8006140 <_fstat_r>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	dbf2      	blt.n	8005e82 <__swhatbuf_r+0x12>
 8005e9c:	9a01      	ldr	r2, [sp, #4]
 8005e9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ea2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ea6:	425a      	negs	r2, r3
 8005ea8:	415a      	adcs	r2, r3
 8005eaa:	602a      	str	r2, [r5, #0]
 8005eac:	e7ee      	b.n	8005e8c <__swhatbuf_r+0x1c>
 8005eae:	2340      	movs	r3, #64	; 0x40
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	6023      	str	r3, [r4, #0]
 8005eb4:	b016      	add	sp, #88	; 0x58
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}

08005eb8 <__smakebuf_r>:
 8005eb8:	898b      	ldrh	r3, [r1, #12]
 8005eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ebc:	079d      	lsls	r5, r3, #30
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	d507      	bpl.n	8005ed4 <__smakebuf_r+0x1c>
 8005ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	6123      	str	r3, [r4, #16]
 8005ecc:	2301      	movs	r3, #1
 8005ece:	6163      	str	r3, [r4, #20]
 8005ed0:	b002      	add	sp, #8
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}
 8005ed4:	ab01      	add	r3, sp, #4
 8005ed6:	466a      	mov	r2, sp
 8005ed8:	f7ff ffca 	bl	8005e70 <__swhatbuf_r>
 8005edc:	9900      	ldr	r1, [sp, #0]
 8005ede:	4605      	mov	r5, r0
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f7ff f88f 	bl	8005004 <_malloc_r>
 8005ee6:	b948      	cbnz	r0, 8005efc <__smakebuf_r+0x44>
 8005ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eec:	059a      	lsls	r2, r3, #22
 8005eee:	d4ef      	bmi.n	8005ed0 <__smakebuf_r+0x18>
 8005ef0:	f023 0303 	bic.w	r3, r3, #3
 8005ef4:	f043 0302 	orr.w	r3, r3, #2
 8005ef8:	81a3      	strh	r3, [r4, #12]
 8005efa:	e7e3      	b.n	8005ec4 <__smakebuf_r+0xc>
 8005efc:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <__smakebuf_r+0x7c>)
 8005efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	6020      	str	r0, [r4, #0]
 8005f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	9b00      	ldr	r3, [sp, #0]
 8005f0c:	6163      	str	r3, [r4, #20]
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	6120      	str	r0, [r4, #16]
 8005f12:	b15b      	cbz	r3, 8005f2c <__smakebuf_r+0x74>
 8005f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f000 f923 	bl	8006164 <_isatty_r>
 8005f1e:	b128      	cbz	r0, 8005f2c <__smakebuf_r+0x74>
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	f023 0303 	bic.w	r3, r3, #3
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	81a3      	strh	r3, [r4, #12]
 8005f2c:	89a0      	ldrh	r0, [r4, #12]
 8005f2e:	4305      	orrs	r5, r0
 8005f30:	81a5      	strh	r5, [r4, #12]
 8005f32:	e7cd      	b.n	8005ed0 <__smakebuf_r+0x18>
 8005f34:	08005cc9 	.word	0x08005cc9

08005f38 <memcpy>:
 8005f38:	440a      	add	r2, r1
 8005f3a:	4291      	cmp	r1, r2
 8005f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f40:	d100      	bne.n	8005f44 <memcpy+0xc>
 8005f42:	4770      	bx	lr
 8005f44:	b510      	push	{r4, lr}
 8005f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f4e:	4291      	cmp	r1, r2
 8005f50:	d1f9      	bne.n	8005f46 <memcpy+0xe>
 8005f52:	bd10      	pop	{r4, pc}

08005f54 <memmove>:
 8005f54:	4288      	cmp	r0, r1
 8005f56:	b510      	push	{r4, lr}
 8005f58:	eb01 0402 	add.w	r4, r1, r2
 8005f5c:	d902      	bls.n	8005f64 <memmove+0x10>
 8005f5e:	4284      	cmp	r4, r0
 8005f60:	4623      	mov	r3, r4
 8005f62:	d807      	bhi.n	8005f74 <memmove+0x20>
 8005f64:	1e43      	subs	r3, r0, #1
 8005f66:	42a1      	cmp	r1, r4
 8005f68:	d008      	beq.n	8005f7c <memmove+0x28>
 8005f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f72:	e7f8      	b.n	8005f66 <memmove+0x12>
 8005f74:	4402      	add	r2, r0
 8005f76:	4601      	mov	r1, r0
 8005f78:	428a      	cmp	r2, r1
 8005f7a:	d100      	bne.n	8005f7e <memmove+0x2a>
 8005f7c:	bd10      	pop	{r4, pc}
 8005f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f86:	e7f7      	b.n	8005f78 <memmove+0x24>

08005f88 <__malloc_lock>:
 8005f88:	4801      	ldr	r0, [pc, #4]	; (8005f90 <__malloc_lock+0x8>)
 8005f8a:	f7ff bf6f 	b.w	8005e6c <__retarget_lock_acquire_recursive>
 8005f8e:	bf00      	nop
 8005f90:	2000038c 	.word	0x2000038c

08005f94 <__malloc_unlock>:
 8005f94:	4801      	ldr	r0, [pc, #4]	; (8005f9c <__malloc_unlock+0x8>)
 8005f96:	f7ff bf6a 	b.w	8005e6e <__retarget_lock_release_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	2000038c 	.word	0x2000038c

08005fa0 <_realloc_r>:
 8005fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa2:	4607      	mov	r7, r0
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	460e      	mov	r6, r1
 8005fa8:	b921      	cbnz	r1, 8005fb4 <_realloc_r+0x14>
 8005faa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005fae:	4611      	mov	r1, r2
 8005fb0:	f7ff b828 	b.w	8005004 <_malloc_r>
 8005fb4:	b922      	cbnz	r2, 8005fc0 <_realloc_r+0x20>
 8005fb6:	f7fe ffd5 	bl	8004f64 <_free_r>
 8005fba:	4625      	mov	r5, r4
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc0:	f000 f8f2 	bl	80061a8 <_malloc_usable_size_r>
 8005fc4:	42a0      	cmp	r0, r4
 8005fc6:	d20f      	bcs.n	8005fe8 <_realloc_r+0x48>
 8005fc8:	4621      	mov	r1, r4
 8005fca:	4638      	mov	r0, r7
 8005fcc:	f7ff f81a 	bl	8005004 <_malloc_r>
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d0f2      	beq.n	8005fbc <_realloc_r+0x1c>
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	4622      	mov	r2, r4
 8005fda:	f7ff ffad 	bl	8005f38 <memcpy>
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f7fe ffbf 	bl	8004f64 <_free_r>
 8005fe6:	e7e9      	b.n	8005fbc <_realloc_r+0x1c>
 8005fe8:	4635      	mov	r5, r6
 8005fea:	e7e7      	b.n	8005fbc <_realloc_r+0x1c>

08005fec <_raise_r>:
 8005fec:	291f      	cmp	r1, #31
 8005fee:	b538      	push	{r3, r4, r5, lr}
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	d904      	bls.n	8006000 <_raise_r+0x14>
 8005ff6:	2316      	movs	r3, #22
 8005ff8:	6003      	str	r3, [r0, #0]
 8005ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006002:	b112      	cbz	r2, 800600a <_raise_r+0x1e>
 8006004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006008:	b94b      	cbnz	r3, 800601e <_raise_r+0x32>
 800600a:	4620      	mov	r0, r4
 800600c:	f000 f830 	bl	8006070 <_getpid_r>
 8006010:	462a      	mov	r2, r5
 8006012:	4601      	mov	r1, r0
 8006014:	4620      	mov	r0, r4
 8006016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800601a:	f000 b817 	b.w	800604c <_kill_r>
 800601e:	2b01      	cmp	r3, #1
 8006020:	d00a      	beq.n	8006038 <_raise_r+0x4c>
 8006022:	1c59      	adds	r1, r3, #1
 8006024:	d103      	bne.n	800602e <_raise_r+0x42>
 8006026:	2316      	movs	r3, #22
 8006028:	6003      	str	r3, [r0, #0]
 800602a:	2001      	movs	r0, #1
 800602c:	e7e7      	b.n	8005ffe <_raise_r+0x12>
 800602e:	2400      	movs	r4, #0
 8006030:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006034:	4628      	mov	r0, r5
 8006036:	4798      	blx	r3
 8006038:	2000      	movs	r0, #0
 800603a:	e7e0      	b.n	8005ffe <_raise_r+0x12>

0800603c <raise>:
 800603c:	4b02      	ldr	r3, [pc, #8]	; (8006048 <raise+0xc>)
 800603e:	4601      	mov	r1, r0
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	f7ff bfd3 	b.w	8005fec <_raise_r>
 8006046:	bf00      	nop
 8006048:	2000000c 	.word	0x2000000c

0800604c <_kill_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d07      	ldr	r5, [pc, #28]	; (800606c <_kill_r+0x20>)
 8006050:	2300      	movs	r3, #0
 8006052:	4604      	mov	r4, r0
 8006054:	4608      	mov	r0, r1
 8006056:	4611      	mov	r1, r2
 8006058:	602b      	str	r3, [r5, #0]
 800605a:	f7fb f989 	bl	8001370 <_kill>
 800605e:	1c43      	adds	r3, r0, #1
 8006060:	d102      	bne.n	8006068 <_kill_r+0x1c>
 8006062:	682b      	ldr	r3, [r5, #0]
 8006064:	b103      	cbz	r3, 8006068 <_kill_r+0x1c>
 8006066:	6023      	str	r3, [r4, #0]
 8006068:	bd38      	pop	{r3, r4, r5, pc}
 800606a:	bf00      	nop
 800606c:	20000394 	.word	0x20000394

08006070 <_getpid_r>:
 8006070:	f7fb b976 	b.w	8001360 <_getpid>

08006074 <__sread>:
 8006074:	b510      	push	{r4, lr}
 8006076:	460c      	mov	r4, r1
 8006078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800607c:	f000 f89c 	bl	80061b8 <_read_r>
 8006080:	2800      	cmp	r0, #0
 8006082:	bfab      	itete	ge
 8006084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006086:	89a3      	ldrhlt	r3, [r4, #12]
 8006088:	181b      	addge	r3, r3, r0
 800608a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800608e:	bfac      	ite	ge
 8006090:	6563      	strge	r3, [r4, #84]	; 0x54
 8006092:	81a3      	strhlt	r3, [r4, #12]
 8006094:	bd10      	pop	{r4, pc}

08006096 <__swrite>:
 8006096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609a:	461f      	mov	r7, r3
 800609c:	898b      	ldrh	r3, [r1, #12]
 800609e:	05db      	lsls	r3, r3, #23
 80060a0:	4605      	mov	r5, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	4616      	mov	r6, r2
 80060a6:	d505      	bpl.n	80060b4 <__swrite+0x1e>
 80060a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ac:	2302      	movs	r3, #2
 80060ae:	2200      	movs	r2, #0
 80060b0:	f000 f868 	bl	8006184 <_lseek_r>
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060be:	81a3      	strh	r3, [r4, #12]
 80060c0:	4632      	mov	r2, r6
 80060c2:	463b      	mov	r3, r7
 80060c4:	4628      	mov	r0, r5
 80060c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ca:	f000 b817 	b.w	80060fc <_write_r>

080060ce <__sseek>:
 80060ce:	b510      	push	{r4, lr}
 80060d0:	460c      	mov	r4, r1
 80060d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d6:	f000 f855 	bl	8006184 <_lseek_r>
 80060da:	1c43      	adds	r3, r0, #1
 80060dc:	89a3      	ldrh	r3, [r4, #12]
 80060de:	bf15      	itete	ne
 80060e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80060e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060ea:	81a3      	strheq	r3, [r4, #12]
 80060ec:	bf18      	it	ne
 80060ee:	81a3      	strhne	r3, [r4, #12]
 80060f0:	bd10      	pop	{r4, pc}

080060f2 <__sclose>:
 80060f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f6:	f000 b813 	b.w	8006120 <_close_r>
	...

080060fc <_write_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4d07      	ldr	r5, [pc, #28]	; (800611c <_write_r+0x20>)
 8006100:	4604      	mov	r4, r0
 8006102:	4608      	mov	r0, r1
 8006104:	4611      	mov	r1, r2
 8006106:	2200      	movs	r2, #0
 8006108:	602a      	str	r2, [r5, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	f7fb f967 	bl	80013de <_write>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d102      	bne.n	800611a <_write_r+0x1e>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	b103      	cbz	r3, 800611a <_write_r+0x1e>
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	20000394 	.word	0x20000394

08006120 <_close_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4d06      	ldr	r5, [pc, #24]	; (800613c <_close_r+0x1c>)
 8006124:	2300      	movs	r3, #0
 8006126:	4604      	mov	r4, r0
 8006128:	4608      	mov	r0, r1
 800612a:	602b      	str	r3, [r5, #0]
 800612c:	f7fb f973 	bl	8001416 <_close>
 8006130:	1c43      	adds	r3, r0, #1
 8006132:	d102      	bne.n	800613a <_close_r+0x1a>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	b103      	cbz	r3, 800613a <_close_r+0x1a>
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	bd38      	pop	{r3, r4, r5, pc}
 800613c:	20000394 	.word	0x20000394

08006140 <_fstat_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	4d07      	ldr	r5, [pc, #28]	; (8006160 <_fstat_r+0x20>)
 8006144:	2300      	movs	r3, #0
 8006146:	4604      	mov	r4, r0
 8006148:	4608      	mov	r0, r1
 800614a:	4611      	mov	r1, r2
 800614c:	602b      	str	r3, [r5, #0]
 800614e:	f7fb f96e 	bl	800142e <_fstat>
 8006152:	1c43      	adds	r3, r0, #1
 8006154:	d102      	bne.n	800615c <_fstat_r+0x1c>
 8006156:	682b      	ldr	r3, [r5, #0]
 8006158:	b103      	cbz	r3, 800615c <_fstat_r+0x1c>
 800615a:	6023      	str	r3, [r4, #0]
 800615c:	bd38      	pop	{r3, r4, r5, pc}
 800615e:	bf00      	nop
 8006160:	20000394 	.word	0x20000394

08006164 <_isatty_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	4d06      	ldr	r5, [pc, #24]	; (8006180 <_isatty_r+0x1c>)
 8006168:	2300      	movs	r3, #0
 800616a:	4604      	mov	r4, r0
 800616c:	4608      	mov	r0, r1
 800616e:	602b      	str	r3, [r5, #0]
 8006170:	f7fb f96d 	bl	800144e <_isatty>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d102      	bne.n	800617e <_isatty_r+0x1a>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	b103      	cbz	r3, 800617e <_isatty_r+0x1a>
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	bd38      	pop	{r3, r4, r5, pc}
 8006180:	20000394 	.word	0x20000394

08006184 <_lseek_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4d07      	ldr	r5, [pc, #28]	; (80061a4 <_lseek_r+0x20>)
 8006188:	4604      	mov	r4, r0
 800618a:	4608      	mov	r0, r1
 800618c:	4611      	mov	r1, r2
 800618e:	2200      	movs	r2, #0
 8006190:	602a      	str	r2, [r5, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	f7fb f966 	bl	8001464 <_lseek>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_lseek_r+0x1e>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_lseek_r+0x1e>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	20000394 	.word	0x20000394

080061a8 <_malloc_usable_size_r>:
 80061a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ac:	1f18      	subs	r0, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bfbc      	itt	lt
 80061b2:	580b      	ldrlt	r3, [r1, r0]
 80061b4:	18c0      	addlt	r0, r0, r3
 80061b6:	4770      	bx	lr

080061b8 <_read_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4d07      	ldr	r5, [pc, #28]	; (80061d8 <_read_r+0x20>)
 80061bc:	4604      	mov	r4, r0
 80061be:	4608      	mov	r0, r1
 80061c0:	4611      	mov	r1, r2
 80061c2:	2200      	movs	r2, #0
 80061c4:	602a      	str	r2, [r5, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	f7fb f8ec 	bl	80013a4 <_read>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_read_r+0x1e>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_read_r+0x1e>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	20000394 	.word	0x20000394

080061dc <_init>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	bf00      	nop
 80061e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e2:	bc08      	pop	{r3}
 80061e4:	469e      	mov	lr, r3
 80061e6:	4770      	bx	lr

080061e8 <_fini>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	bf00      	nop
 80061ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ee:	bc08      	pop	{r3}
 80061f0:	469e      	mov	lr, r3
 80061f2:	4770      	bx	lr
