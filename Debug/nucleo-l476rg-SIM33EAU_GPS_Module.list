
nucleo-l476rg-SIM33EAU_GPS_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006080  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006554  08006554  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800655c  0800655c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006560  08006560  00016560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  080065d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080065d4  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001041f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002181  00000000  00000000  000304bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00032640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  000330e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027109  00000000  00000000  00033ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ceb0  00000000  00000000  0005abc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb762  00000000  00000000  00067a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001531d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003654  00000000  00000000  00153228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061f8 	.word	0x080061f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080061f8 	.word	0x080061f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PTD */

uint8_t flag = 0;

// this interrupts changes flag to 1 as soon as the uint8_t buff[300] is full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

	flag = 1;
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_UART_RxCpltCallback+0x1c>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]

}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000008c 	.word	0x2000008c

08000598 <nmea0183_checksum>:

// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	int checksum = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]

	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++) {
 80005a8:	2301      	movs	r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	e00a      	b.n	80005c4 <nmea0183_checksum+0x2c>
		checksum = checksum ^ (unsigned) msg[j];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4053      	eors	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++) {
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff fe03 	bl	80001d0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	1f1a      	subs	r2, r3, #4
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d8ec      	bhi.n	80005ae <nmea0183_checksum+0x16>
	}

	return checksum;
 80005d4:	68fb      	ldr	r3, [r7, #12]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <print>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(char *message) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 200);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fdf1 	bl	80001d0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	23c8      	movs	r3, #200	; 0xc8
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <print+0x24>)
 80005f8:	f003 f906 	bl	8003808 <HAL_UART_Transmit>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000168 	.word	0x20000168

08000608 <println>:

void println(char *message) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 200);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff fddd 	bl	80001d0 <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	23c8      	movs	r3, #200	; 0xc8
 800061c:	6879      	ldr	r1, [r7, #4]
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <println+0x30>)
 8000620:	f003 f8f2 	bl	8003808 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, 200);
 8000624:	23c8      	movs	r3, #200	; 0xc8
 8000626:	2202      	movs	r2, #2
 8000628:	4904      	ldr	r1, [pc, #16]	; (800063c <println+0x34>)
 800062a:	4803      	ldr	r0, [pc, #12]	; (8000638 <println+0x30>)
 800062c:	f003 f8ec 	bl	8003808 <HAL_UART_Transmit>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000168 	.word	0x20000168
 800063c:	08006210 	.word	0x08006210

08000640 <newline>:

void newline() {
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, 200);
 8000644:	23c8      	movs	r3, #200	; 0xc8
 8000646:	2202      	movs	r2, #2
 8000648:	4902      	ldr	r1, [pc, #8]	; (8000654 <newline+0x14>)
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <newline+0x18>)
 800064c:	f003 f8dc 	bl	8003808 <HAL_UART_Transmit>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08006210 	.word	0x08006210
 8000658:	20000168 	.word	0x20000168

0800065c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800065c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065e:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 8000662:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000664:	f000 ff8c 	bl	8001580 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000668:	f000 fc12 	bl	8000e90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800066c:	f000 fce0 	bl	8001030 <MX_GPIO_Init>
	MX_DMA_Init();
 8000670:	f000 fcc0 	bl	8000ff4 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8000674:	f000 fc5e 	bl	8000f34 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000678:	f000 fc8c 	bl	8000f94 <MX_USART2_UART_Init>
	char *ground_speed_raw;
	char ground_speed_buff[7];

	char altitude[4];

	uint8_t cnt = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f

	HAL_UART_Receive_DMA(&huart1, buff, 255);
 8000682:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8000686:	22ff      	movs	r2, #255	; 0xff
 8000688:	4619      	mov	r1, r3
 800068a:	48bd      	ldr	r0, [pc, #756]	; (8000980 <main+0x324>)
 800068c:	f003 f950 	bl	8003930 <HAL_UART_Receive_DMA>

	//char command[100] = "$PMTK314,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n"; // GNGLL sentence only. Sentence length: 50;
	//char command[100] = "$PMTK314,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n"; // GNGGA sentence only. Sentence length: 72;
	//char command[100] = "$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n"; // GNVTG sentence only. Sentence length: 33;
	//char command[100] = "$PMTK314,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0*29\r\n"; //all sentences
	char command[100] = "$PMTK314,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0*28\r\n"; //GLL, VTG, and GGA sentences only
 8000690:	f507 7688 	add.w	r6, r7, #272	; 0x110
 8000694:	4bbb      	ldr	r3, [pc, #748]	; (8000984 <main+0x328>)
 8000696:	4634      	mov	r4, r6
 8000698:	461d      	mov	r5, r3
 800069a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a6:	682b      	ldr	r3, [r5, #0]
 80006a8:	6023      	str	r3, [r4, #0]
 80006aa:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fb68 	bl	8004d88 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t*) command, strlen(command), 200);//this command is sent to the gps.
 80006b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd87 	bl	80001d0 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80006ca:	23c8      	movs	r3, #200	; 0xc8
 80006cc:	48ac      	ldr	r0, [pc, #688]	; (8000980 <main+0x324>)
 80006ce:	f003 f89b 	bl	8003808 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		newline();
 80006d2:	f7ff ffb5 	bl	8000640 <newline>
		print("while loop");
 80006d6:	48ac      	ldr	r0, [pc, #688]	; (8000988 <main+0x32c>)
 80006d8:	f7ff ff82 	bl	80005e0 <print>
		if (flag == 1) { // interrupt signals that the buffer buff[300] is full
 80006dc:	4bab      	ldr	r3, [pc, #684]	; (800098c <main+0x330>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	f040 83be 	bne.w	8000e62 <main+0x806>
			println("flag == 1");
 80006e6:	48aa      	ldr	r0, [pc, #680]	; (8000990 <main+0x334>)
 80006e8:	f7ff ff8e 	bl	8000608 <println>
			  or \r Carriage return
			  or \n Line feed, end delimiter

			 */

			memset(buffStr, 0, 255);
 80006ec:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80006f0:	22ff      	movs	r2, #255	; 0xff
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 fb47 	bl	8004d88 <memset>

			sprintf(buffStr, "%s", buff);
 80006fa:	f507 7251 	add.w	r2, r7, #836	; 0x344
 80006fe:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8000702:	49a4      	ldr	r1, [pc, #656]	; (8000994 <main+0x338>)
 8000704:	4618      	mov	r0, r3
 8000706:	f004 fb47 	bl	8004d98 <siprintf>

			// if we want to display the incoming raw data
			println("RAW DATA");
 800070a:	48a3      	ldr	r0, [pc, #652]	; (8000998 <main+0x33c>)
 800070c:	f7ff ff7c 	bl	8000608 <println>
			HAL_UART_Transmit(&huart2, buff, 255, 70);
 8000710:	f507 7151 	add.w	r1, r7, #836	; 0x344
 8000714:	2346      	movs	r3, #70	; 0x46
 8000716:	22ff      	movs	r2, #255	; 0xff
 8000718:	48a0      	ldr	r0, [pc, #640]	; (800099c <main+0x340>)
 800071a:	f003 f875 	bl	8003808 <HAL_UART_Transmit>
			//EITHER USE STRDUP, FREE AT THE END
			//string = strdup(buffStr);

			//OR USE STRCPY, NO FREEING AT THE END
			char buffStr_copy[255];
			strcpy(buffStr_copy, buffStr);
 800071e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8000722:	463b      	mov	r3, r7
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fb72 	bl	8004e10 <strcpy>
			string = buffStr_copy;
 800072c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000730:	463a      	mov	r2, r7
 8000732:	601a      	str	r2, [r3, #0]

			newline();
 8000734:	f7ff ff84 	bl	8000640 <newline>
			newline();
 8000738:	f7ff ff82 	bl	8000640 <newline>
			newline();
 800073c:	f7ff ff80 	bl	8000640 <newline>
			newline();
 8000740:	f7ff ff7e 	bl	8000640 <newline>
			println("********");
 8000744:	4896      	ldr	r0, [pc, #600]	; (80009a0 <main+0x344>)
 8000746:	f7ff ff5f 	bl	8000608 <println>
			println("********");
 800074a:	4895      	ldr	r0, [pc, #596]	; (80009a0 <main+0x344>)
 800074c:	f7ff ff5c 	bl	8000608 <println>
			println("********");
 8000750:	4893      	ldr	r0, [pc, #588]	; (80009a0 <main+0x344>)
 8000752:	f7ff ff59 	bl	8000608 <println>
			println("********");
 8000756:	4892      	ldr	r0, [pc, #584]	; (80009a0 <main+0x344>)
 8000758:	f7ff ff56 	bl	8000608 <println>
			println("********BUFF START:");
 800075c:	4891      	ldr	r0, [pc, #580]	; (80009a4 <main+0x348>)
 800075e:	f7ff ff53 	bl	8000608 <println>
			println(buffStr);
 8000762:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff4e 	bl	8000608 <println>
			println("********BUFF END");
 800076c:	488e      	ldr	r0, [pc, #568]	; (80009a8 <main+0x34c>)
 800076e:	f7ff ff4b 	bl	8000608 <println>
			println("********");
 8000772:	488b      	ldr	r0, [pc, #556]	; (80009a0 <main+0x344>)
 8000774:	f7ff ff48 	bl	8000608 <println>
			println("********");
 8000778:	4889      	ldr	r0, [pc, #548]	; (80009a0 <main+0x344>)
 800077a:	f7ff ff45 	bl	8000608 <println>
			println("********");
 800077e:	4888      	ldr	r0, [pc, #544]	; (80009a0 <main+0x344>)
 8000780:	f7ff ff42 	bl	8000608 <println>
			println("********");
 8000784:	4886      	ldr	r0, [pc, #536]	; (80009a0 <main+0x344>)
 8000786:	f7ff ff3f 	bl	8000608 <println>
			newline();
 800078a:	f7ff ff59 	bl	8000640 <newline>
			newline();
 800078e:	f7ff ff57 	bl	8000640 <newline>
			newline();
 8000792:	f7ff ff55 	bl	8000640 <newline>
			newline();
 8000796:	f7ff ff53 	bl	8000640 <newline>

			// actually splitting the string by "\n" delimiter
			println("BEFORE newline splitting");
 800079a:	4884      	ldr	r0, [pc, #528]	; (80009ac <main+0x350>)
 800079c:	f7ff ff34 	bl	8000608 <println>
			newline();
 80007a0:	f7ff ff4e 	bl	8000640 <newline>
			newline();
 80007a4:	f7ff ff4c 	bl	8000640 <newline>
			newline();
 80007a8:	f7ff ff4a 	bl	8000640 <newline>
			newline();
 80007ac:	f7ff ff48 	bl	8000640 <newline>
			println("********");
 80007b0:	487b      	ldr	r0, [pc, #492]	; (80009a0 <main+0x344>)
 80007b2:	f7ff ff29 	bl	8000608 <println>
			println("********");
 80007b6:	487a      	ldr	r0, [pc, #488]	; (80009a0 <main+0x344>)
 80007b8:	f7ff ff26 	bl	8000608 <println>
			println("********");
 80007bc:	4878      	ldr	r0, [pc, #480]	; (80009a0 <main+0x344>)
 80007be:	f7ff ff23 	bl	8000608 <println>
			println("********");
 80007c2:	4877      	ldr	r0, [pc, #476]	; (80009a0 <main+0x344>)
 80007c4:	f7ff ff20 	bl	8000608 <println>
			println("********STRING START:");
 80007c8:	4879      	ldr	r0, [pc, #484]	; (80009b0 <main+0x354>)
 80007ca:	f7ff ff1d 	bl	8000608 <println>
			println(string);
 80007ce:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff17 	bl	8000608 <println>
			println("********STRING END");
 80007da:	4876      	ldr	r0, [pc, #472]	; (80009b4 <main+0x358>)
 80007dc:	f7ff ff14 	bl	8000608 <println>
			println("********");
 80007e0:	486f      	ldr	r0, [pc, #444]	; (80009a0 <main+0x344>)
 80007e2:	f7ff ff11 	bl	8000608 <println>
			println("********");
 80007e6:	486e      	ldr	r0, [pc, #440]	; (80009a0 <main+0x344>)
 80007e8:	f7ff ff0e 	bl	8000608 <println>
			println("********");
 80007ec:	486c      	ldr	r0, [pc, #432]	; (80009a0 <main+0x344>)
 80007ee:	f7ff ff0b 	bl	8000608 <println>
			println("********");
 80007f2:	486b      	ldr	r0, [pc, #428]	; (80009a0 <main+0x344>)
 80007f4:	f7ff ff08 	bl	8000608 <println>
			newline();
 80007f8:	f7ff ff22 	bl	8000640 <newline>
			newline();
 80007fc:	f7ff ff20 	bl	8000640 <newline>
			newline();
 8000800:	f7ff ff1e 	bl	8000640 <newline>
			newline();
 8000804:	f7ff ff1c 	bl	8000640 <newline>
			while ((token = strsep(&string, "\n")) != NULL) {
 8000808:	e31b      	b.n	8000e42 <main+0x7e6>
				println("AFTER newline splitting");
 800080a:	486b      	ldr	r0, [pc, #428]	; (80009b8 <main+0x35c>)
 800080c:	f7ff fefc 	bl	8000608 <println>

				memset(nmeaSnt, 0, 80);
 8000810:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000814:	2250      	movs	r2, #80	; 0x50
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f004 fab5 	bl	8004d88 <memset>

				sprintf(nmeaSnt, "%s", token);
 800081e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000822:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8000826:	495b      	ldr	r1, [pc, #364]	; (8000994 <main+0x338>)
 8000828:	4618      	mov	r0, r3
 800082a:	f004 fab5 	bl	8004d98 <siprintf>

				// selecting only $GNGLL sentences, combined GPS and GLONASS
				// on my GPS sensor this good NMEA sentence is always 50 characters
				//println("BEFORE gll good");
				if ((strstr(nmeaSnt, "$GNGLL") != 0) && strlen(nmeaSnt) >= 49 && strstr(nmeaSnt, "*") != 0) {
 800082e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000832:	4962      	ldr	r1, [pc, #392]	; (80009bc <main+0x360>)
 8000834:	4618      	mov	r0, r3
 8000836:	f004 faf8 	bl	8004e2a <strstr>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	f000 81bb 	beq.w	8000bb8 <main+0x55c>
 8000842:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fcc2 	bl	80001d0 <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	2b30      	cmp	r3, #48	; 0x30
 8000850:	f240 81b2 	bls.w	8000bb8 <main+0x55c>
 8000854:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000858:	212a      	movs	r1, #42	; 0x2a
 800085a:	4618      	mov	r0, r3
 800085c:	f004 facb 	bl	8004df6 <strchr>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	f000 81a8 	beq.w	8000bb8 <main+0x55c>
					//println("AFTER gll good");

					rawSum = strstr(nmeaSnt, "*");
 8000868:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800086c:	212a      	movs	r1, #42	; 0x2a
 800086e:	4618      	mov	r0, r3
 8000870:	f004 fac1 	bl	8004df6 <strchr>
 8000874:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448

					memcpy(smNmbr, &rawSum[1], 2);
 8000878:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800087c:	3301      	adds	r3, #1
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b29a      	uxth	r2, r3
 8000882:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8000886:	801a      	strh	r2, [r3, #0]

					smNmbr[2] = '\0';
 8000888:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800088c:	2200      	movs	r2, #0
 800088e:	709a      	strb	r2, [r3, #2]

					uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8000890:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe7f 	bl	8000598 <nmea0183_checksum>
 800089a:	4603      	mov	r3, r0
 800089c:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447

					char hex[2];

					// "%X" unsigned hexadecimal integer (capital letters)
					sprintf(hex, "%X", intSum);
 80008a0:	f897 2447 	ldrb.w	r2, [r7, #1095]	; 0x447
 80008a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80008a8:	4945      	ldr	r1, [pc, #276]	; (80009c0 <main+0x364>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fa74 	bl	8004d98 <siprintf>

					// checksum data verification, if OK, then we can really trust
					// the data in the the NMEA sentence
					//println("BEFORE gll checksum");
					if (strstr(smNmbr, hex) != NULL) {
 80008b0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80008b4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80008b8:	4611      	mov	r1, r2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 fab5 	bl	8004e2a <strstr>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f000 8178 	beq.w	8000bb8 <main+0x55c>
						//println("AFTER gll checksum");

						//if we want display good $GNGLL NMEA sentences
						HAL_UART_Transmit(&huart2, (uint8_t*)nmeaSnt, 50, 70);
 80008c8:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 80008cc:	2346      	movs	r3, #70	; 0x46
 80008ce:	2232      	movs	r2, #50	; 0x32
 80008d0:	4832      	ldr	r0, [pc, #200]	; (800099c <main+0x340>)
 80008d2:	f002 ff99 	bl	8003808 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, 200);
 80008d6:	23c8      	movs	r3, #200	; 0xc8
 80008d8:	2202      	movs	r2, #2
 80008da:	493a      	ldr	r1, [pc, #232]	; (80009c4 <main+0x368>)
 80008dc:	482f      	ldr	r0, [pc, #188]	; (800099c <main+0x340>)
 80008de:	f002 ff93 	bl	8003808 <HAL_UART_Transmit>

						cnt = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f

						// splitting the good NMEA sentence into the tokens by the comma delimiter
						//println("BEFORE gll splitting");
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 80008e8:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80008ec:	4936      	ldr	r1, [pc, #216]	; (80009c8 <main+0x36c>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 fab2 	bl	8004e58 <strtok>
 80008f4:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
 80008f8:	e07f      	b.n	80009fa <main+0x39e>
							//println("AFTER gll splitting");

							switch (cnt) {
 80008fa:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80008fe:	3b01      	subs	r3, #1
 8000900:	2b04      	cmp	r3, #4
 8000902:	d86f      	bhi.n	80009e4 <main+0x388>
 8000904:	a201      	add	r2, pc, #4	; (adr r2, 800090c <main+0x2b0>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000921 	.word	0x08000921
 8000910:	08000939 	.word	0x08000939
 8000914:	08000951 	.word	0x08000951
 8000918:	08000969 	.word	0x08000969
 800091c:	080009cd 	.word	0x080009cd
							case 1:
								//latRaw = strdup(pV);
								strcpy(latRawbuff, pV);
 8000920:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8000924:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8000928:	4618      	mov	r0, r3
 800092a:	f004 fa71 	bl	8004e10 <strcpy>
								latRaw = latRawbuff;
 800092e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8000932:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
								break;
 8000936:	e055      	b.n	80009e4 <main+0x388>
							case 2:
								//hemNS = strdup(pV);
								strcpy(hemNSbuff, pV);
 8000938:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800093c:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8000940:	4618      	mov	r0, r3
 8000942:	f004 fa65 	bl	8004e10 <strcpy>
								hemNS = hemNSbuff;
 8000946:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800094a:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
								break;
 800094e:	e049      	b.n	80009e4 <main+0x388>
							case 3:
								//lonRaw = strdup(pV);
								strcpy(lonRawbuff, pV);
 8000950:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8000954:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8000958:	4618      	mov	r0, r3
 800095a:	f004 fa59 	bl	8004e10 <strcpy>
								lonRaw = lonRawbuff;
 800095e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8000962:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
								break;
 8000966:	e03d      	b.n	80009e4 <main+0x388>
							case 4:
								//hemEW = strdup(pV);
								strcpy(hemEWbuff, pV);
 8000968:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800096c:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8000970:	4618      	mov	r0, r3
 8000972:	f004 fa4d 	bl	8004e10 <strcpy>
								hemEW = hemEWbuff;
 8000976:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800097a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
								break;
 800097e:	e031      	b.n	80009e4 <main+0x388>
 8000980:	200000e4 	.word	0x200000e4
 8000984:	0800635c 	.word	0x0800635c
 8000988:	08006214 	.word	0x08006214
 800098c:	2000008c 	.word	0x2000008c
 8000990:	08006220 	.word	0x08006220
 8000994:	0800622c 	.word	0x0800622c
 8000998:	08006230 	.word	0x08006230
 800099c:	20000168 	.word	0x20000168
 80009a0:	0800623c 	.word	0x0800623c
 80009a4:	08006248 	.word	0x08006248
 80009a8:	0800625c 	.word	0x0800625c
 80009ac:	08006270 	.word	0x08006270
 80009b0:	0800628c 	.word	0x0800628c
 80009b4:	080062a4 	.word	0x080062a4
 80009b8:	080062b8 	.word	0x080062b8
 80009bc:	080062d0 	.word	0x080062d0
 80009c0:	080062d8 	.word	0x080062d8
 80009c4:	08006210 	.word	0x08006210
 80009c8:	080062dc 	.word	0x080062dc
							case 5:
								//utcRaw = strdup(pV);
								strcpy(utcRawbuff, pV);
 80009cc:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80009d0:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 80009d4:	4618      	mov	r0, r3
 80009d6:	f004 fa1b 	bl	8004e10 <strcpy>
								utcRaw = utcRawbuff;
 80009da:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80009de:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
								break;
 80009e2:	bf00      	nop
							}

							cnt++;
 80009e4:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80009e8:	3301      	adds	r3, #1
 80009ea:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 80009ee:	49a5      	ldr	r1, [pc, #660]	; (8000c84 <main+0x628>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f004 fa31 	bl	8004e58 <strtok>
 80009f6:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
 80009fa:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f47f af7b 	bne.w	80008fa <main+0x29e>
 8000a04:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	b29a      	uxth	r2, r3

						}  // end for()

						memcpy(latDg, &latRaw[0], 2);
 8000a0c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8000a10:	801a      	strh	r2, [r3, #0]
						latDg[2] = '\0';
 8000a12:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8000a16:	2200      	movs	r2, #0
 8000a18:	709a      	strb	r2, [r3, #2]

						memcpy(latMS, &latRaw[2], 7);
 8000a1a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8000a1e:	1c9a      	adds	r2, r3, #2
 8000a20:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000a24:	6810      	ldr	r0, [r2, #0]
 8000a26:	6018      	str	r0, [r3, #0]
 8000a28:	8891      	ldrh	r1, [r2, #4]
 8000a2a:	7992      	ldrb	r2, [r2, #6]
 8000a2c:	8099      	strh	r1, [r3, #4]
 8000a2e:	719a      	strb	r2, [r3, #6]
						latMS[7] = '\0';
 8000a30:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000a34:	2200      	movs	r2, #0
 8000a36:	71da      	strb	r2, [r3, #7]

						memcpy(lonDg, &lonRaw[0], 3);
 8000a38:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8000a3c:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8000a40:	8811      	ldrh	r1, [r2, #0]
 8000a42:	7892      	ldrb	r2, [r2, #2]
 8000a44:	8019      	strh	r1, [r3, #0]
 8000a46:	709a      	strb	r2, [r3, #2]
						lonDg[3] = '\0';
 8000a48:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	70da      	strb	r2, [r3, #3]

						memcpy(lonMS, &lonRaw[3], 7);
 8000a50:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8000a54:	1cda      	adds	r2, r3, #3
 8000a56:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8000a5a:	6810      	ldr	r0, [r2, #0]
 8000a5c:	6018      	str	r0, [r3, #0]
 8000a5e:	8891      	ldrh	r1, [r2, #4]
 8000a60:	7992      	ldrb	r2, [r2, #6]
 8000a62:	8099      	strh	r1, [r3, #4]
 8000a64:	719a      	strb	r2, [r3, #6]
						lonMS[7] = '\0';
 8000a66:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	71da      	strb	r2, [r3, #7]
						//char strLonMS[7];
						sprintf(strLonMS, "%s", lonMS);
 8000a6e:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8000a72:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000a76:	4984      	ldr	r1, [pc, #528]	; (8000c88 <main+0x62c>)
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 f98d 	bl	8004d98 <siprintf>
//						print("*****INSIDE LONMS: ");
//						println(lonMS);
//						newline();
//						print("*****INSIDE STRLONMS: ");
//						println(strLonMS);
						newline();
 8000a7e:	f7ff fddf 	bl	8000640 <newline>
 8000a82:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	b29a      	uxth	r2, r3

						//converting the UTC time in the hh:mm:ss format
						memcpy(hH, &utcRaw[0], 2);
 8000a8a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000a8e:	801a      	strh	r2, [r3, #0]
						hH[2] = '\0';
 8000a90:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000a94:	2200      	movs	r2, #0
 8000a96:	709a      	strb	r2, [r3, #2]

						memcpy(mM, &utcRaw[2], 2);
 8000a98:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000aa6:	801a      	strh	r2, [r3, #0]
						mM[2] = '\0';
 8000aa8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000aac:	2200      	movs	r2, #0
 8000aae:	709a      	strb	r2, [r3, #2]

						memcpy(sS, &utcRaw[4], 2);
 8000ab0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000abe:	801a      	strh	r2, [r3, #0]
						sS[2] = '\0';
 8000ac0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	709a      	strb	r2, [r3, #2]

						strcpy(strUTC, hH);
 8000ac8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000acc:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 f99c 	bl	8004e10 <strcpy>
						strcat(strUTC, ":");
 8000ad8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb77 	bl	80001d0 <strlen>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000aea:	4413      	add	r3, r2
 8000aec:	4967      	ldr	r1, [pc, #412]	; (8000c8c <main+0x630>)
 8000aee:	461a      	mov	r2, r3
 8000af0:	460b      	mov	r3, r1
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	8013      	strh	r3, [r2, #0]
						strcat(strUTC, mM);
 8000af6:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8000afa:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 f969 	bl	8004dd8 <strcat>
						strcat(strUTC, ":");
 8000b06:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fb60 	bl	80001d0 <strlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000b18:	4413      	add	r3, r2
 8000b1a:	495c      	ldr	r1, [pc, #368]	; (8000c8c <main+0x630>)
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	460b      	mov	r3, r1
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	8013      	strh	r3, [r2, #0]
						strcat(strUTC, sS);
 8000b24:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000b28:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f004 f952 	bl	8004dd8 <strcat>
						strUTC[8] = '\0';
 8000b34:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000b38:	2200      	movs	r2, #0
 8000b3a:	721a      	strb	r2, [r3, #8]
						// HAL_UART_Transmit(&huart2, (uint8_t*) strUTC, 8, 200);
						// HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 200);
						// HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 200);

						//Coordinates/Timestamp:
						newline();
 8000b3c:	f7ff fd80 	bl	8000640 <newline>
						newline();
 8000b40:	f7ff fd7e 	bl	8000640 <newline>
						print("Coordinates/Timestamp:");
 8000b44:	4852      	ldr	r0, [pc, #328]	; (8000c90 <main+0x634>)
 8000b46:	f7ff fd4b 	bl	80005e0 <print>
						newline();
 8000b4a:	f7ff fd79 	bl	8000640 <newline>

						print(hemNS);
 8000b4e:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8000b52:	f7ff fd45 	bl	80005e0 <print>
						print(" ");
 8000b56:	484f      	ldr	r0, [pc, #316]	; (8000c94 <main+0x638>)
 8000b58:	f7ff fd42 	bl	80005e0 <print>
						print(latDg);
 8000b5c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fd3d 	bl	80005e0 <print>
						print("°");
 8000b66:	484c      	ldr	r0, [pc, #304]	; (8000c98 <main+0x63c>)
 8000b68:	f7ff fd3a 	bl	80005e0 <print>
						print(latMS);
 8000b6c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fd35 	bl	80005e0 <print>
						print("\', ");
 8000b76:	4849      	ldr	r0, [pc, #292]	; (8000c9c <main+0x640>)
 8000b78:	f7ff fd32 	bl	80005e0 <print>
						print(hemEW);
 8000b7c:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 8000b80:	f7ff fd2e 	bl	80005e0 <print>
						print(" ");
 8000b84:	4843      	ldr	r0, [pc, #268]	; (8000c94 <main+0x638>)
 8000b86:	f7ff fd2b 	bl	80005e0 <print>
						print(lonDg);
 8000b8a:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fd26 	bl	80005e0 <print>
						print("°");
 8000b94:	4840      	ldr	r0, [pc, #256]	; (8000c98 <main+0x63c>)
 8000b96:	f7ff fd23 	bl	80005e0 <print>
						//print(strLonMS);
						print(lonMS);
 8000b9a:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fd1e 	bl	80005e0 <print>

						print("\', UTC: ");
 8000ba4:	483e      	ldr	r0, [pc, #248]	; (8000ca0 <main+0x644>)
 8000ba6:	f7ff fd1b 	bl	80005e0 <print>
						println(strUTC);
 8000baa:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fd2a 	bl	8000608 <println>
						newline();
 8000bb4:	f7ff fd44 	bl	8000640 <newline>

				//VTG
				// selecting only $GNVTG sentences, combined GPS and GLONASS
				// on my GPS sensor this good NMEA sentence is always 33 characters
				//println("BEFORE vtg good");
				if ((strstr(nmeaSnt, "$GNVTG") != 0) && strlen(nmeaSnt) >= 32 && strstr(nmeaSnt, "*") != 0) {
 8000bb8:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000bbc:	4939      	ldr	r1, [pc, #228]	; (8000ca4 <main+0x648>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 f933 	bl	8004e2a <strstr>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 80af 	beq.w	8000d2a <main+0x6ce>
 8000bcc:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fafd 	bl	80001d0 <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b1f      	cmp	r3, #31
 8000bda:	f240 80a6 	bls.w	8000d2a <main+0x6ce>
 8000bde:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000be2:	212a      	movs	r1, #42	; 0x2a
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 f906 	bl	8004df6 <strchr>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f000 809c 	beq.w	8000d2a <main+0x6ce>
					//println("AFTER vtg good");

					rawSum = strstr(nmeaSnt, "*");
 8000bf2:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000bf6:	212a      	movs	r1, #42	; 0x2a
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f004 f8fc 	bl	8004df6 <strchr>
 8000bfe:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448

					memcpy(smNmbr, &rawSum[1], 2);
 8000c02:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8000c06:	3301      	adds	r3, #1
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8000c10:	801a      	strh	r2, [r3, #0]

					smNmbr[2] = '\0';
 8000c12:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8000c16:	2200      	movs	r2, #0
 8000c18:	709a      	strb	r2, [r3, #2]

					uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8000c1a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fcba 	bl	8000598 <nmea0183_checksum>
 8000c24:	4603      	mov	r3, r0
 8000c26:	f887 3446 	strb.w	r3, [r7, #1094]	; 0x446

					char hex[2];

					// "%X" unsigned hexadecimal integer (capital letters)
					sprintf(hex, "%X", intSum);
 8000c2a:	f897 2446 	ldrb.w	r2, [r7, #1094]	; 0x446
 8000c2e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000c32:	491d      	ldr	r1, [pc, #116]	; (8000ca8 <main+0x64c>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f004 f8af 	bl	8004d98 <siprintf>

					// checksum data verification, if OK, then we can really trust
					// the data in the the NMEA sentence
					//println("BEFORE vtg checksum");
					if (strstr(smNmbr, hex) != NULL) {
 8000c3a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8000c3e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f004 f8f0 	bl	8004e2a <strstr>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d06c      	beq.n	8000d2a <main+0x6ce>
						//println("AFTER vtg checksum");

						//if we want display good $GNVTG NMEA sentences
						HAL_UART_Transmit(&huart2, (uint8_t*)nmeaSnt, 33, 70);
 8000c50:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 8000c54:	2346      	movs	r3, #70	; 0x46
 8000c56:	2221      	movs	r2, #33	; 0x21
 8000c58:	4814      	ldr	r0, [pc, #80]	; (8000cac <main+0x650>)
 8000c5a:	f002 fdd5 	bl	8003808 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, 200);
 8000c5e:	23c8      	movs	r3, #200	; 0xc8
 8000c60:	2202      	movs	r2, #2
 8000c62:	4913      	ldr	r1, [pc, #76]	; (8000cb0 <main+0x654>)
 8000c64:	4811      	ldr	r0, [pc, #68]	; (8000cac <main+0x650>)
 8000c66:	f002 fdcf 	bl	8003808 <HAL_UART_Transmit>

						cnt = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f

						// splitting the good NMEA sentence into the tokens by the comma delimiter
						//println("BEFORE vtg splitting");
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000c70:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000c74:	4903      	ldr	r1, [pc, #12]	; (8000c84 <main+0x628>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f004 f8ee 	bl	8004e58 <strtok>
 8000c7c:	f8c7 0454 	str.w	r0, [r7, #1108]	; 0x454
 8000c80:	e033      	b.n	8000cea <main+0x68e>
 8000c82:	bf00      	nop
 8000c84:	080062dc 	.word	0x080062dc
 8000c88:	0800622c 	.word	0x0800622c
 8000c8c:	080062e0 	.word	0x080062e0
 8000c90:	080062e4 	.word	0x080062e4
 8000c94:	080062fc 	.word	0x080062fc
 8000c98:	08006300 	.word	0x08006300
 8000c9c:	08006304 	.word	0x08006304
 8000ca0:	08006308 	.word	0x08006308
 8000ca4:	08006314 	.word	0x08006314
 8000ca8:	080062d8 	.word	0x080062d8
 8000cac:	20000168 	.word	0x20000168
 8000cb0:	08006210 	.word	0x08006210
							//println("AFTER vtg splitting");
							switch(cnt) {
 8000cb4:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8000cb8:	2b06      	cmp	r3, #6
 8000cba:	d10b      	bne.n	8000cd4 <main+0x678>
								case 6:
									//strcpy(ground_speed, pV);
									//ground_speed_raw = strdup(pV);
									strcpy(ground_speed_buff, pV);
 8000cbc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000cc0:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f004 f8a3 	bl	8004e10 <strcpy>
									ground_speed_raw = ground_speed_buff;
 8000cca:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000cce:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
									break;
 8000cd2:	bf00      	nop
							}

							cnt++;
 8000cd4:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8000cd8:	3301      	adds	r3, #1
 8000cda:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000cde:	4963      	ldr	r1, [pc, #396]	; (8000e6c <main+0x810>)
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f004 f8b9 	bl	8004e58 <strtok>
 8000ce6:	f8c7 0454 	str.w	r0, [r7, #1108]	; 0x454
 8000cea:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1e0      	bne.n	8000cb4 <main+0x658>

						}  // end for()
						memcpy(ground_speed_buff, &ground_speed_raw[0], 7);
 8000cf2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000cf6:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8000cfa:	6810      	ldr	r0, [r2, #0]
 8000cfc:	6018      	str	r0, [r3, #0]
 8000cfe:	8891      	ldrh	r1, [r2, #4]
 8000d00:	7992      	ldrb	r2, [r2, #6]
 8000d02:	8099      	strh	r1, [r3, #4]
 8000d04:	719a      	strb	r2, [r3, #6]
						ground_speed_buff[7] = '\0';
 8000d06:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	71da      	strb	r2, [r3, #7]
						// HAL_UART_Transmit(&huart2, (uint8_t*) ground_speed, 5, 200);
						// HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 200);
						// HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 200);

						//Speed
						newline();
 8000d0e:	f7ff fc97 	bl	8000640 <newline>
						newline();
 8000d12:	f7ff fc95 	bl	8000640 <newline>
						println("Speed (kph):");
 8000d16:	4856      	ldr	r0, [pc, #344]	; (8000e70 <main+0x814>)
 8000d18:	f7ff fc76 	bl	8000608 <println>
						println(ground_speed_buff);
 8000d1c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc71 	bl	8000608 <println>
						newline();
 8000d26:	f7ff fc8b 	bl	8000640 <newline>

				//GGA
				// selecting only $GNGGA sentences, combined GPS and GLONASS
				// on my GPS sensor this good NMEA sentence is always 72 characters
				//println("BEFORE gga good");
				if ((strstr(nmeaSnt, "$GNGGA") != 0) && strlen(nmeaSnt) >= 71 && strstr(nmeaSnt, "*") != 0) {
 8000d2a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000d2e:	4951      	ldr	r1, [pc, #324]	; (8000e74 <main+0x818>)
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 f87a 	bl	8004e2a <strstr>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 8082 	beq.w	8000e42 <main+0x7e6>
 8000d3e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fa44 	bl	80001d0 <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b46      	cmp	r3, #70	; 0x46
 8000d4c:	d979      	bls.n	8000e42 <main+0x7e6>
 8000d4e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000d52:	212a      	movs	r1, #42	; 0x2a
 8000d54:	4618      	mov	r0, r3
 8000d56:	f004 f84e 	bl	8004df6 <strchr>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d070      	beq.n	8000e42 <main+0x7e6>
					//println("AFTER gga good");

					rawSum = strstr(nmeaSnt, "*");
 8000d60:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000d64:	212a      	movs	r1, #42	; 0x2a
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 f845 	bl	8004df6 <strchr>
 8000d6c:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448

					memcpy(smNmbr, &rawSum[1], 2);
 8000d70:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8000d74:	3301      	adds	r3, #1
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8000d7e:	801a      	strh	r2, [r3, #0]

					smNmbr[2] = '\0';
 8000d80:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8000d84:	2200      	movs	r2, #0
 8000d86:	709a      	strb	r2, [r3, #2]

					uint8_t intSum = nmea0183_checksum(nmeaSnt);
 8000d88:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fc03 	bl	8000598 <nmea0183_checksum>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f887 3445 	strb.w	r3, [r7, #1093]	; 0x445

					char hex[2];

					// "%X" unsigned hexadecimal integer (capital letters)
					sprintf(hex, "%X", intSum);
 8000d98:	f897 2445 	ldrb.w	r2, [r7, #1093]	; 0x445
 8000d9c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000da0:	4935      	ldr	r1, [pc, #212]	; (8000e78 <main+0x81c>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 fff8 	bl	8004d98 <siprintf>

					// checksum data verification, if OK, then we can really trust
					// the data in the the NMEA sentence
					//println("BEFORE gga checksum");
					if (strstr(smNmbr, hex) != NULL) {
 8000da8:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000dac:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 f839 	bl	8004e2a <strstr>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d041      	beq.n	8000e42 <main+0x7e6>
						//println("AFTER gga checksum");

						//if we want display good $GNGGA NMEA sentences
						HAL_UART_Transmit(&huart2, (uint8_t*)nmeaSnt, 72, 70);
 8000dbe:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 8000dc2:	2346      	movs	r3, #70	; 0x46
 8000dc4:	2248      	movs	r2, #72	; 0x48
 8000dc6:	482d      	ldr	r0, [pc, #180]	; (8000e7c <main+0x820>)
 8000dc8:	f002 fd1e 	bl	8003808 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\n\r", 2, 200);
 8000dcc:	23c8      	movs	r3, #200	; 0xc8
 8000dce:	2202      	movs	r2, #2
 8000dd0:	492b      	ldr	r1, [pc, #172]	; (8000e80 <main+0x824>)
 8000dd2:	482a      	ldr	r0, [pc, #168]	; (8000e7c <main+0x820>)
 8000dd4:	f002 fd18 	bl	8003808 <HAL_UART_Transmit>

						cnt = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f

						// splitting the good NMEA sentence into the tokens by the comma delimiter
						//println("BEFORE gga splitting");
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000dde:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000de2:	4922      	ldr	r1, [pc, #136]	; (8000e6c <main+0x810>)
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 f837 	bl	8004e58 <strtok>
 8000dea:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450
 8000dee:	e016      	b.n	8000e1e <main+0x7c2>
							//println("AFTER gga splitting");

							switch(cnt) {
 8000df0:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8000df4:	2b09      	cmp	r3, #9
 8000df6:	d107      	bne.n	8000e08 <main+0x7ac>
								case 9:
									strcpy(altitude, pV);
 8000df8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8000dfc:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8000e00:	4618      	mov	r0, r3
 8000e02:	f004 f805 	bl	8004e10 <strcpy>
									break;
 8000e06:	bf00      	nop
							}

							cnt++;
 8000e08:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000e12:	4916      	ldr	r1, [pc, #88]	; (8000e6c <main+0x810>)
 8000e14:	2000      	movs	r0, #0
 8000e16:	f004 f81f 	bl	8004e58 <strtok>
 8000e1a:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450
 8000e1e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1e4      	bne.n	8000df0 <main+0x794>
						// HAL_UART_Transmit(&huart2, (uint8_t*) altitude, 4, 200);
						// HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 200);
						// HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 200);

						//Altitude
						newline();
 8000e26:	f7ff fc0b 	bl	8000640 <newline>
						newline();
 8000e2a:	f7ff fc09 	bl	8000640 <newline>
						println("Altitude (above mean sea level):");
 8000e2e:	4815      	ldr	r0, [pc, #84]	; (8000e84 <main+0x828>)
 8000e30:	f7ff fbea 	bl	8000608 <println>
						println(altitude);
 8000e34:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fbe5 	bl	8000608 <println>
						newline();
 8000e3e:	f7ff fbff 	bl	8000640 <newline>
			while ((token = strsep(&string, "\n")) != NULL) {
 8000e42:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000e46:	4910      	ldr	r1, [pc, #64]	; (8000e88 <main+0x82c>)
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 ffe9 	bl	8004e20 <strsep>
 8000e4e:	f8c7 044c 	str.w	r0, [r7, #1100]	; 0x44c
 8000e52:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f47f acd7 	bne.w	800080a <main+0x1ae>
//			newline();

			//ground_speed[7] = "\0";//clear buff
			//memset(ground_speed, 0, 7);

			flag = 0; // we are ready to get new data from the sensor
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <main+0x830>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]

		} // end of one interrupt/full-buffer cycle

		HAL_Delay(200);
 8000e62:	20c8      	movs	r0, #200	; 0xc8
 8000e64:	f000 fc08 	bl	8001678 <HAL_Delay>
		newline();
 8000e68:	e433      	b.n	80006d2 <main+0x76>
 8000e6a:	bf00      	nop
 8000e6c:	080062dc 	.word	0x080062dc
 8000e70:	0800631c 	.word	0x0800631c
 8000e74:	0800632c 	.word	0x0800632c
 8000e78:	080062d8 	.word	0x080062d8
 8000e7c:	20000168 	.word	0x20000168
 8000e80:	08006210 	.word	0x08006210
 8000e84:	08006334 	.word	0x08006334
 8000e88:	08006358 	.word	0x08006358
 8000e8c:	2000008c 	.word	0x2000008c

08000e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b096      	sub	sp, #88	; 0x58
 8000e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	2244      	movs	r2, #68	; 0x44
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 ff72 	bl	8004d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000eb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eb6:	f001 f95b 	bl	8002170 <HAL_PWREx_ControlVoltageScaling>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ec0:	f000 f91c 	bl	80010fc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ecc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ece:	2310      	movs	r3, #16
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000eda:	2301      	movs	r3, #1
 8000edc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 f992 	bl	800221c <HAL_RCC_OscConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000efe:	f000 f8fd 	bl	80010fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f02:	230f      	movs	r3, #15
 8000f04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f06:	2303      	movs	r3, #3
 8000f08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fd64 	bl	80029e8 <HAL_RCC_ClockConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f26:	f000 f8e9 	bl	80010fc <Error_Handler>
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3758      	adds	r7, #88	; 0x58
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f3a:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <MX_USART1_UART_Init+0x5c>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f78:	f002 fbf8 	bl	800376c <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f82:	f000 f8bb 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000e4 	.word	0x200000e4
 8000f90:	40013800 	.word	0x40013800

08000f94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000f9a:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <MX_USART2_UART_Init+0x5c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART2_UART_Init+0x58>)
 8000fd8:	f002 fbc8 	bl	800376c <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fe2:	f000 f88b 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000168 	.word	0x20000168
 8000ff0:	40004400 	.word	0x40004400

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_DMA_Init+0x38>)
 8000ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <MX_DMA_Init+0x38>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6493      	str	r3, [r2, #72]	; 0x48
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_DMA_Init+0x38>)
 8001008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	200f      	movs	r0, #15
 8001018:	f000 fc2d 	bl	8001876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800101c:	200f      	movs	r0, #15
 800101e:	f000 fc46 	bl	80018ae <HAL_NVIC_EnableIRQ>

}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000

08001030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <MX_GPIO_Init+0xc4>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	4a2a      	ldr	r2, [pc, #168]	; (80010f4 <MX_GPIO_Init+0xc4>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <MX_GPIO_Init+0xc4>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <MX_GPIO_Init+0xc4>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4a24      	ldr	r2, [pc, #144]	; (80010f4 <MX_GPIO_Init+0xc4>)
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <MX_GPIO_Init+0xc4>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <MX_GPIO_Init+0xc4>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <MX_GPIO_Init+0xc4>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <MX_GPIO_Init+0xc4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_GPIO_Init+0xc4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <MX_GPIO_Init+0xc4>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_GPIO_Init+0xc4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2120      	movs	r1, #32
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f001 f839 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	480b      	ldr	r0, [pc, #44]	; (80010f8 <MX_GPIO_Init+0xc8>)
 80010ca:	f000 fe81 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010ce:	2320      	movs	r3, #32
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f000 fe72 	bl	8001dd0 <HAL_GPIO_Init>

}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	48000800 	.word	0x48000800

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	e7fe      	b.n	8001104 <Error_Handler+0x8>
	...

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_MspInit+0x44>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <HAL_MspInit+0x44>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6613      	str	r3, [r2, #96]	; 0x60
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_MspInit+0x44>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_MspInit+0x44>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <HAL_MspInit+0x44>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6593      	str	r3, [r2, #88]	; 0x58
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_MspInit+0x44>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0ae      	sub	sp, #184	; 0xb8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	2288      	movs	r2, #136	; 0x88
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f003 fe09 	bl	8004d88 <memset>
  if(huart->Instance==USART1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a5c      	ldr	r2, [pc, #368]	; (80012ec <HAL_UART_MspInit+0x19c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d16f      	bne.n	8001260 <HAL_UART_MspInit+0x110>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001180:	2301      	movs	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001184:	2300      	movs	r3, #0
 8001186:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fe31 	bl	8002df4 <HAL_RCCEx_PeriphCLKConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001198:	f7ff ffb0 	bl	80010fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800119c:	4b54      	ldr	r3, [pc, #336]	; (80012f0 <HAL_UART_MspInit+0x1a0>)
 800119e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a0:	4a53      	ldr	r2, [pc, #332]	; (80012f0 <HAL_UART_MspInit+0x1a0>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a6:	6613      	str	r3, [r2, #96]	; 0x60
 80011a8:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <HAL_UART_MspInit+0x1a0>)
 80011aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <HAL_UART_MspInit+0x1a0>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	4a4d      	ldr	r2, [pc, #308]	; (80012f0 <HAL_UART_MspInit+0x1a0>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c0:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <HAL_UART_MspInit+0x1a0>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e6:	2307      	movs	r3, #7
 80011e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011f0:	4619      	mov	r1, r3
 80011f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f6:	f000 fdeb 	bl	8001dd0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <HAL_UART_MspInit+0x1a4>)
 80011fc:	4a3e      	ldr	r2, [pc, #248]	; (80012f8 <HAL_UART_MspInit+0x1a8>)
 80011fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <HAL_UART_MspInit+0x1a4>)
 8001202:	2202      	movs	r2, #2
 8001204:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_UART_MspInit+0x1a4>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <HAL_UART_MspInit+0x1a4>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <HAL_UART_MspInit+0x1a4>)
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <HAL_UART_MspInit+0x1a4>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <HAL_UART_MspInit+0x1a4>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <HAL_UART_MspInit+0x1a4>)
 8001226:	2220      	movs	r2, #32
 8001228:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800122a:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <HAL_UART_MspInit+0x1a4>)
 800122c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001230:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001232:	4830      	ldr	r0, [pc, #192]	; (80012f4 <HAL_UART_MspInit+0x1a4>)
 8001234:	f000 fb56 	bl	80018e4 <HAL_DMA_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 800123e:	f7ff ff5d 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a2b      	ldr	r2, [pc, #172]	; (80012f4 <HAL_UART_MspInit+0x1a4>)
 8001246:	671a      	str	r2, [r3, #112]	; 0x70
 8001248:	4a2a      	ldr	r2, [pc, #168]	; (80012f4 <HAL_UART_MspInit+0x1a4>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2025      	movs	r0, #37	; 0x25
 8001254:	f000 fb0f 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001258:	2025      	movs	r0, #37	; 0x25
 800125a:	f000 fb28 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800125e:	e040      	b.n	80012e2 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a25      	ldr	r2, [pc, #148]	; (80012fc <HAL_UART_MspInit+0x1ac>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d13b      	bne.n	80012e2 <HAL_UART_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800126a:	2302      	movs	r3, #2
 800126c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800126e:	2300      	movs	r3, #0
 8001270:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fdbc 	bl	8002df4 <HAL_RCCEx_PeriphCLKConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_UART_MspInit+0x136>
      Error_Handler();
 8001282:	f7ff ff3b 	bl	80010fc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_UART_MspInit+0x1a0>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <HAL_UART_MspInit+0x1a0>)
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	6593      	str	r3, [r2, #88]	; 0x58
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_UART_MspInit+0x1a0>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_UART_MspInit+0x1a0>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <HAL_UART_MspInit+0x1a0>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_UART_MspInit+0x1a0>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012b6:	230c      	movs	r3, #12
 80012b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ce:	2307      	movs	r3, #7
 80012d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f000 fd77 	bl	8001dd0 <HAL_GPIO_Init>
}
 80012e2:	bf00      	nop
 80012e4:	37b8      	adds	r7, #184	; 0xb8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40013800 	.word	0x40013800
 80012f0:	40021000 	.word	0x40021000
 80012f4:	2000009c 	.word	0x2000009c
 80012f8:	40020058 	.word	0x40020058
 80012fc:	40004400 	.word	0x40004400

08001300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <NMI_Handler+0x4>

08001306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <MemManage_Handler+0x4>

08001312 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <UsageFault_Handler+0x4>

0800131e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134c:	f000 f974 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <DMA1_Channel5_IRQHandler+0x10>)
 800135a:	f000 fc5a 	bl	8001c12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000009c 	.word	0x2000009c

08001368 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <USART1_IRQHandler+0x10>)
 800136e:	f002 fb35 	bl	80039dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000e4 	.word	0x200000e4

0800137c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	return 1;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_kill>:

int _kill(int pid, int sig)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001396:	f003 fccd 	bl	8004d34 <__errno>
 800139a:	4603      	mov	r3, r0
 800139c:	2216      	movs	r2, #22
 800139e:	601a      	str	r2, [r3, #0]
	return -1;
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_exit>:

void _exit (int status)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ffe7 	bl	800138c <_kill>
	while (1) {}		/* Make sure we hang here */
 80013be:	e7fe      	b.n	80013be <_exit+0x12>

080013c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e00a      	b.n	80013e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013d2:	f3af 8000 	nop.w
 80013d6:	4601      	mov	r1, r0
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	b2ca      	uxtb	r2, r1
 80013e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbf0      	blt.n	80013d2 <_read+0x12>
	}

return len;
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e009      	b.n	8001420 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	dbf1      	blt.n	800140c <_write+0x12>
	}
	return len;
 8001428:	687b      	ldr	r3, [r7, #4]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <_close>:

int _close(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
	return -1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800145a:	605a      	str	r2, [r3, #4]
	return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_isatty>:

int _isatty(int file)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
	return 1;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f003 fc32 	bl	8004d34 <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20018000 	.word	0x20018000
 80014fc:	00000400 	.word	0x00000400
 8001500:	20000090 	.word	0x20000090
 8001504:	20000200 	.word	0x20000200

08001508 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001530:	f7ff ffea 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <LoopForever+0x6>)
  ldr r1, =_edata
 8001536:	490d      	ldr	r1, [pc, #52]	; (800156c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <LoopForever+0xe>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800154c:	4c0a      	ldr	r4, [pc, #40]	; (8001578 <LoopForever+0x16>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155a:	f003 fbf1 	bl	8004d40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800155e:	f7ff f87d 	bl	800065c <main>

08001562 <LoopForever>:

LoopForever:
    b LoopForever
 8001562:	e7fe      	b.n	8001562 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001564:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001570:	08006564 	.word	0x08006564
  ldr r2, =_sbss
 8001574:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001578:	20000200 	.word	0x20000200

0800157c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_2_IRQHandler>
	...

08001580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_Init+0x3c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <HAL_Init+0x3c>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001596:	2003      	movs	r0, #3
 8001598:	f000 f962 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800159c:	2000      	movs	r0, #0
 800159e:	f000 f80f 	bl	80015c0 <HAL_InitTick>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	e001      	b.n	80015b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ae:	f7ff fdab 	bl	8001108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40022000 	.word	0x40022000

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_InitTick+0x6c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_InitTick+0x70>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_InitTick+0x6c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f96d 	bl	80018ca <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d809      	bhi.n	8001610 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 f937 	bl	8001876 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_InitTick+0x74>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e007      	b.n	8001620 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e004      	b.n	8001620 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	e001      	b.n	8001620 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008
 8001630:	20000000 	.word	0x20000000
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008
 800165c:	200001ec 	.word	0x200001ec

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200001ec 	.word	0x200001ec

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db0b      	blt.n	800174e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <__NVIC_EnableIRQ+0x38>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	2001      	movs	r0, #1
 8001746:	fa00 f202 	lsl.w	r2, r0, r2
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f7ff ff8e 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff29 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff3e 	bl	8001708 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff8e 	bl	80017b4 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5d 	bl	8001760 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff31 	bl	8001724 <__NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffa2 	bl	800181c <SysTick_Config>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e098      	b.n	8001a28 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b4d      	ldr	r3, [pc, #308]	; (8001a34 <HAL_DMA_Init+0x150>)
 80018fe:	429a      	cmp	r2, r3
 8001900:	d80f      	bhi.n	8001922 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <HAL_DMA_Init+0x154>)
 800190a:	4413      	add	r3, r2
 800190c:	4a4b      	ldr	r2, [pc, #300]	; (8001a3c <HAL_DMA_Init+0x158>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	009a      	lsls	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a48      	ldr	r2, [pc, #288]	; (8001a40 <HAL_DMA_Init+0x15c>)
 800191e:	641a      	str	r2, [r3, #64]	; 0x40
 8001920:	e00e      	b.n	8001940 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b46      	ldr	r3, [pc, #280]	; (8001a44 <HAL_DMA_Init+0x160>)
 800192a:	4413      	add	r3, r2
 800192c:	4a43      	ldr	r2, [pc, #268]	; (8001a3c <HAL_DMA_Init+0x158>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	009a      	lsls	r2, r3, #2
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a42      	ldr	r2, [pc, #264]	; (8001a48 <HAL_DMA_Init+0x164>)
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2202      	movs	r2, #2
 8001944:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800195a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800199a:	d039      	beq.n	8001a10 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	4a27      	ldr	r2, [pc, #156]	; (8001a40 <HAL_DMA_Init+0x15c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d11a      	bne.n	80019dc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_DMA_Init+0x168>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f003 031c 	and.w	r3, r3, #28
 80019b2:	210f      	movs	r1, #15
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4924      	ldr	r1, [pc, #144]	; (8001a4c <HAL_DMA_Init+0x168>)
 80019bc:	4013      	ands	r3, r2
 80019be:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_DMA_Init+0x168>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6859      	ldr	r1, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f003 031c 	and.w	r3, r3, #28
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	491d      	ldr	r1, [pc, #116]	; (8001a4c <HAL_DMA_Init+0x168>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
 80019da:	e019      	b.n	8001a10 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019dc:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <HAL_DMA_Init+0x16c>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	f003 031c 	and.w	r3, r3, #28
 80019e8:	210f      	movs	r1, #15
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	4917      	ldr	r1, [pc, #92]	; (8001a50 <HAL_DMA_Init+0x16c>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_DMA_Init+0x16c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6859      	ldr	r1, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f003 031c 	and.w	r3, r3, #28
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	4911      	ldr	r1, [pc, #68]	; (8001a50 <HAL_DMA_Init+0x16c>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40020407 	.word	0x40020407
 8001a38:	bffdfff8 	.word	0xbffdfff8
 8001a3c:	cccccccd 	.word	0xcccccccd
 8001a40:	40020000 	.word	0x40020000
 8001a44:	bffdfbf8 	.word	0xbffdfbf8
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	400200a8 	.word	0x400200a8
 8001a50:	400204a8 	.word	0x400204a8

08001a54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_DMA_Start_IT+0x20>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e04b      	b.n	8001b0c <HAL_DMA_Start_IT+0xb8>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d13a      	bne.n	8001afe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 f95f 	bl	8001d70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d008      	beq.n	8001acc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 020e 	orr.w	r2, r2, #14
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e00f      	b.n	8001aec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0204 	bic.w	r2, r2, #4
 8001ada:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 020a 	orr.w	r2, r2, #10
 8001aea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e005      	b.n	8001b0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b06:	2302      	movs	r3, #2
 8001b08:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d008      	beq.n	8001b3e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2204      	movs	r2, #4
 8001b30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e022      	b.n	8001b84 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 020e 	bic.w	r2, r2, #14
 8001b4c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f003 021c 	and.w	r2, r3, #28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b70:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d005      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2204      	movs	r2, #4
 8001bac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	e029      	b.n	8001c08 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 020e 	bic.w	r2, r2, #14
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	f003 021c 	and.w	r2, r3, #28
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f202 	lsl.w	r2, r1, r2
 8001be6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
    }
  }
  return status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f003 031c 	and.w	r3, r3, #28
 8001c32:	2204      	movs	r2, #4
 8001c34:	409a      	lsls	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d026      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x7a>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d021      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d107      	bne.n	8001c66 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0204 	bic.w	r2, r2, #4
 8001c64:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f003 021c 	and.w	r2, r3, #28
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	2104      	movs	r1, #4
 8001c74:	fa01 f202 	lsl.w	r2, r1, r2
 8001c78:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d071      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001c8a:	e06c      	b.n	8001d66 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	f003 031c 	and.w	r3, r3, #28
 8001c94:	2202      	movs	r2, #2
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d02e      	beq.n	8001cfe <HAL_DMA_IRQHandler+0xec>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d029      	beq.n	8001cfe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 020a 	bic.w	r2, r2, #10
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd4:	f003 021c 	and.w	r2, r3, #28
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	2102      	movs	r1, #2
 8001cde:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d038      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001cfc:	e033      	b.n	8001d66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f003 031c 	and.w	r3, r3, #28
 8001d06:	2208      	movs	r2, #8
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d02a      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x156>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d025      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 020e 	bic.w	r2, r2, #14
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	f003 021c 	and.w	r2, r3, #28
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
}
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f003 021c 	and.w	r2, r3, #28
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d108      	bne.n	8001db4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001db2:	e007      	b.n	8001dc4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	60da      	str	r2, [r3, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dde:	e17f      	b.n	80020e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8171 	beq.w	80020da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d005      	beq.n	8001e10 <HAL_GPIO_Init+0x40>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d130      	bne.n	8001e72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e46:	2201      	movs	r2, #1
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f003 0201 	and.w	r2, r3, #1
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d118      	bne.n	8001eb0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e84:	2201      	movs	r2, #1
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	08db      	lsrs	r3, r3, #3
 8001e9a:	f003 0201 	and.w	r2, r3, #1
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d017      	beq.n	8001eec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d123      	bne.n	8001f40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	08da      	lsrs	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3208      	adds	r2, #8
 8001f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	08da      	lsrs	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3208      	adds	r2, #8
 8001f3a:	6939      	ldr	r1, [r7, #16]
 8001f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80ac 	beq.w	80020da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <HAL_GPIO_Init+0x330>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	4a5e      	ldr	r2, [pc, #376]	; (8002100 <HAL_GPIO_Init+0x330>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f8e:	4b5c      	ldr	r3, [pc, #368]	; (8002100 <HAL_GPIO_Init+0x330>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f9a:	4a5a      	ldr	r2, [pc, #360]	; (8002104 <HAL_GPIO_Init+0x334>)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fc4:	d025      	beq.n	8002012 <HAL_GPIO_Init+0x242>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4f      	ldr	r2, [pc, #316]	; (8002108 <HAL_GPIO_Init+0x338>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01f      	beq.n	800200e <HAL_GPIO_Init+0x23e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4e      	ldr	r2, [pc, #312]	; (800210c <HAL_GPIO_Init+0x33c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d019      	beq.n	800200a <HAL_GPIO_Init+0x23a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4d      	ldr	r2, [pc, #308]	; (8002110 <HAL_GPIO_Init+0x340>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0x236>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	; (8002114 <HAL_GPIO_Init+0x344>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00d      	beq.n	8002002 <HAL_GPIO_Init+0x232>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <HAL_GPIO_Init+0x348>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x22e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4a      	ldr	r2, [pc, #296]	; (800211c <HAL_GPIO_Init+0x34c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_GPIO_Init+0x22a>
 8001ff6:	2306      	movs	r3, #6
 8001ff8:	e00c      	b.n	8002014 <HAL_GPIO_Init+0x244>
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	e00a      	b.n	8002014 <HAL_GPIO_Init+0x244>
 8001ffe:	2305      	movs	r3, #5
 8002000:	e008      	b.n	8002014 <HAL_GPIO_Init+0x244>
 8002002:	2304      	movs	r3, #4
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x244>
 8002006:	2303      	movs	r3, #3
 8002008:	e004      	b.n	8002014 <HAL_GPIO_Init+0x244>
 800200a:	2302      	movs	r3, #2
 800200c:	e002      	b.n	8002014 <HAL_GPIO_Init+0x244>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_GPIO_Init+0x244>
 8002012:	2300      	movs	r3, #0
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	f002 0203 	and.w	r2, r2, #3
 800201a:	0092      	lsls	r2, r2, #2
 800201c:	4093      	lsls	r3, r2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002024:	4937      	ldr	r1, [pc, #220]	; (8002104 <HAL_GPIO_Init+0x334>)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002032:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_GPIO_Init+0x350>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002056:	4a32      	ldr	r2, [pc, #200]	; (8002120 <HAL_GPIO_Init+0x350>)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800205c:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_GPIO_Init+0x350>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002080:	4a27      	ldr	r2, [pc, #156]	; (8002120 <HAL_GPIO_Init+0x350>)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_GPIO_Init+0x350>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020aa:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <HAL_GPIO_Init+0x350>)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_GPIO_Init+0x350>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020d4:	4a12      	ldr	r2, [pc, #72]	; (8002120 <HAL_GPIO_Init+0x350>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3301      	adds	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f47f ae78 	bne.w	8001de0 <HAL_GPIO_Init+0x10>
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	40010000 	.word	0x40010000
 8002108:	48000400 	.word	0x48000400
 800210c:	48000800 	.word	0x48000800
 8002110:	48000c00 	.word	0x48000c00
 8002114:	48001000 	.word	0x48001000
 8002118:	48001400 	.word	0x48001400
 800211c:	48001800 	.word	0x48001800
 8002120:	40010400 	.word	0x40010400

08002124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002140:	e002      	b.n	8002148 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <HAL_PWREx_GetVoltageRange+0x18>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40007000 	.word	0x40007000

08002170 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800217e:	d130      	bne.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002180:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800218c:	d038      	beq.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002196:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002198:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2232      	movs	r2, #50	; 0x32
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0c9b      	lsrs	r3, r3, #18
 80021b0:	3301      	adds	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b4:	e002      	b.n	80021bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c8:	d102      	bne.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f2      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021dc:	d110      	bne.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e00f      	b.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ee:	d007      	beq.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021f8:	4a05      	ldr	r2, [pc, #20]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40007000 	.word	0x40007000
 8002214:	20000000 	.word	0x20000000
 8002218:	431bde83 	.word	0x431bde83

0800221c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e3d4      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222e:	4ba1      	ldr	r3, [pc, #644]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002238:	4b9e      	ldr	r3, [pc, #632]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80e4 	beq.w	8002418 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <HAL_RCC_OscConfig+0x4a>
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b0c      	cmp	r3, #12
 800225a:	f040 808b 	bne.w	8002374 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b01      	cmp	r3, #1
 8002262:	f040 8087 	bne.w	8002374 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002266:	4b93      	ldr	r3, [pc, #588]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x62>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e3ac      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1a      	ldr	r2, [r3, #32]
 8002282:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d004      	beq.n	8002298 <HAL_RCC_OscConfig+0x7c>
 800228e:	4b89      	ldr	r3, [pc, #548]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002296:	e005      	b.n	80022a4 <HAL_RCC_OscConfig+0x88>
 8002298:	4b86      	ldr	r3, [pc, #536]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 800229a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d223      	bcs.n	80022f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fd41 	bl	8002d34 <RCC_SetFlashLatencyFromMSIRange>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e38d      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022bc:	4b7d      	ldr	r3, [pc, #500]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a7c      	ldr	r2, [pc, #496]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80022c2:	f043 0308 	orr.w	r3, r3, #8
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b7a      	ldr	r3, [pc, #488]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4977      	ldr	r1, [pc, #476]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022da:	4b76      	ldr	r3, [pc, #472]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	4972      	ldr	r1, [pc, #456]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
 80022ee:	e025      	b.n	800233c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f0:	4b70      	ldr	r3, [pc, #448]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a6f      	ldr	r2, [pc, #444]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b6d      	ldr	r3, [pc, #436]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	496a      	ldr	r1, [pc, #424]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800230e:	4b69      	ldr	r3, [pc, #420]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	4965      	ldr	r1, [pc, #404]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fd01 	bl	8002d34 <RCC_SetFlashLatencyFromMSIRange>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e34d      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800233c:	f000 fc36 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	495a      	ldr	r1, [pc, #360]	; (80024b8 <HAL_RCC_OscConfig+0x29c>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
 8002358:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_RCC_OscConfig+0x2a0>)
 800235a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800235c:	4b58      	ldr	r3, [pc, #352]	; (80024c0 <HAL_RCC_OscConfig+0x2a4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff f92d 	bl	80015c0 <HAL_InitTick>
 8002366:	4603      	mov	r3, r0
 8002368:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d052      	beq.n	8002416 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	e331      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d032      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800237c:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a4c      	ldr	r2, [pc, #304]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002388:	f7ff f96a 	bl	8001660 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002390:	f7ff f966 	bl	8001660 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e31a      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023a2:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ae:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a40      	ldr	r2, [pc, #256]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80023b4:	f043 0308 	orr.w	r3, r3, #8
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	493b      	ldr	r1, [pc, #236]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023cc:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	4936      	ldr	r1, [pc, #216]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
 80023e0:	e01a      	b.n	8002418 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023e2:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a33      	ldr	r2, [pc, #204]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ee:	f7ff f937 	bl	8001660 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023f6:	f7ff f933 	bl	8001660 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e2e7      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x1da>
 8002414:	e000      	b.n	8002418 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002416:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d074      	beq.n	800250e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b08      	cmp	r3, #8
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x21a>
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b0c      	cmp	r3, #12
 800242e:	d10e      	bne.n	800244e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d10b      	bne.n	800244e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002436:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d064      	beq.n	800250c <HAL_RCC_OscConfig+0x2f0>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d160      	bne.n	800250c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e2c4      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x24a>
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a15      	ldr	r2, [pc, #84]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e01d      	b.n	80024a2 <HAL_RCC_OscConfig+0x286>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x26e>
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0f      	ldr	r2, [pc, #60]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002476:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	e00b      	b.n	80024a2 <HAL_RCC_OscConfig+0x286>
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <HAL_RCC_OscConfig+0x298>)
 800249c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d01c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7ff f8d9 	bl	8001660 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b0:	e011      	b.n	80024d6 <HAL_RCC_OscConfig+0x2ba>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	080063c0 	.word	0x080063c0
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7ff f8cc 	bl	8001660 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e280      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d6:	4baf      	ldr	r3, [pc, #700]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x2a8>
 80024e2:	e014      	b.n	800250e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7ff f8bc 	bl	8001660 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7ff f8b8 	bl	8001660 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e26c      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024fe:	4ba5      	ldr	r3, [pc, #660]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x2d0>
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d060      	beq.n	80025dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d005      	beq.n	800252c <HAL_RCC_OscConfig+0x310>
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d119      	bne.n	800255a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d116      	bne.n	800255a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800252c:	4b99      	ldr	r3, [pc, #612]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_OscConfig+0x328>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e249      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b93      	ldr	r3, [pc, #588]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	4990      	ldr	r1, [pc, #576]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002558:	e040      	b.n	80025dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d023      	beq.n	80025aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002562:	4b8c      	ldr	r3, [pc, #560]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a8b      	ldr	r2, [pc, #556]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7ff f877 	bl	8001660 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002576:	f7ff f873 	bl	8001660 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e227      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002588:	4b82      	ldr	r3, [pc, #520]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b7f      	ldr	r3, [pc, #508]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	497c      	ldr	r1, [pc, #496]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
 80025a8:	e018      	b.n	80025dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b7a      	ldr	r3, [pc, #488]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a79      	ldr	r2, [pc, #484]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 80025b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7ff f853 	bl	8001660 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7ff f84f 	bl	8001660 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e203      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025d0:	4b70      	ldr	r3, [pc, #448]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d03c      	beq.n	8002662 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01c      	beq.n	800262a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f0:	4b68      	ldr	r3, [pc, #416]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 80025f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f6:	4a67      	ldr	r2, [pc, #412]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7ff f82e 	bl	8001660 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7ff f82a 	bl	8001660 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1de      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800261a:	4b5e      	ldr	r3, [pc, #376]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ef      	beq.n	8002608 <HAL_RCC_OscConfig+0x3ec>
 8002628:	e01b      	b.n	8002662 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262a:	4b5a      	ldr	r3, [pc, #360]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 800262c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002630:	4a58      	ldr	r2, [pc, #352]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7ff f811 	bl	8001660 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002642:	f7ff f80d 	bl	8001660 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1c1      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002654:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ef      	bne.n	8002642 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80a6 	beq.w	80027bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002670:	2300      	movs	r3, #0
 8002672:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002674:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002680:	4b44      	ldr	r3, [pc, #272]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	4a43      	ldr	r2, [pc, #268]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268a:	6593      	str	r3, [r2, #88]	; 0x58
 800268c:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002698:	2301      	movs	r3, #1
 800269a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269c:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <HAL_RCC_OscConfig+0x57c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d118      	bne.n	80026da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a8:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_RCC_OscConfig+0x57c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a3a      	ldr	r2, [pc, #232]	; (8002798 <HAL_RCC_OscConfig+0x57c>)
 80026ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b4:	f7fe ffd4 	bl	8001660 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026bc:	f7fe ffd0 	bl	8001660 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e184      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ce:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_RCC_OscConfig+0x57c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d108      	bne.n	80026f4 <HAL_RCC_OscConfig+0x4d8>
 80026e2:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e8:	4a2a      	ldr	r2, [pc, #168]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f2:	e024      	b.n	800273e <HAL_RCC_OscConfig+0x522>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d110      	bne.n	800271e <HAL_RCC_OscConfig+0x502>
 80026fc:	4b25      	ldr	r3, [pc, #148]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	4a24      	ldr	r2, [pc, #144]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002704:	f043 0304 	orr.w	r3, r3, #4
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	4a20      	ldr	r2, [pc, #128]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800271c:	e00f      	b.n	800273e <HAL_RCC_OscConfig+0x522>
 800271e:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800272e:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	4a17      	ldr	r2, [pc, #92]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002736:	f023 0304 	bic.w	r3, r3, #4
 800273a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7fe ff8b 	bl	8001660 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7fe ff87 	bl	8001660 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e139      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_OscConfig+0x578>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ed      	beq.n	800274e <HAL_RCC_OscConfig+0x532>
 8002772:	e01a      	b.n	80027aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe ff74 	bl	8001660 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800277a:	e00f      	b.n	800279c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe ff70 	bl	8001660 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d906      	bls.n	800279c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e122      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800279c:	4b90      	ldr	r3, [pc, #576]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e8      	bne.n	800277c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027aa:	7ffb      	ldrb	r3, [r7, #31]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b0:	4b8b      	ldr	r3, [pc, #556]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	4a8a      	ldr	r2, [pc, #552]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 80027b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 8108 	beq.w	80029d6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	f040 80d0 	bne.w	8002970 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027d0:	4b83      	ldr	r3, [pc, #524]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d130      	bne.n	8002846 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	3b01      	subs	r3, #1
 80027f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d127      	bne.n	8002846 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d11f      	bne.n	8002846 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002810:	2a07      	cmp	r2, #7
 8002812:	bf14      	ite	ne
 8002814:	2201      	movne	r2, #1
 8002816:	2200      	moveq	r2, #0
 8002818:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800281a:	4293      	cmp	r3, r2
 800281c:	d113      	bne.n	8002846 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	3b01      	subs	r3, #1
 800282c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d109      	bne.n	8002846 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d06e      	beq.n	8002924 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b0c      	cmp	r3, #12
 800284a:	d069      	beq.n	8002920 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800284c:	4b64      	ldr	r3, [pc, #400]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002858:	4b61      	ldr	r3, [pc, #388]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0b7      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002868:	4b5d      	ldr	r3, [pc, #372]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a5c      	ldr	r2, [pc, #368]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 800286e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002872:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002874:	f7fe fef4 	bl	8001660 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fef0 	bl	8001660 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e0a4      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288e:	4b54      	ldr	r3, [pc, #336]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289a:	4b51      	ldr	r3, [pc, #324]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	4b51      	ldr	r3, [pc, #324]	; (80029e4 <HAL_RCC_OscConfig+0x7c8>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028aa:	3a01      	subs	r2, #1
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	4311      	orrs	r1, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028b4:	0212      	lsls	r2, r2, #8
 80028b6:	4311      	orrs	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028bc:	0852      	lsrs	r2, r2, #1
 80028be:	3a01      	subs	r2, #1
 80028c0:	0552      	lsls	r2, r2, #21
 80028c2:	4311      	orrs	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028c8:	0852      	lsrs	r2, r2, #1
 80028ca:	3a01      	subs	r2, #1
 80028cc:	0652      	lsls	r2, r2, #25
 80028ce:	4311      	orrs	r1, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028d4:	0912      	lsrs	r2, r2, #4
 80028d6:	0452      	lsls	r2, r2, #17
 80028d8:	430a      	orrs	r2, r1
 80028da:	4941      	ldr	r1, [pc, #260]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028e0:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a3e      	ldr	r2, [pc, #248]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ec:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a3b      	ldr	r2, [pc, #236]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f8:	f7fe feb2 	bl	8001660 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe feae 	bl	8001660 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e062      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002912:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800291e:	e05a      	b.n	80029d6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e059      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002924:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d152      	bne.n	80029d6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002930:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2a      	ldr	r2, [pc, #168]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 8002936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800293c:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 8002942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002946:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002948:	f7fe fe8a 	bl	8001660 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fe86 	bl	8001660 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e03a      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002962:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x734>
 800296e:	e032      	b.n	80029d6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d02d      	beq.n	80029d2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 800297c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002980:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 8002994:	f023 0303 	bic.w	r3, r3, #3
 8002998:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 80029a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe fe59 	bl	8001660 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe fe55 	bl	8001660 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e009      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_OscConfig+0x7c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x796>
 80029d0:	e001      	b.n	80029d6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	f99d808c 	.word	0xf99d808c

080029e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0c8      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029fc:	4b66      	ldr	r3, [pc, #408]	; (8002b98 <HAL_RCC_ClockConfig+0x1b0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d910      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b63      	ldr	r3, [pc, #396]	; (8002b98 <HAL_RCC_ClockConfig+0x1b0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	4961      	ldr	r1, [pc, #388]	; (8002b98 <HAL_RCC_ClockConfig+0x1b0>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b5f      	ldr	r3, [pc, #380]	; (8002b98 <HAL_RCC_ClockConfig+0x1b0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0b0      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d04c      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a40:	4b56      	ldr	r3, [pc, #344]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d121      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e09e      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a58:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d115      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e092      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a70:	4b4a      	ldr	r3, [pc, #296]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e086      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a80:	4b46      	ldr	r3, [pc, #280]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e07e      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a90:	4b42      	ldr	r3, [pc, #264]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 0203 	bic.w	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	493f      	ldr	r1, [pc, #252]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa2:	f7fe fddd 	bl	8001660 <HAL_GetTick>
 8002aa6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aaa:	f7fe fdd9 	bl	8001660 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e066      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac0:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 020c 	and.w	r2, r3, #12
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d1eb      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ade:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	492c      	ldr	r1, [pc, #176]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af0:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <HAL_RCC_ClockConfig+0x1b0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d210      	bcs.n	8002b20 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <HAL_RCC_ClockConfig+0x1b0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 0207 	bic.w	r2, r3, #7
 8002b06:	4924      	ldr	r1, [pc, #144]	; (8002b98 <HAL_RCC_ClockConfig+0x1b0>)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_RCC_ClockConfig+0x1b0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e036      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4918      	ldr	r1, [pc, #96]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4910      	ldr	r1, [pc, #64]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b5e:	f000 f825 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b62:	4602      	mov	r2, r0
 8002b64:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <HAL_RCC_ClockConfig+0x1b4>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	490c      	ldr	r1, [pc, #48]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	5ccb      	ldrb	r3, [r1, r3]
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fd1c 	bl	80015c0 <HAL_InitTick>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b8c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	080063c0 	.word	0x080063c0
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	20000004 	.word	0x20000004

08002bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bba:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	d121      	bne.n	8002c1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d11e      	bne.n	8002c1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002be0:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d107      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bec:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e005      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bfc:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c08:	4a2b      	ldr	r2, [pc, #172]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10d      	bne.n	8002c34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d102      	bne.n	8002c2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c24:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c26:	61bb      	str	r3, [r7, #24]
 8002c28:	e004      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c30:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b0c      	cmp	r3, #12
 8002c38:	d134      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d003      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d003      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0xac>
 8002c50:	e005      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c52:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c54:	617b      	str	r3, [r7, #20]
      break;
 8002c56:	e005      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c58:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c5a:	617b      	str	r3, [r7, #20]
      break;
 8002c5c:	e002      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	617b      	str	r3, [r7, #20]
      break;
 8002c62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c64:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	3301      	adds	r3, #1
 8002c70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	fb02 f203 	mul.w	r2, r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	0e5b      	lsrs	r3, r3, #25
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	3301      	adds	r3, #1
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	080063d8 	.word	0x080063d8
 8002cbc:	00f42400 	.word	0x00f42400
 8002cc0:	007a1200 	.word	0x007a1200

08002cc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000000 	.word	0x20000000

08002cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ce0:	f7ff fff0 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4904      	ldr	r1, [pc, #16]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	080063d0 	.word	0x080063d0

08002d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d0c:	f7ff ffda 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0adb      	lsrs	r3, r3, #11
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4904      	ldr	r1, [pc, #16]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	080063d0 	.word	0x080063d0

08002d34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d40:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d4c:	f7ff fa02 	bl	8002154 <HAL_PWREx_GetVoltageRange>
 8002d50:	6178      	str	r0, [r7, #20]
 8002d52:	e014      	b.n	8002d7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d54:	4b25      	ldr	r3, [pc, #148]	; (8002dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	4a24      	ldr	r2, [pc, #144]	; (8002dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d60:	4b22      	ldr	r3, [pc, #136]	; (8002dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d6c:	f7ff f9f2 	bl	8002154 <HAL_PWREx_GetVoltageRange>
 8002d70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d72:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d84:	d10b      	bne.n	8002d9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b80      	cmp	r3, #128	; 0x80
 8002d8a:	d919      	bls.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2ba0      	cmp	r3, #160	; 0xa0
 8002d90:	d902      	bls.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d92:	2302      	movs	r3, #2
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	e013      	b.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d98:	2301      	movs	r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	e010      	b.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b80      	cmp	r3, #128	; 0x80
 8002da2:	d902      	bls.n	8002daa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002da4:	2303      	movs	r3, #3
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	e00a      	b.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b80      	cmp	r3, #128	; 0x80
 8002dae:	d102      	bne.n	8002db6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002db0:	2302      	movs	r3, #2
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	e004      	b.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b70      	cmp	r3, #112	; 0x70
 8002dba:	d101      	bne.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 0207 	bic.w	r2, r3, #7
 8002dc8:	4909      	ldr	r1, [pc, #36]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dd0:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d001      	beq.n	8002de2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40022000 	.word	0x40022000

08002df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e00:	2300      	movs	r3, #0
 8002e02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d041      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e18:	d02a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e1e:	d824      	bhi.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e24:	d008      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e2a:	d81e      	bhi.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e34:	d010      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e36:	e018      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e38:	4b86      	ldr	r3, [pc, #536]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a85      	ldr	r2, [pc, #532]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e44:	e015      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fabb 	bl	80033c8 <RCCEx_PLLSAI1_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e56:	e00c      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3320      	adds	r3, #32
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fba6 	bl	80035b0 <RCCEx_PLLSAI2_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e68:	e003      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e6e:	e000      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e72:	7cfb      	ldrb	r3, [r7, #19]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e78:	4b76      	ldr	r3, [pc, #472]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e86:	4973      	ldr	r1, [pc, #460]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e8e:	e001      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d041      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ea8:	d02a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002eaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eae:	d824      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eb4:	d008      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002eb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eba:	d81e      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ec6:	e018      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ec8:	4b62      	ldr	r3, [pc, #392]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a61      	ldr	r2, [pc, #388]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ed4:	e015      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fa73 	bl	80033c8 <RCCEx_PLLSAI1_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ee6:	e00c      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3320      	adds	r3, #32
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fb5e 	bl	80035b0 <RCCEx_PLLSAI2_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ef8:	e003      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	74fb      	strb	r3, [r7, #19]
      break;
 8002efe:	e000      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f02:	7cfb      	ldrb	r3, [r7, #19]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f08:	4b52      	ldr	r3, [pc, #328]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f16:	494f      	ldr	r1, [pc, #316]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f1e:	e001      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a0 	beq.w	8003072 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f46:	2300      	movs	r3, #0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00d      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	4b41      	ldr	r3, [pc, #260]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	4a40      	ldr	r2, [pc, #256]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f56:	6593      	str	r3, [r2, #88]	; 0x58
 8002f58:	4b3e      	ldr	r3, [pc, #248]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f64:	2301      	movs	r3, #1
 8002f66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f68:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a3a      	ldr	r2, [pc, #232]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f74:	f7fe fb74 	bl	8001660 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f7a:	e009      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7c:	f7fe fb70 	bl	8001660 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d902      	bls.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	74fb      	strb	r3, [r7, #19]
        break;
 8002f8e:	e005      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f90:	4b31      	ldr	r3, [pc, #196]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ef      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f9c:	7cfb      	ldrb	r3, [r7, #19]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d15c      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fa2:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01f      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d019      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fc0:	4b24      	ldr	r3, [pc, #144]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fcc:	4b21      	ldr	r3, [pc, #132]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	4a20      	ldr	r2, [pc, #128]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	4a1c      	ldr	r2, [pc, #112]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fec:	4a19      	ldr	r2, [pc, #100]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d016      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fb2f 	bl	8001660 <HAL_GetTick>
 8003002:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003004:	e00b      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7fe fb2b 	bl	8001660 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	; 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d902      	bls.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	74fb      	strb	r3, [r7, #19]
            break;
 800301c:	e006      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ec      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800302c:	7cfb      	ldrb	r3, [r7, #19]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003042:	4904      	ldr	r1, [pc, #16]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800304a:	e009      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	74bb      	strb	r3, [r7, #18]
 8003050:	e006      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000
 8003058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003060:	7c7b      	ldrb	r3, [r7, #17]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d105      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003066:	4b9e      	ldr	r3, [pc, #632]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	4a9d      	ldr	r2, [pc, #628]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003070:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800307e:	4b98      	ldr	r3, [pc, #608]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f023 0203 	bic.w	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	4994      	ldr	r1, [pc, #592]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030a0:	4b8f      	ldr	r3, [pc, #572]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f023 020c 	bic.w	r2, r3, #12
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ae:	498c      	ldr	r1, [pc, #560]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030c2:	4b87      	ldr	r3, [pc, #540]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	4983      	ldr	r1, [pc, #524]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030e4:	4b7e      	ldr	r3, [pc, #504]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	497b      	ldr	r1, [pc, #492]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003106:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003114:	4972      	ldr	r1, [pc, #456]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003128:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003136:	496a      	ldr	r1, [pc, #424]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800314a:	4b65      	ldr	r3, [pc, #404]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003150:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003158:	4961      	ldr	r1, [pc, #388]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800316c:	4b5c      	ldr	r3, [pc, #368]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317a:	4959      	ldr	r1, [pc, #356]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800318e:	4b54      	ldr	r3, [pc, #336]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	4950      	ldr	r1, [pc, #320]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031b0:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	4948      	ldr	r1, [pc, #288]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031d2:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	493f      	ldr	r1, [pc, #252]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d028      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f4:	4b3a      	ldr	r3, [pc, #232]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003202:	4937      	ldr	r1, [pc, #220]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800320e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003212:	d106      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003214:	4b32      	ldr	r3, [pc, #200]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4a31      	ldr	r2, [pc, #196]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800321e:	60d3      	str	r3, [r2, #12]
 8003220:	e011      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003226:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800322a:	d10c      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	2101      	movs	r1, #1
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f8c8 	bl	80033c8 <RCCEx_PLLSAI1_Config>
 8003238:	4603      	mov	r3, r0
 800323a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d028      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003252:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003258:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	491f      	ldr	r1, [pc, #124]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003270:	d106      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003272:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800327c:	60d3      	str	r3, [r2, #12]
 800327e:	e011      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	2101      	movs	r1, #1
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f899 	bl	80033c8 <RCCEx_PLLSAI1_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032a0:	7cfb      	ldrb	r3, [r7, #19]
 80032a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d02b      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032be:	4908      	ldr	r1, [pc, #32]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ce:	d109      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a02      	ldr	r2, [pc, #8]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032da:	60d3      	str	r3, [r2, #12]
 80032dc:	e014      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ec:	d10c      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3304      	adds	r3, #4
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f867 	bl	80033c8 <RCCEx_PLLSAI1_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d02f      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003314:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003322:	4928      	ldr	r1, [pc, #160]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800332e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003332:	d10d      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	2102      	movs	r1, #2
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f844 	bl	80033c8 <RCCEx_PLLSAI1_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d014      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	74bb      	strb	r3, [r7, #18]
 800334e:	e011      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003358:	d10c      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3320      	adds	r3, #32
 800335e:	2102      	movs	r1, #2
 8003360:	4618      	mov	r0, r3
 8003362:	f000 f925 	bl	80035b0 <RCCEx_PLLSAI2_Config>
 8003366:	4603      	mov	r3, r0
 8003368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800336a:	7cfb      	ldrb	r3, [r7, #19]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338e:	490d      	ldr	r1, [pc, #52]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b2:	4904      	ldr	r1, [pc, #16]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000

080033c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033d6:	4b75      	ldr	r3, [pc, #468]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d018      	beq.n	8003414 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033e2:	4b72      	ldr	r3, [pc, #456]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0203 	and.w	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d10d      	bne.n	800340e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
       ||
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033fa:	4b6c      	ldr	r3, [pc, #432]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
       ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d047      	beq.n	800349e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
 8003412:	e044      	b.n	800349e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d018      	beq.n	800344e <RCCEx_PLLSAI1_Config+0x86>
 800341c:	2b03      	cmp	r3, #3
 800341e:	d825      	bhi.n	800346c <RCCEx_PLLSAI1_Config+0xa4>
 8003420:	2b01      	cmp	r3, #1
 8003422:	d002      	beq.n	800342a <RCCEx_PLLSAI1_Config+0x62>
 8003424:	2b02      	cmp	r3, #2
 8003426:	d009      	beq.n	800343c <RCCEx_PLLSAI1_Config+0x74>
 8003428:	e020      	b.n	800346c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800342a:	4b60      	ldr	r3, [pc, #384]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d11d      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343a:	e01a      	b.n	8003472 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800343c:	4b5b      	ldr	r3, [pc, #364]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d116      	bne.n	8003476 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800344c:	e013      	b.n	8003476 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800344e:	4b57      	ldr	r3, [pc, #348]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10f      	bne.n	800347a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800345a:	4b54      	ldr	r3, [pc, #336]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800346a:	e006      	b.n	800347a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      break;
 8003470:	e004      	b.n	800347c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003472:	bf00      	nop
 8003474:	e002      	b.n	800347c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003476:	bf00      	nop
 8003478:	e000      	b.n	800347c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800347a:	bf00      	nop
    }

    if(status == HAL_OK)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003482:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6819      	ldr	r1, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	430b      	orrs	r3, r1
 8003498:	4944      	ldr	r1, [pc, #272]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800349a:	4313      	orrs	r3, r2
 800349c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d17d      	bne.n	80035a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034a4:	4b41      	ldr	r3, [pc, #260]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a40      	ldr	r2, [pc, #256]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80034aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b0:	f7fe f8d6 	bl	8001660 <HAL_GetTick>
 80034b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b6:	e009      	b.n	80034cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b8:	f7fe f8d2 	bl	8001660 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d902      	bls.n	80034cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	73fb      	strb	r3, [r7, #15]
        break;
 80034ca:	e005      	b.n	80034d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034cc:	4b37      	ldr	r3, [pc, #220]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ef      	bne.n	80034b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d160      	bne.n	80035a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d111      	bne.n	8003508 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e4:	4b31      	ldr	r3, [pc, #196]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6892      	ldr	r2, [r2, #8]
 80034f4:	0211      	lsls	r1, r2, #8
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68d2      	ldr	r2, [r2, #12]
 80034fa:	0912      	lsrs	r2, r2, #4
 80034fc:	0452      	lsls	r2, r2, #17
 80034fe:	430a      	orrs	r2, r1
 8003500:	492a      	ldr	r1, [pc, #168]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003502:	4313      	orrs	r3, r2
 8003504:	610b      	str	r3, [r1, #16]
 8003506:	e027      	b.n	8003558 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d112      	bne.n	8003534 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800350e:	4b27      	ldr	r3, [pc, #156]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003516:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6892      	ldr	r2, [r2, #8]
 800351e:	0211      	lsls	r1, r2, #8
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6912      	ldr	r2, [r2, #16]
 8003524:	0852      	lsrs	r2, r2, #1
 8003526:	3a01      	subs	r2, #1
 8003528:	0552      	lsls	r2, r2, #21
 800352a:	430a      	orrs	r2, r1
 800352c:	491f      	ldr	r1, [pc, #124]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	610b      	str	r3, [r1, #16]
 8003532:	e011      	b.n	8003558 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800353c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6892      	ldr	r2, [r2, #8]
 8003544:	0211      	lsls	r1, r2, #8
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6952      	ldr	r2, [r2, #20]
 800354a:	0852      	lsrs	r2, r2, #1
 800354c:	3a01      	subs	r2, #1
 800354e:	0652      	lsls	r2, r2, #25
 8003550:	430a      	orrs	r2, r1
 8003552:	4916      	ldr	r1, [pc, #88]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003554:	4313      	orrs	r3, r2
 8003556:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003558:	4b14      	ldr	r3, [pc, #80]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800355e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fe f87c 	bl	8001660 <HAL_GetTick>
 8003568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800356a:	e009      	b.n	8003580 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800356c:	f7fe f878 	bl	8001660 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d902      	bls.n	8003580 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	73fb      	strb	r3, [r7, #15]
          break;
 800357e:	e005      	b.n	800358c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ef      	beq.n	800356c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	4904      	ldr	r1, [pc, #16]	; (80035ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800359c:	4313      	orrs	r3, r2
 800359e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000

080035b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035be:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d018      	beq.n	80035fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035ca:	4b67      	ldr	r3, [pc, #412]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0203 	and.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d10d      	bne.n	80035f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
       ||
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d009      	beq.n	80035f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035e2:	4b61      	ldr	r3, [pc, #388]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
       ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d047      	beq.n	8003686 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
 80035fa:	e044      	b.n	8003686 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d018      	beq.n	8003636 <RCCEx_PLLSAI2_Config+0x86>
 8003604:	2b03      	cmp	r3, #3
 8003606:	d825      	bhi.n	8003654 <RCCEx_PLLSAI2_Config+0xa4>
 8003608:	2b01      	cmp	r3, #1
 800360a:	d002      	beq.n	8003612 <RCCEx_PLLSAI2_Config+0x62>
 800360c:	2b02      	cmp	r3, #2
 800360e:	d009      	beq.n	8003624 <RCCEx_PLLSAI2_Config+0x74>
 8003610:	e020      	b.n	8003654 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003612:	4b55      	ldr	r3, [pc, #340]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d11d      	bne.n	800365a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003622:	e01a      	b.n	800365a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003624:	4b50      	ldr	r3, [pc, #320]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d116      	bne.n	800365e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003634:	e013      	b.n	800365e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003636:	4b4c      	ldr	r3, [pc, #304]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003642:	4b49      	ldr	r3, [pc, #292]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003652:	e006      	b.n	8003662 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      break;
 8003658:	e004      	b.n	8003664 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800365a:	bf00      	nop
 800365c:	e002      	b.n	8003664 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003662:	bf00      	nop
    }

    if(status == HAL_OK)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10d      	bne.n	8003686 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800366a:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	430b      	orrs	r3, r1
 8003680:	4939      	ldr	r1, [pc, #228]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d167      	bne.n	800375c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800368c:	4b36      	ldr	r3, [pc, #216]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a35      	ldr	r2, [pc, #212]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003698:	f7fd ffe2 	bl	8001660 <HAL_GetTick>
 800369c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800369e:	e009      	b.n	80036b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036a0:	f7fd ffde 	bl	8001660 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d902      	bls.n	80036b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	73fb      	strb	r3, [r7, #15]
        break;
 80036b2:	e005      	b.n	80036c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036b4:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ef      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d14a      	bne.n	800375c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d111      	bne.n	80036f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036cc:	4b26      	ldr	r3, [pc, #152]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6892      	ldr	r2, [r2, #8]
 80036dc:	0211      	lsls	r1, r2, #8
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68d2      	ldr	r2, [r2, #12]
 80036e2:	0912      	lsrs	r2, r2, #4
 80036e4:	0452      	lsls	r2, r2, #17
 80036e6:	430a      	orrs	r2, r1
 80036e8:	491f      	ldr	r1, [pc, #124]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	614b      	str	r3, [r1, #20]
 80036ee:	e011      	b.n	8003714 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6892      	ldr	r2, [r2, #8]
 8003700:	0211      	lsls	r1, r2, #8
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6912      	ldr	r2, [r2, #16]
 8003706:	0852      	lsrs	r2, r2, #1
 8003708:	3a01      	subs	r2, #1
 800370a:	0652      	lsls	r2, r2, #25
 800370c:	430a      	orrs	r2, r1
 800370e:	4916      	ldr	r1, [pc, #88]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003710:	4313      	orrs	r3, r2
 8003712:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a13      	ldr	r2, [pc, #76]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800371a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fd ff9e 	bl	8001660 <HAL_GetTick>
 8003724:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003726:	e009      	b.n	800373c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003728:	f7fd ff9a 	bl	8001660 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d902      	bls.n	800373c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	73fb      	strb	r3, [r7, #15]
          break;
 800373a:	e005      	b.n	8003748 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0ef      	beq.n	8003728 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	4904      	ldr	r1, [pc, #16]	; (8003768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003758:	4313      	orrs	r3, r2
 800375a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800375c:	7bfb      	ldrb	r3, [r7, #15]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000

0800376c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e040      	b.n	8003800 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fd fcde 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fc22 	bl	8003ff4 <UART_SetConfig>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e022      	b.n	8003800 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fea0 	bl	8004508 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 ff27 	bl	800464c <UART_CheckIdleState>
 80037fe:	4603      	mov	r3, r0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381c:	2b20      	cmp	r3, #32
 800381e:	f040 8082 	bne.w	8003926 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_UART_Transmit+0x26>
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e07a      	b.n	8003928 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_UART_Transmit+0x38>
 800383c:	2302      	movs	r3, #2
 800383e:	e073      	b.n	8003928 <HAL_UART_Transmit+0x120>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2221      	movs	r2, #33	; 0x21
 8003854:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003856:	f7fd ff03 	bl	8001660 <HAL_GetTick>
 800385a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	88fa      	ldrh	r2, [r7, #6]
 8003860:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	88fa      	ldrh	r2, [r7, #6]
 8003868:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003874:	d108      	bne.n	8003888 <HAL_UART_Transmit+0x80>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d104      	bne.n	8003888 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	e003      	b.n	8003890 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003898:	e02d      	b.n	80038f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	2180      	movs	r1, #128	; 0x80
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 ff1a 	bl	80046de <UART_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e039      	b.n	8003928 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10b      	bne.n	80038d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	881a      	ldrh	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c6:	b292      	uxth	r2, r2
 80038c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	3302      	adds	r3, #2
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	e008      	b.n	80038e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	781a      	ldrb	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	b292      	uxth	r2, r2
 80038dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3301      	adds	r3, #1
 80038e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1cb      	bne.n	800389a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2200      	movs	r2, #0
 800390a:	2140      	movs	r1, #64	; 0x40
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 fee6 	bl	80046de <UART_WaitOnFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e005      	b.n	8003928 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	e000      	b.n	8003928 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003926:	2302      	movs	r3, #2
  }
}
 8003928:	4618      	mov	r0, r3
 800392a:	3720      	adds	r7, #32
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	; 0x28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	4613      	mov	r3, r2
 800393c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003942:	2b20      	cmp	r3, #32
 8003944:	d142      	bne.n	80039cc <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_UART_Receive_DMA+0x22>
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e03b      	b.n	80039ce <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_UART_Receive_DMA+0x34>
 8003960:	2302      	movs	r3, #2
 8003962:	e034      	b.n	80039ce <HAL_UART_Receive_DMA+0x9e>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_UART_Receive_DMA+0xa8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d01f      	beq.n	80039bc <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d018      	beq.n	80039bc <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	613b      	str	r3, [r7, #16]
   return(result);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	461a      	mov	r2, r3
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	623b      	str	r3, [r7, #32]
 80039aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	69f9      	ldr	r1, [r7, #28]
 80039ae:	6a3a      	ldr	r2, [r7, #32]
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e6      	bne.n	800398a <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	461a      	mov	r2, r3
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 ff50 	bl	8004868 <UART_Start_Receive_DMA>
 80039c8:	4603      	mov	r3, r0
 80039ca:	e000      	b.n	80039ce <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3728      	adds	r7, #40	; 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40008000 	.word	0x40008000

080039dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b0ba      	sub	sp, #232	; 0xe8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a06:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d115      	bne.n	8003a44 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00f      	beq.n	8003a44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d009      	beq.n	8003a44 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 82a6 	beq.w	8003f86 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4798      	blx	r3
      }
      return;
 8003a42:	e2a0      	b.n	8003f86 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003a44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8117 	beq.w	8003c7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a5e:	4b85      	ldr	r3, [pc, #532]	; (8003c74 <HAL_UART_IRQHandler+0x298>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 810a 	beq.w	8003c7c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d011      	beq.n	8003a98 <HAL_UART_IRQHandler+0xbc>
 8003a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00b      	beq.n	8003a98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2201      	movs	r2, #1
 8003a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a8e:	f043 0201 	orr.w	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d011      	beq.n	8003ac8 <HAL_UART_IRQHandler+0xec>
 8003aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00b      	beq.n	8003ac8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003abe:	f043 0204 	orr.w	r2, r3, #4
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d011      	beq.n	8003af8 <HAL_UART_IRQHandler+0x11c>
 8003ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aee:	f043 0202 	orr.w	r2, r3, #2
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d017      	beq.n	8003b34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d105      	bne.n	8003b1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00b      	beq.n	8003b34 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2208      	movs	r2, #8
 8003b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b2a:	f043 0208 	orr.w	r2, r3, #8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d012      	beq.n	8003b66 <HAL_UART_IRQHandler+0x18a>
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00c      	beq.n	8003b66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 820c 	beq.w	8003f8a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00d      	beq.n	8003b9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ba0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b40      	cmp	r3, #64	; 0x40
 8003bb0:	d005      	beq.n	8003bbe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d04f      	beq.n	8003c5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 ff1e 	bl	8004a00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d141      	bne.n	8003c56 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1d9      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d013      	beq.n	8003c4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <HAL_UART_IRQHandler+0x29c>)
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd ffac 	bl	8001b90 <HAL_DMA_Abort_IT>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d017      	beq.n	8003c6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	e00f      	b.n	8003c6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f9ba 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	e00b      	b.n	8003c6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f9b6 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	e007      	b.n	8003c6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9b2 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003c6c:	e18d      	b.n	8003f8a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6e:	bf00      	nop
    return;
 8003c70:	e18b      	b.n	8003f8a <HAL_UART_IRQHandler+0x5ae>
 8003c72:	bf00      	nop
 8003c74:	04000120 	.word	0x04000120
 8003c78:	08004c9f 	.word	0x08004c9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 8146 	bne.w	8003f12 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 813f 	beq.w	8003f12 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8138 	beq.w	8003f12 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb4:	2b40      	cmp	r3, #64	; 0x40
 8003cb6:	f040 80b4 	bne.w	8003e22 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 815f 	beq.w	8003f8e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	f080 8157 	bcs.w	8003f8e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ce6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 8085 	bne.w	8003e06 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1da      	bne.n	8003cfc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3308      	adds	r3, #8
 8003d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e1      	bne.n	8003d46 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3308      	adds	r3, #8
 8003d88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003da6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003da8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e3      	bne.n	8003d82 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd6:	f023 0310 	bic.w	r3, r3, #16
 8003dda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003de8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e4      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fe87 	bl	8001b14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8de 	bl	8003fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e20:	e0b5      	b.n	8003f8e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80a7 	beq.w	8003f92 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80a2 	beq.w	8003f92 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e70:	647b      	str	r3, [r7, #68]	; 0x44
 8003e72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e4      	bne.n	8003e4e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3308      	adds	r3, #8
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	e853 3f00 	ldrex	r3, [r3]
 8003e92:	623b      	str	r3, [r7, #32]
   return(result);
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ea8:	633a      	str	r2, [r7, #48]	; 0x30
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e3      	bne.n	8003e84 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0310 	bic.w	r3, r3, #16
 8003ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	69b9      	ldr	r1, [r7, #24]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	617b      	str	r3, [r7, #20]
   return(result);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e4      	bne.n	8003ece <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f866 	bl	8003fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f10:	e03f      	b.n	8003f92 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00e      	beq.n	8003f3c <HAL_UART_IRQHandler+0x560>
 8003f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d008      	beq.n	8003f3c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fef2 	bl	8004d1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f3a:	e02d      	b.n	8003f98 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00e      	beq.n	8003f66 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01c      	beq.n	8003f96 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
    }
    return;
 8003f64:	e017      	b.n	8003f96 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d012      	beq.n	8003f98 <HAL_UART_IRQHandler+0x5bc>
 8003f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00c      	beq.n	8003f98 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fea3 	bl	8004cca <UART_EndTransmit_IT>
    return;
 8003f84:	e008      	b.n	8003f98 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f86:	bf00      	nop
 8003f88:	e006      	b.n	8003f98 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f8a:	bf00      	nop
 8003f8c:	e004      	b.n	8003f98 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f8e:	bf00      	nop
 8003f90:	e002      	b.n	8003f98 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f92:	bf00      	nop
 8003f94:	e000      	b.n	8003f98 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f96:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f98:	37e8      	adds	r7, #232	; 0xe8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop

08003fa0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff4:	b5b0      	push	{r4, r5, r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	4313      	orrs	r3, r2
 8004016:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4bad      	ldr	r3, [pc, #692]	; (80042d4 <UART_SetConfig+0x2e0>)
 8004020:	4013      	ands	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	69f9      	ldr	r1, [r7, #28]
 8004028:	430b      	orrs	r3, r1
 800402a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4aa2      	ldr	r2, [pc, #648]	; (80042d8 <UART_SetConfig+0x2e4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d004      	beq.n	800405c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	4313      	orrs	r3, r2
 800405a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a99      	ldr	r2, [pc, #612]	; (80042dc <UART_SetConfig+0x2e8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d121      	bne.n	80040be <UART_SetConfig+0xca>
 800407a:	4b99      	ldr	r3, [pc, #612]	; (80042e0 <UART_SetConfig+0x2ec>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b03      	cmp	r3, #3
 8004086:	d817      	bhi.n	80040b8 <UART_SetConfig+0xc4>
 8004088:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <UART_SetConfig+0x9c>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040ad 	.word	0x080040ad
 8004098:	080040a7 	.word	0x080040a7
 800409c:	080040b3 	.word	0x080040b3
 80040a0:	2301      	movs	r3, #1
 80040a2:	76fb      	strb	r3, [r7, #27]
 80040a4:	e0e7      	b.n	8004276 <UART_SetConfig+0x282>
 80040a6:	2302      	movs	r3, #2
 80040a8:	76fb      	strb	r3, [r7, #27]
 80040aa:	e0e4      	b.n	8004276 <UART_SetConfig+0x282>
 80040ac:	2304      	movs	r3, #4
 80040ae:	76fb      	strb	r3, [r7, #27]
 80040b0:	e0e1      	b.n	8004276 <UART_SetConfig+0x282>
 80040b2:	2308      	movs	r3, #8
 80040b4:	76fb      	strb	r3, [r7, #27]
 80040b6:	e0de      	b.n	8004276 <UART_SetConfig+0x282>
 80040b8:	2310      	movs	r3, #16
 80040ba:	76fb      	strb	r3, [r7, #27]
 80040bc:	e0db      	b.n	8004276 <UART_SetConfig+0x282>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a88      	ldr	r2, [pc, #544]	; (80042e4 <UART_SetConfig+0x2f0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d132      	bne.n	800412e <UART_SetConfig+0x13a>
 80040c8:	4b85      	ldr	r3, [pc, #532]	; (80042e0 <UART_SetConfig+0x2ec>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d828      	bhi.n	8004128 <UART_SetConfig+0x134>
 80040d6:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <UART_SetConfig+0xe8>)
 80040d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040dc:	08004111 	.word	0x08004111
 80040e0:	08004129 	.word	0x08004129
 80040e4:	08004129 	.word	0x08004129
 80040e8:	08004129 	.word	0x08004129
 80040ec:	0800411d 	.word	0x0800411d
 80040f0:	08004129 	.word	0x08004129
 80040f4:	08004129 	.word	0x08004129
 80040f8:	08004129 	.word	0x08004129
 80040fc:	08004117 	.word	0x08004117
 8004100:	08004129 	.word	0x08004129
 8004104:	08004129 	.word	0x08004129
 8004108:	08004129 	.word	0x08004129
 800410c:	08004123 	.word	0x08004123
 8004110:	2300      	movs	r3, #0
 8004112:	76fb      	strb	r3, [r7, #27]
 8004114:	e0af      	b.n	8004276 <UART_SetConfig+0x282>
 8004116:	2302      	movs	r3, #2
 8004118:	76fb      	strb	r3, [r7, #27]
 800411a:	e0ac      	b.n	8004276 <UART_SetConfig+0x282>
 800411c:	2304      	movs	r3, #4
 800411e:	76fb      	strb	r3, [r7, #27]
 8004120:	e0a9      	b.n	8004276 <UART_SetConfig+0x282>
 8004122:	2308      	movs	r3, #8
 8004124:	76fb      	strb	r3, [r7, #27]
 8004126:	e0a6      	b.n	8004276 <UART_SetConfig+0x282>
 8004128:	2310      	movs	r3, #16
 800412a:	76fb      	strb	r3, [r7, #27]
 800412c:	e0a3      	b.n	8004276 <UART_SetConfig+0x282>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a6d      	ldr	r2, [pc, #436]	; (80042e8 <UART_SetConfig+0x2f4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d120      	bne.n	800417a <UART_SetConfig+0x186>
 8004138:	4b69      	ldr	r3, [pc, #420]	; (80042e0 <UART_SetConfig+0x2ec>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004142:	2b30      	cmp	r3, #48	; 0x30
 8004144:	d013      	beq.n	800416e <UART_SetConfig+0x17a>
 8004146:	2b30      	cmp	r3, #48	; 0x30
 8004148:	d814      	bhi.n	8004174 <UART_SetConfig+0x180>
 800414a:	2b20      	cmp	r3, #32
 800414c:	d009      	beq.n	8004162 <UART_SetConfig+0x16e>
 800414e:	2b20      	cmp	r3, #32
 8004150:	d810      	bhi.n	8004174 <UART_SetConfig+0x180>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <UART_SetConfig+0x168>
 8004156:	2b10      	cmp	r3, #16
 8004158:	d006      	beq.n	8004168 <UART_SetConfig+0x174>
 800415a:	e00b      	b.n	8004174 <UART_SetConfig+0x180>
 800415c:	2300      	movs	r3, #0
 800415e:	76fb      	strb	r3, [r7, #27]
 8004160:	e089      	b.n	8004276 <UART_SetConfig+0x282>
 8004162:	2302      	movs	r3, #2
 8004164:	76fb      	strb	r3, [r7, #27]
 8004166:	e086      	b.n	8004276 <UART_SetConfig+0x282>
 8004168:	2304      	movs	r3, #4
 800416a:	76fb      	strb	r3, [r7, #27]
 800416c:	e083      	b.n	8004276 <UART_SetConfig+0x282>
 800416e:	2308      	movs	r3, #8
 8004170:	76fb      	strb	r3, [r7, #27]
 8004172:	e080      	b.n	8004276 <UART_SetConfig+0x282>
 8004174:	2310      	movs	r3, #16
 8004176:	76fb      	strb	r3, [r7, #27]
 8004178:	e07d      	b.n	8004276 <UART_SetConfig+0x282>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a5b      	ldr	r2, [pc, #364]	; (80042ec <UART_SetConfig+0x2f8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d120      	bne.n	80041c6 <UART_SetConfig+0x1d2>
 8004184:	4b56      	ldr	r3, [pc, #344]	; (80042e0 <UART_SetConfig+0x2ec>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800418e:	2bc0      	cmp	r3, #192	; 0xc0
 8004190:	d013      	beq.n	80041ba <UART_SetConfig+0x1c6>
 8004192:	2bc0      	cmp	r3, #192	; 0xc0
 8004194:	d814      	bhi.n	80041c0 <UART_SetConfig+0x1cc>
 8004196:	2b80      	cmp	r3, #128	; 0x80
 8004198:	d009      	beq.n	80041ae <UART_SetConfig+0x1ba>
 800419a:	2b80      	cmp	r3, #128	; 0x80
 800419c:	d810      	bhi.n	80041c0 <UART_SetConfig+0x1cc>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <UART_SetConfig+0x1b4>
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d006      	beq.n	80041b4 <UART_SetConfig+0x1c0>
 80041a6:	e00b      	b.n	80041c0 <UART_SetConfig+0x1cc>
 80041a8:	2300      	movs	r3, #0
 80041aa:	76fb      	strb	r3, [r7, #27]
 80041ac:	e063      	b.n	8004276 <UART_SetConfig+0x282>
 80041ae:	2302      	movs	r3, #2
 80041b0:	76fb      	strb	r3, [r7, #27]
 80041b2:	e060      	b.n	8004276 <UART_SetConfig+0x282>
 80041b4:	2304      	movs	r3, #4
 80041b6:	76fb      	strb	r3, [r7, #27]
 80041b8:	e05d      	b.n	8004276 <UART_SetConfig+0x282>
 80041ba:	2308      	movs	r3, #8
 80041bc:	76fb      	strb	r3, [r7, #27]
 80041be:	e05a      	b.n	8004276 <UART_SetConfig+0x282>
 80041c0:	2310      	movs	r3, #16
 80041c2:	76fb      	strb	r3, [r7, #27]
 80041c4:	e057      	b.n	8004276 <UART_SetConfig+0x282>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a49      	ldr	r2, [pc, #292]	; (80042f0 <UART_SetConfig+0x2fc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d125      	bne.n	800421c <UART_SetConfig+0x228>
 80041d0:	4b43      	ldr	r3, [pc, #268]	; (80042e0 <UART_SetConfig+0x2ec>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041de:	d017      	beq.n	8004210 <UART_SetConfig+0x21c>
 80041e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e4:	d817      	bhi.n	8004216 <UART_SetConfig+0x222>
 80041e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ea:	d00b      	beq.n	8004204 <UART_SetConfig+0x210>
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f0:	d811      	bhi.n	8004216 <UART_SetConfig+0x222>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <UART_SetConfig+0x20a>
 80041f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fa:	d006      	beq.n	800420a <UART_SetConfig+0x216>
 80041fc:	e00b      	b.n	8004216 <UART_SetConfig+0x222>
 80041fe:	2300      	movs	r3, #0
 8004200:	76fb      	strb	r3, [r7, #27]
 8004202:	e038      	b.n	8004276 <UART_SetConfig+0x282>
 8004204:	2302      	movs	r3, #2
 8004206:	76fb      	strb	r3, [r7, #27]
 8004208:	e035      	b.n	8004276 <UART_SetConfig+0x282>
 800420a:	2304      	movs	r3, #4
 800420c:	76fb      	strb	r3, [r7, #27]
 800420e:	e032      	b.n	8004276 <UART_SetConfig+0x282>
 8004210:	2308      	movs	r3, #8
 8004212:	76fb      	strb	r3, [r7, #27]
 8004214:	e02f      	b.n	8004276 <UART_SetConfig+0x282>
 8004216:	2310      	movs	r3, #16
 8004218:	76fb      	strb	r3, [r7, #27]
 800421a:	e02c      	b.n	8004276 <UART_SetConfig+0x282>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a2d      	ldr	r2, [pc, #180]	; (80042d8 <UART_SetConfig+0x2e4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d125      	bne.n	8004272 <UART_SetConfig+0x27e>
 8004226:	4b2e      	ldr	r3, [pc, #184]	; (80042e0 <UART_SetConfig+0x2ec>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004234:	d017      	beq.n	8004266 <UART_SetConfig+0x272>
 8004236:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800423a:	d817      	bhi.n	800426c <UART_SetConfig+0x278>
 800423c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004240:	d00b      	beq.n	800425a <UART_SetConfig+0x266>
 8004242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004246:	d811      	bhi.n	800426c <UART_SetConfig+0x278>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <UART_SetConfig+0x260>
 800424c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004250:	d006      	beq.n	8004260 <UART_SetConfig+0x26c>
 8004252:	e00b      	b.n	800426c <UART_SetConfig+0x278>
 8004254:	2300      	movs	r3, #0
 8004256:	76fb      	strb	r3, [r7, #27]
 8004258:	e00d      	b.n	8004276 <UART_SetConfig+0x282>
 800425a:	2302      	movs	r3, #2
 800425c:	76fb      	strb	r3, [r7, #27]
 800425e:	e00a      	b.n	8004276 <UART_SetConfig+0x282>
 8004260:	2304      	movs	r3, #4
 8004262:	76fb      	strb	r3, [r7, #27]
 8004264:	e007      	b.n	8004276 <UART_SetConfig+0x282>
 8004266:	2308      	movs	r3, #8
 8004268:	76fb      	strb	r3, [r7, #27]
 800426a:	e004      	b.n	8004276 <UART_SetConfig+0x282>
 800426c:	2310      	movs	r3, #16
 800426e:	76fb      	strb	r3, [r7, #27]
 8004270:	e001      	b.n	8004276 <UART_SetConfig+0x282>
 8004272:	2310      	movs	r3, #16
 8004274:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <UART_SetConfig+0x2e4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	f040 8087 	bne.w	8004390 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004282:	7efb      	ldrb	r3, [r7, #27]
 8004284:	2b08      	cmp	r3, #8
 8004286:	d837      	bhi.n	80042f8 <UART_SetConfig+0x304>
 8004288:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <UART_SetConfig+0x29c>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042b5 	.word	0x080042b5
 8004294:	080042f9 	.word	0x080042f9
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042f9 	.word	0x080042f9
 80042a0:	080042c3 	.word	0x080042c3
 80042a4:	080042f9 	.word	0x080042f9
 80042a8:	080042f9 	.word	0x080042f9
 80042ac:	080042f9 	.word	0x080042f9
 80042b0:	080042cb 	.word	0x080042cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b4:	f7fe fd12 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 80042b8:	6178      	str	r0, [r7, #20]
        break;
 80042ba:	e022      	b.n	8004302 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042bc:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <UART_SetConfig+0x300>)
 80042be:	617b      	str	r3, [r7, #20]
        break;
 80042c0:	e01f      	b.n	8004302 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c2:	f7fe fc73 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 80042c6:	6178      	str	r0, [r7, #20]
        break;
 80042c8:	e01b      	b.n	8004302 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ce:	617b      	str	r3, [r7, #20]
        break;
 80042d0:	e017      	b.n	8004302 <UART_SetConfig+0x30e>
 80042d2:	bf00      	nop
 80042d4:	efff69f3 	.word	0xefff69f3
 80042d8:	40008000 	.word	0x40008000
 80042dc:	40013800 	.word	0x40013800
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40004400 	.word	0x40004400
 80042e8:	40004800 	.word	0x40004800
 80042ec:	40004c00 	.word	0x40004c00
 80042f0:	40005000 	.word	0x40005000
 80042f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	76bb      	strb	r3, [r7, #26]
        break;
 8004300:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80f1 	beq.w	80044ec <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	4413      	add	r3, r2
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	429a      	cmp	r2, r3
 8004318:	d305      	bcc.n	8004326 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	429a      	cmp	r2, r3
 8004324:	d902      	bls.n	800432c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	76bb      	strb	r3, [r7, #26]
 800432a:	e0df      	b.n	80044ec <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	4618      	mov	r0, r3
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	020b      	lsls	r3, r1, #8
 800433e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004342:	0202      	lsls	r2, r0, #8
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	6849      	ldr	r1, [r1, #4]
 8004348:	0849      	lsrs	r1, r1, #1
 800434a:	4608      	mov	r0, r1
 800434c:	f04f 0100 	mov.w	r1, #0
 8004350:	1814      	adds	r4, r2, r0
 8004352:	eb43 0501 	adc.w	r5, r3, r1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	461a      	mov	r2, r3
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	4620      	mov	r0, r4
 8004362:	4629      	mov	r1, r5
 8004364:	f7fb ff8c 	bl	8000280 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4613      	mov	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004376:	d308      	bcc.n	800438a <UART_SetConfig+0x396>
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800437e:	d204      	bcs.n	800438a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	60da      	str	r2, [r3, #12]
 8004388:	e0b0      	b.n	80044ec <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	76bb      	strb	r3, [r7, #26]
 800438e:	e0ad      	b.n	80044ec <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004398:	d15b      	bne.n	8004452 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800439a:	7efb      	ldrb	r3, [r7, #27]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d828      	bhi.n	80043f2 <UART_SetConfig+0x3fe>
 80043a0:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <UART_SetConfig+0x3b4>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043cd 	.word	0x080043cd
 80043ac:	080043d5 	.word	0x080043d5
 80043b0:	080043dd 	.word	0x080043dd
 80043b4:	080043f3 	.word	0x080043f3
 80043b8:	080043e3 	.word	0x080043e3
 80043bc:	080043f3 	.word	0x080043f3
 80043c0:	080043f3 	.word	0x080043f3
 80043c4:	080043f3 	.word	0x080043f3
 80043c8:	080043eb 	.word	0x080043eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043cc:	f7fe fc86 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 80043d0:	6178      	str	r0, [r7, #20]
        break;
 80043d2:	e013      	b.n	80043fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043d4:	f7fe fc98 	bl	8002d08 <HAL_RCC_GetPCLK2Freq>
 80043d8:	6178      	str	r0, [r7, #20]
        break;
 80043da:	e00f      	b.n	80043fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043dc:	4b49      	ldr	r3, [pc, #292]	; (8004504 <UART_SetConfig+0x510>)
 80043de:	617b      	str	r3, [r7, #20]
        break;
 80043e0:	e00c      	b.n	80043fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043e2:	f7fe fbe3 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 80043e6:	6178      	str	r0, [r7, #20]
        break;
 80043e8:	e008      	b.n	80043fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ee:	617b      	str	r3, [r7, #20]
        break;
 80043f0:	e004      	b.n	80043fc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	76bb      	strb	r3, [r7, #26]
        break;
 80043fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d074      	beq.n	80044ec <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	005a      	lsls	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	441a      	add	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	2b0f      	cmp	r3, #15
 800441c:	d916      	bls.n	800444c <UART_SetConfig+0x458>
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004424:	d212      	bcs.n	800444c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	b29b      	uxth	r3, r3
 800442a:	f023 030f 	bic.w	r3, r3, #15
 800442e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	085b      	lsrs	r3, r3, #1
 8004434:	b29b      	uxth	r3, r3
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	b29a      	uxth	r2, r3
 800443c:	89fb      	ldrh	r3, [r7, #14]
 800443e:	4313      	orrs	r3, r2
 8004440:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	89fa      	ldrh	r2, [r7, #14]
 8004448:	60da      	str	r2, [r3, #12]
 800444a:	e04f      	b.n	80044ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	76bb      	strb	r3, [r7, #26]
 8004450:	e04c      	b.n	80044ec <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004452:	7efb      	ldrb	r3, [r7, #27]
 8004454:	2b08      	cmp	r3, #8
 8004456:	d828      	bhi.n	80044aa <UART_SetConfig+0x4b6>
 8004458:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <UART_SetConfig+0x46c>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004485 	.word	0x08004485
 8004464:	0800448d 	.word	0x0800448d
 8004468:	08004495 	.word	0x08004495
 800446c:	080044ab 	.word	0x080044ab
 8004470:	0800449b 	.word	0x0800449b
 8004474:	080044ab 	.word	0x080044ab
 8004478:	080044ab 	.word	0x080044ab
 800447c:	080044ab 	.word	0x080044ab
 8004480:	080044a3 	.word	0x080044a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004484:	f7fe fc2a 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 8004488:	6178      	str	r0, [r7, #20]
        break;
 800448a:	e013      	b.n	80044b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800448c:	f7fe fc3c 	bl	8002d08 <HAL_RCC_GetPCLK2Freq>
 8004490:	6178      	str	r0, [r7, #20]
        break;
 8004492:	e00f      	b.n	80044b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004494:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <UART_SetConfig+0x510>)
 8004496:	617b      	str	r3, [r7, #20]
        break;
 8004498:	e00c      	b.n	80044b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449a:	f7fe fb87 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 800449e:	6178      	str	r0, [r7, #20]
        break;
 80044a0:	e008      	b.n	80044b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a6:	617b      	str	r3, [r7, #20]
        break;
 80044a8:	e004      	b.n	80044b4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	76bb      	strb	r3, [r7, #26]
        break;
 80044b2:	bf00      	nop
    }

    if (pclk != 0U)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d018      	beq.n	80044ec <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	085a      	lsrs	r2, r3, #1
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	441a      	add	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b0f      	cmp	r3, #15
 80044d2:	d909      	bls.n	80044e8 <UART_SetConfig+0x4f4>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044da:	d205      	bcs.n	80044e8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	e001      	b.n	80044ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bdb0      	pop	{r4, r5, r7, pc}
 8004502:	bf00      	nop
 8004504:	00f42400 	.word	0x00f42400

08004508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01a      	beq.n	800461e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004606:	d10a      	bne.n	800461e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  }
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af02      	add	r7, sp, #8
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800465c:	f7fd f800 	bl	8001660 <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b08      	cmp	r3, #8
 800466e:	d10e      	bne.n	800468e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f82d 	bl	80046de <UART_WaitOnFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e023      	b.n	80046d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b04      	cmp	r3, #4
 800469a:	d10e      	bne.n	80046ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800469c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f817 	bl	80046de <UART_WaitOnFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e00d      	b.n	80046d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b09c      	sub	sp, #112	; 0x70
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ee:	e0a5      	b.n	800483c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	f000 80a1 	beq.w	800483c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fa:	f7fc ffb1 	bl	8001660 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004706:	429a      	cmp	r2, r3
 8004708:	d302      	bcc.n	8004710 <UART_WaitOnFlagUntilTimeout+0x32>
 800470a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800470c:	2b00      	cmp	r3, #0
 800470e:	d13e      	bne.n	800478e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800471e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004720:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004724:	667b      	str	r3, [r7, #100]	; 0x64
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800472e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004730:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004734:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800473c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e6      	bne.n	8004710 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3308      	adds	r3, #8
 8004748:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	663b      	str	r3, [r7, #96]	; 0x60
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3308      	adds	r3, #8
 8004760:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004762:	64ba      	str	r2, [r7, #72]	; 0x48
 8004764:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e5      	bne.n	8004742 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e067      	b.n	800485e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d04f      	beq.n	800483c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047aa:	d147      	bne.n	800483c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
 80047d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e6      	bne.n	80047b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	613b      	str	r3, [r7, #16]
   return(result);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004808:	623a      	str	r2, [r7, #32]
 800480a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	69f9      	ldr	r1, [r7, #28]
 800480e:	6a3a      	ldr	r2, [r7, #32]
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	61bb      	str	r3, [r7, #24]
   return(result);
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e5      	bne.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e010      	b.n	800485e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69da      	ldr	r2, [r3, #28]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4013      	ands	r3, r2
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	429a      	cmp	r2, r3
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	429a      	cmp	r2, r3
 8004858:	f43f af4a 	beq.w	80046f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3770      	adds	r7, #112	; 0x70
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b096      	sub	sp, #88	; 0x58
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	88fa      	ldrh	r2, [r7, #6]
 8004880:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2222      	movs	r2, #34	; 0x22
 8004890:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	2b00      	cmp	r3, #0
 8004898:	d02b      	beq.n	80048f2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	4a42      	ldr	r2, [pc, #264]	; (80049a8 <UART_Start_Receive_DMA+0x140>)
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	4a41      	ldr	r2, [pc, #260]	; (80049ac <UART_Start_Receive_DMA+0x144>)
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	4a40      	ldr	r2, [pc, #256]	; (80049b0 <UART_Start_Receive_DMA+0x148>)
 80048b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	2200      	movs	r2, #0
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3324      	adds	r3, #36	; 0x24
 80048c4:	4619      	mov	r1, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	461a      	mov	r2, r3
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	f7fd f8c1 	bl	8001a54 <HAL_DMA_Start_IT>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00c      	beq.n	80048f2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2210      	movs	r2, #16
 80048dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e055      	b.n	800499e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d018      	beq.n	8004934 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004916:	657b      	str	r3, [r7, #84]	; 0x54
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004920:	64bb      	str	r3, [r7, #72]	; 0x48
 8004922:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800492e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e6      	bne.n	8004902 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3308      	adds	r3, #8
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	653b      	str	r3, [r7, #80]	; 0x50
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3308      	adds	r3, #8
 8004952:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004954:	637a      	str	r2, [r7, #52]	; 0x34
 8004956:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800495a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e5      	bne.n	8004934 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3308      	adds	r3, #8
 800496e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	613b      	str	r3, [r7, #16]
   return(result);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3308      	adds	r3, #8
 8004986:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004988:	623a      	str	r2, [r7, #32]
 800498a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	69f9      	ldr	r1, [r7, #28]
 800498e:	6a3a      	ldr	r2, [r7, #32]
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	61bb      	str	r3, [r7, #24]
   return(result);
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e5      	bne.n	8004968 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3758      	adds	r7, #88	; 0x58
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	08004ac7 	.word	0x08004ac7
 80049ac:	08004beb 	.word	0x08004beb
 80049b0:	08004c23 	.word	0x08004c23

080049b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	; 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	61bb      	str	r3, [r7, #24]
 80049dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	6979      	ldr	r1, [r7, #20]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	613b      	str	r3, [r7, #16]
   return(result);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e6      	bne.n	80049bc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	679a      	str	r2, [r3, #120]	; 0x78
}
 80049f4:	bf00      	nop
 80049f6:	3724      	adds	r7, #36	; 0x24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b095      	sub	sp, #84	; 0x54
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	e853 3f00 	ldrex	r3, [r3]
 8004a14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a26:	643b      	str	r3, [r7, #64]	; 0x40
 8004a28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e6      	bne.n	8004a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3308      	adds	r3, #8
 8004a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e5      	bne.n	8004a3a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d118      	bne.n	8004aa8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f023 0310 	bic.w	r3, r3, #16
 8004a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6979      	ldr	r1, [r7, #20]
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e6      	bne.n	8004a76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004aba:	bf00      	nop
 8004abc:	3754      	adds	r7, #84	; 0x54
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b09c      	sub	sp, #112	; 0x70
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d170      	bne.n	8004bc4 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004afe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b08:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e6      	bne.n	8004aea <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3308      	adds	r3, #8
 8004b22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	667b      	str	r3, [r7, #100]	; 0x64
 8004b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3308      	adds	r3, #8
 8004b3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b3c:	647a      	str	r2, [r7, #68]	; 0x44
 8004b3e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e5      	bne.n	8004b1c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3308      	adds	r3, #8
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b66:	663b      	str	r3, [r7, #96]	; 0x60
 8004b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b70:	633a      	str	r2, [r7, #48]	; 0x30
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e5      	bne.n	8004b50 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b86:	2220      	movs	r2, #32
 8004b88:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d118      	bne.n	8004bc4 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0310 	bic.w	r3, r3, #16
 8004ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	69b9      	ldr	r1, [r7, #24]
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e6      	bne.n	8004b92 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d107      	bne.n	8004bdc <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004bd6:	f7ff fa01 	bl	8003fdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bda:	e002      	b.n	8004be2 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004bdc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004bde:	f7fb fccb 	bl	8000578 <HAL_UART_RxCpltCallback>
}
 8004be2:	bf00      	nop
 8004be4:	3770      	adds	r7, #112	; 0x70
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d109      	bne.n	8004c14 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f7ff f9e5 	bl	8003fdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c12:	e002      	b.n	8004c1a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f7ff f9cd 	bl	8003fb4 <HAL_UART_RxHalfCpltCallback>
}
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b086      	sub	sp, #24
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c34:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c46:	2b80      	cmp	r3, #128	; 0x80
 8004c48:	d109      	bne.n	8004c5e <UART_DMAError+0x3c>
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b21      	cmp	r3, #33	; 0x21
 8004c4e:	d106      	bne.n	8004c5e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004c58:	6978      	ldr	r0, [r7, #20]
 8004c5a:	f7ff feab 	bl	80049b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d109      	bne.n	8004c80 <UART_DMAError+0x5e>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b22      	cmp	r3, #34	; 0x22
 8004c70:	d106      	bne.n	8004c80 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004c7a:	6978      	ldr	r0, [r7, #20]
 8004c7c:	f7ff fec0 	bl	8004a00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c86:	f043 0210 	orr.w	r2, r3, #16
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c90:	6978      	ldr	r0, [r7, #20]
 8004c92:	f7ff f999 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c96:	bf00      	nop
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff f983 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b088      	sub	sp, #32
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	6979      	ldr	r1, [r7, #20]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e6      	bne.n	8004cd2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff f945 	bl	8003fa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d16:	bf00      	nop
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <__errno>:
 8004d34:	4b01      	ldr	r3, [pc, #4]	; (8004d3c <__errno+0x8>)
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	2000000c 	.word	0x2000000c

08004d40 <__libc_init_array>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4d0d      	ldr	r5, [pc, #52]	; (8004d78 <__libc_init_array+0x38>)
 8004d44:	4c0d      	ldr	r4, [pc, #52]	; (8004d7c <__libc_init_array+0x3c>)
 8004d46:	1b64      	subs	r4, r4, r5
 8004d48:	10a4      	asrs	r4, r4, #2
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	42a6      	cmp	r6, r4
 8004d4e:	d109      	bne.n	8004d64 <__libc_init_array+0x24>
 8004d50:	4d0b      	ldr	r5, [pc, #44]	; (8004d80 <__libc_init_array+0x40>)
 8004d52:	4c0c      	ldr	r4, [pc, #48]	; (8004d84 <__libc_init_array+0x44>)
 8004d54:	f001 fa50 	bl	80061f8 <_init>
 8004d58:	1b64      	subs	r4, r4, r5
 8004d5a:	10a4      	asrs	r4, r4, #2
 8004d5c:	2600      	movs	r6, #0
 8004d5e:	42a6      	cmp	r6, r4
 8004d60:	d105      	bne.n	8004d6e <__libc_init_array+0x2e>
 8004d62:	bd70      	pop	{r4, r5, r6, pc}
 8004d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d68:	4798      	blx	r3
 8004d6a:	3601      	adds	r6, #1
 8004d6c:	e7ee      	b.n	8004d4c <__libc_init_array+0xc>
 8004d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d72:	4798      	blx	r3
 8004d74:	3601      	adds	r6, #1
 8004d76:	e7f2      	b.n	8004d5e <__libc_init_array+0x1e>
 8004d78:	0800655c 	.word	0x0800655c
 8004d7c:	0800655c 	.word	0x0800655c
 8004d80:	0800655c 	.word	0x0800655c
 8004d84:	08006560 	.word	0x08006560

08004d88 <memset>:
 8004d88:	4402      	add	r2, r0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d100      	bne.n	8004d92 <memset+0xa>
 8004d90:	4770      	bx	lr
 8004d92:	f803 1b01 	strb.w	r1, [r3], #1
 8004d96:	e7f9      	b.n	8004d8c <memset+0x4>

08004d98 <siprintf>:
 8004d98:	b40e      	push	{r1, r2, r3}
 8004d9a:	b500      	push	{lr}
 8004d9c:	b09c      	sub	sp, #112	; 0x70
 8004d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8004da0:	9002      	str	r0, [sp, #8]
 8004da2:	9006      	str	r0, [sp, #24]
 8004da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004da8:	4809      	ldr	r0, [pc, #36]	; (8004dd0 <siprintf+0x38>)
 8004daa:	9107      	str	r1, [sp, #28]
 8004dac:	9104      	str	r1, [sp, #16]
 8004dae:	4909      	ldr	r1, [pc, #36]	; (8004dd4 <siprintf+0x3c>)
 8004db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004db4:	9105      	str	r1, [sp, #20]
 8004db6:	6800      	ldr	r0, [r0, #0]
 8004db8:	9301      	str	r3, [sp, #4]
 8004dba:	a902      	add	r1, sp, #8
 8004dbc:	f000 f9e6 	bl	800518c <_svfiprintf_r>
 8004dc0:	9b02      	ldr	r3, [sp, #8]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	b01c      	add	sp, #112	; 0x70
 8004dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dcc:	b003      	add	sp, #12
 8004dce:	4770      	bx	lr
 8004dd0:	2000000c 	.word	0x2000000c
 8004dd4:	ffff0208 	.word	0xffff0208

08004dd8 <strcat>:
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	4602      	mov	r2, r0
 8004ddc:	7814      	ldrb	r4, [r2, #0]
 8004dde:	4613      	mov	r3, r2
 8004de0:	3201      	adds	r2, #1
 8004de2:	2c00      	cmp	r4, #0
 8004de4:	d1fa      	bne.n	8004ddc <strcat+0x4>
 8004de6:	3b01      	subs	r3, #1
 8004de8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004df0:	2a00      	cmp	r2, #0
 8004df2:	d1f9      	bne.n	8004de8 <strcat+0x10>
 8004df4:	bd10      	pop	{r4, pc}

08004df6 <strchr>:
 8004df6:	b2c9      	uxtb	r1, r1
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dfe:	b11a      	cbz	r2, 8004e08 <strchr+0x12>
 8004e00:	428a      	cmp	r2, r1
 8004e02:	d1f9      	bne.n	8004df8 <strchr+0x2>
 8004e04:	4618      	mov	r0, r3
 8004e06:	4770      	bx	lr
 8004e08:	2900      	cmp	r1, #0
 8004e0a:	bf18      	it	ne
 8004e0c:	2300      	movne	r3, #0
 8004e0e:	e7f9      	b.n	8004e04 <strchr+0xe>

08004e10 <strcpy>:
 8004e10:	4603      	mov	r3, r0
 8004e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e16:	f803 2b01 	strb.w	r2, [r3], #1
 8004e1a:	2a00      	cmp	r2, #0
 8004e1c:	d1f9      	bne.n	8004e12 <strcpy+0x2>
 8004e1e:	4770      	bx	lr

08004e20 <strsep>:
 8004e20:	4602      	mov	r2, r0
 8004e22:	2300      	movs	r3, #0
 8004e24:	6800      	ldr	r0, [r0, #0]
 8004e26:	f000 b84b 	b.w	8004ec0 <__strtok_r>

08004e2a <strstr>:
 8004e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e2c:	780c      	ldrb	r4, [r1, #0]
 8004e2e:	b164      	cbz	r4, 8004e4a <strstr+0x20>
 8004e30:	4603      	mov	r3, r0
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	1c5e      	adds	r6, r3, #1
 8004e38:	b90a      	cbnz	r2, 8004e3e <strstr+0x14>
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	e005      	b.n	8004e4a <strstr+0x20>
 8004e3e:	4294      	cmp	r4, r2
 8004e40:	d108      	bne.n	8004e54 <strstr+0x2a>
 8004e42:	460d      	mov	r5, r1
 8004e44:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004e48:	b902      	cbnz	r2, 8004e4c <strstr+0x22>
 8004e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e4c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004e50:	4297      	cmp	r7, r2
 8004e52:	d0f7      	beq.n	8004e44 <strstr+0x1a>
 8004e54:	4633      	mov	r3, r6
 8004e56:	e7ec      	b.n	8004e32 <strstr+0x8>

08004e58 <strtok>:
 8004e58:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <strtok+0x5c>)
 8004e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e5c:	681e      	ldr	r6, [r3, #0]
 8004e5e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004e60:	4605      	mov	r5, r0
 8004e62:	b9fc      	cbnz	r4, 8004ea4 <strtok+0x4c>
 8004e64:	2050      	movs	r0, #80	; 0x50
 8004e66:	9101      	str	r1, [sp, #4]
 8004e68:	f000 f882 	bl	8004f70 <malloc>
 8004e6c:	9901      	ldr	r1, [sp, #4]
 8004e6e:	65b0      	str	r0, [r6, #88]	; 0x58
 8004e70:	4602      	mov	r2, r0
 8004e72:	b920      	cbnz	r0, 8004e7e <strtok+0x26>
 8004e74:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <strtok+0x60>)
 8004e76:	4811      	ldr	r0, [pc, #68]	; (8004ebc <strtok+0x64>)
 8004e78:	2157      	movs	r1, #87	; 0x57
 8004e7a:	f000 f849 	bl	8004f10 <__assert_func>
 8004e7e:	e9c0 4400 	strd	r4, r4, [r0]
 8004e82:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004e86:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004e8a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004e8e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004e92:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004e96:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004e9a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004e9e:	6184      	str	r4, [r0, #24]
 8004ea0:	7704      	strb	r4, [r0, #28]
 8004ea2:	6244      	str	r4, [r0, #36]	; 0x24
 8004ea4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	b002      	add	sp, #8
 8004eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004eb0:	f000 b806 	b.w	8004ec0 <__strtok_r>
 8004eb4:	2000000c 	.word	0x2000000c
 8004eb8:	0800640c 	.word	0x0800640c
 8004ebc:	08006423 	.word	0x08006423

08004ec0 <__strtok_r>:
 8004ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec2:	b908      	cbnz	r0, 8004ec8 <__strtok_r+0x8>
 8004ec4:	6810      	ldr	r0, [r2, #0]
 8004ec6:	b188      	cbz	r0, 8004eec <__strtok_r+0x2c>
 8004ec8:	4604      	mov	r4, r0
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004ed0:	460f      	mov	r7, r1
 8004ed2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004ed6:	b91e      	cbnz	r6, 8004ee0 <__strtok_r+0x20>
 8004ed8:	b965      	cbnz	r5, 8004ef4 <__strtok_r+0x34>
 8004eda:	6015      	str	r5, [r2, #0]
 8004edc:	4628      	mov	r0, r5
 8004ede:	e005      	b.n	8004eec <__strtok_r+0x2c>
 8004ee0:	42b5      	cmp	r5, r6
 8004ee2:	d1f6      	bne.n	8004ed2 <__strtok_r+0x12>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <__strtok_r+0xa>
 8004ee8:	6014      	str	r4, [r2, #0]
 8004eea:	7003      	strb	r3, [r0, #0]
 8004eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eee:	461c      	mov	r4, r3
 8004ef0:	e00c      	b.n	8004f0c <__strtok_r+0x4c>
 8004ef2:	b915      	cbnz	r5, 8004efa <__strtok_r+0x3a>
 8004ef4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ef8:	460e      	mov	r6, r1
 8004efa:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004efe:	42ab      	cmp	r3, r5
 8004f00:	d1f7      	bne.n	8004ef2 <__strtok_r+0x32>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f3      	beq.n	8004eee <__strtok_r+0x2e>
 8004f06:	2300      	movs	r3, #0
 8004f08:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004f0c:	6014      	str	r4, [r2, #0]
 8004f0e:	e7ed      	b.n	8004eec <__strtok_r+0x2c>

08004f10 <__assert_func>:
 8004f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f12:	4614      	mov	r4, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <__assert_func+0x2c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	68d8      	ldr	r0, [r3, #12]
 8004f1e:	b14c      	cbz	r4, 8004f34 <__assert_func+0x24>
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <__assert_func+0x30>)
 8004f22:	9100      	str	r1, [sp, #0]
 8004f24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f28:	4906      	ldr	r1, [pc, #24]	; (8004f44 <__assert_func+0x34>)
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	f000 f80e 	bl	8004f4c <fiprintf>
 8004f30:	f000 fdea 	bl	8005b08 <abort>
 8004f34:	4b04      	ldr	r3, [pc, #16]	; (8004f48 <__assert_func+0x38>)
 8004f36:	461c      	mov	r4, r3
 8004f38:	e7f3      	b.n	8004f22 <__assert_func+0x12>
 8004f3a:	bf00      	nop
 8004f3c:	2000000c 	.word	0x2000000c
 8004f40:	08006484 	.word	0x08006484
 8004f44:	08006491 	.word	0x08006491
 8004f48:	080064bf 	.word	0x080064bf

08004f4c <fiprintf>:
 8004f4c:	b40e      	push	{r1, r2, r3}
 8004f4e:	b503      	push	{r0, r1, lr}
 8004f50:	4601      	mov	r1, r0
 8004f52:	ab03      	add	r3, sp, #12
 8004f54:	4805      	ldr	r0, [pc, #20]	; (8004f6c <fiprintf+0x20>)
 8004f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f5a:	6800      	ldr	r0, [r0, #0]
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	f000 fa3f 	bl	80053e0 <_vfiprintf_r>
 8004f62:	b002      	add	sp, #8
 8004f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f68:	b003      	add	sp, #12
 8004f6a:	4770      	bx	lr
 8004f6c:	2000000c 	.word	0x2000000c

08004f70 <malloc>:
 8004f70:	4b02      	ldr	r3, [pc, #8]	; (8004f7c <malloc+0xc>)
 8004f72:	4601      	mov	r1, r0
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	f000 b853 	b.w	8005020 <_malloc_r>
 8004f7a:	bf00      	nop
 8004f7c:	2000000c 	.word	0x2000000c

08004f80 <_free_r>:
 8004f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f82:	2900      	cmp	r1, #0
 8004f84:	d048      	beq.n	8005018 <_free_r+0x98>
 8004f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f8a:	9001      	str	r0, [sp, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f92:	bfb8      	it	lt
 8004f94:	18e4      	addlt	r4, r4, r3
 8004f96:	f001 f805 	bl	8005fa4 <__malloc_lock>
 8004f9a:	4a20      	ldr	r2, [pc, #128]	; (800501c <_free_r+0x9c>)
 8004f9c:	9801      	ldr	r0, [sp, #4]
 8004f9e:	6813      	ldr	r3, [r2, #0]
 8004fa0:	4615      	mov	r5, r2
 8004fa2:	b933      	cbnz	r3, 8004fb2 <_free_r+0x32>
 8004fa4:	6063      	str	r3, [r4, #4]
 8004fa6:	6014      	str	r4, [r2, #0]
 8004fa8:	b003      	add	sp, #12
 8004faa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fae:	f000 bfff 	b.w	8005fb0 <__malloc_unlock>
 8004fb2:	42a3      	cmp	r3, r4
 8004fb4:	d90b      	bls.n	8004fce <_free_r+0x4e>
 8004fb6:	6821      	ldr	r1, [r4, #0]
 8004fb8:	1862      	adds	r2, r4, r1
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	bf04      	itt	eq
 8004fbe:	681a      	ldreq	r2, [r3, #0]
 8004fc0:	685b      	ldreq	r3, [r3, #4]
 8004fc2:	6063      	str	r3, [r4, #4]
 8004fc4:	bf04      	itt	eq
 8004fc6:	1852      	addeq	r2, r2, r1
 8004fc8:	6022      	streq	r2, [r4, #0]
 8004fca:	602c      	str	r4, [r5, #0]
 8004fcc:	e7ec      	b.n	8004fa8 <_free_r+0x28>
 8004fce:	461a      	mov	r2, r3
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	b10b      	cbz	r3, 8004fd8 <_free_r+0x58>
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	d9fa      	bls.n	8004fce <_free_r+0x4e>
 8004fd8:	6811      	ldr	r1, [r2, #0]
 8004fda:	1855      	adds	r5, r2, r1
 8004fdc:	42a5      	cmp	r5, r4
 8004fde:	d10b      	bne.n	8004ff8 <_free_r+0x78>
 8004fe0:	6824      	ldr	r4, [r4, #0]
 8004fe2:	4421      	add	r1, r4
 8004fe4:	1854      	adds	r4, r2, r1
 8004fe6:	42a3      	cmp	r3, r4
 8004fe8:	6011      	str	r1, [r2, #0]
 8004fea:	d1dd      	bne.n	8004fa8 <_free_r+0x28>
 8004fec:	681c      	ldr	r4, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	6053      	str	r3, [r2, #4]
 8004ff2:	4421      	add	r1, r4
 8004ff4:	6011      	str	r1, [r2, #0]
 8004ff6:	e7d7      	b.n	8004fa8 <_free_r+0x28>
 8004ff8:	d902      	bls.n	8005000 <_free_r+0x80>
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	6003      	str	r3, [r0, #0]
 8004ffe:	e7d3      	b.n	8004fa8 <_free_r+0x28>
 8005000:	6825      	ldr	r5, [r4, #0]
 8005002:	1961      	adds	r1, r4, r5
 8005004:	428b      	cmp	r3, r1
 8005006:	bf04      	itt	eq
 8005008:	6819      	ldreq	r1, [r3, #0]
 800500a:	685b      	ldreq	r3, [r3, #4]
 800500c:	6063      	str	r3, [r4, #4]
 800500e:	bf04      	itt	eq
 8005010:	1949      	addeq	r1, r1, r5
 8005012:	6021      	streq	r1, [r4, #0]
 8005014:	6054      	str	r4, [r2, #4]
 8005016:	e7c7      	b.n	8004fa8 <_free_r+0x28>
 8005018:	b003      	add	sp, #12
 800501a:	bd30      	pop	{r4, r5, pc}
 800501c:	20000094 	.word	0x20000094

08005020 <_malloc_r>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	1ccd      	adds	r5, r1, #3
 8005024:	f025 0503 	bic.w	r5, r5, #3
 8005028:	3508      	adds	r5, #8
 800502a:	2d0c      	cmp	r5, #12
 800502c:	bf38      	it	cc
 800502e:	250c      	movcc	r5, #12
 8005030:	2d00      	cmp	r5, #0
 8005032:	4606      	mov	r6, r0
 8005034:	db01      	blt.n	800503a <_malloc_r+0x1a>
 8005036:	42a9      	cmp	r1, r5
 8005038:	d903      	bls.n	8005042 <_malloc_r+0x22>
 800503a:	230c      	movs	r3, #12
 800503c:	6033      	str	r3, [r6, #0]
 800503e:	2000      	movs	r0, #0
 8005040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005042:	f000 ffaf 	bl	8005fa4 <__malloc_lock>
 8005046:	4921      	ldr	r1, [pc, #132]	; (80050cc <_malloc_r+0xac>)
 8005048:	680a      	ldr	r2, [r1, #0]
 800504a:	4614      	mov	r4, r2
 800504c:	b99c      	cbnz	r4, 8005076 <_malloc_r+0x56>
 800504e:	4f20      	ldr	r7, [pc, #128]	; (80050d0 <_malloc_r+0xb0>)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	b923      	cbnz	r3, 800505e <_malloc_r+0x3e>
 8005054:	4621      	mov	r1, r4
 8005056:	4630      	mov	r0, r6
 8005058:	f000 fc86 	bl	8005968 <_sbrk_r>
 800505c:	6038      	str	r0, [r7, #0]
 800505e:	4629      	mov	r1, r5
 8005060:	4630      	mov	r0, r6
 8005062:	f000 fc81 	bl	8005968 <_sbrk_r>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	d123      	bne.n	80050b2 <_malloc_r+0x92>
 800506a:	230c      	movs	r3, #12
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	4630      	mov	r0, r6
 8005070:	f000 ff9e 	bl	8005fb0 <__malloc_unlock>
 8005074:	e7e3      	b.n	800503e <_malloc_r+0x1e>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	1b5b      	subs	r3, r3, r5
 800507a:	d417      	bmi.n	80050ac <_malloc_r+0x8c>
 800507c:	2b0b      	cmp	r3, #11
 800507e:	d903      	bls.n	8005088 <_malloc_r+0x68>
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	441c      	add	r4, r3
 8005084:	6025      	str	r5, [r4, #0]
 8005086:	e004      	b.n	8005092 <_malloc_r+0x72>
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	42a2      	cmp	r2, r4
 800508c:	bf0c      	ite	eq
 800508e:	600b      	streq	r3, [r1, #0]
 8005090:	6053      	strne	r3, [r2, #4]
 8005092:	4630      	mov	r0, r6
 8005094:	f000 ff8c 	bl	8005fb0 <__malloc_unlock>
 8005098:	f104 000b 	add.w	r0, r4, #11
 800509c:	1d23      	adds	r3, r4, #4
 800509e:	f020 0007 	bic.w	r0, r0, #7
 80050a2:	1ac2      	subs	r2, r0, r3
 80050a4:	d0cc      	beq.n	8005040 <_malloc_r+0x20>
 80050a6:	1a1b      	subs	r3, r3, r0
 80050a8:	50a3      	str	r3, [r4, r2]
 80050aa:	e7c9      	b.n	8005040 <_malloc_r+0x20>
 80050ac:	4622      	mov	r2, r4
 80050ae:	6864      	ldr	r4, [r4, #4]
 80050b0:	e7cc      	b.n	800504c <_malloc_r+0x2c>
 80050b2:	1cc4      	adds	r4, r0, #3
 80050b4:	f024 0403 	bic.w	r4, r4, #3
 80050b8:	42a0      	cmp	r0, r4
 80050ba:	d0e3      	beq.n	8005084 <_malloc_r+0x64>
 80050bc:	1a21      	subs	r1, r4, r0
 80050be:	4630      	mov	r0, r6
 80050c0:	f000 fc52 	bl	8005968 <_sbrk_r>
 80050c4:	3001      	adds	r0, #1
 80050c6:	d1dd      	bne.n	8005084 <_malloc_r+0x64>
 80050c8:	e7cf      	b.n	800506a <_malloc_r+0x4a>
 80050ca:	bf00      	nop
 80050cc:	20000094 	.word	0x20000094
 80050d0:	20000098 	.word	0x20000098

080050d4 <__ssputs_r>:
 80050d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d8:	688e      	ldr	r6, [r1, #8]
 80050da:	429e      	cmp	r6, r3
 80050dc:	4682      	mov	sl, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	4690      	mov	r8, r2
 80050e2:	461f      	mov	r7, r3
 80050e4:	d838      	bhi.n	8005158 <__ssputs_r+0x84>
 80050e6:	898a      	ldrh	r2, [r1, #12]
 80050e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050ec:	d032      	beq.n	8005154 <__ssputs_r+0x80>
 80050ee:	6825      	ldr	r5, [r4, #0]
 80050f0:	6909      	ldr	r1, [r1, #16]
 80050f2:	eba5 0901 	sub.w	r9, r5, r1
 80050f6:	6965      	ldr	r5, [r4, #20]
 80050f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005100:	3301      	adds	r3, #1
 8005102:	444b      	add	r3, r9
 8005104:	106d      	asrs	r5, r5, #1
 8005106:	429d      	cmp	r5, r3
 8005108:	bf38      	it	cc
 800510a:	461d      	movcc	r5, r3
 800510c:	0553      	lsls	r3, r2, #21
 800510e:	d531      	bpl.n	8005174 <__ssputs_r+0xa0>
 8005110:	4629      	mov	r1, r5
 8005112:	f7ff ff85 	bl	8005020 <_malloc_r>
 8005116:	4606      	mov	r6, r0
 8005118:	b950      	cbnz	r0, 8005130 <__ssputs_r+0x5c>
 800511a:	230c      	movs	r3, #12
 800511c:	f8ca 3000 	str.w	r3, [sl]
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005126:	81a3      	strh	r3, [r4, #12]
 8005128:	f04f 30ff 	mov.w	r0, #4294967295
 800512c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005130:	6921      	ldr	r1, [r4, #16]
 8005132:	464a      	mov	r2, r9
 8005134:	f000 ff0e 	bl	8005f54 <memcpy>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800513e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	6126      	str	r6, [r4, #16]
 8005146:	6165      	str	r5, [r4, #20]
 8005148:	444e      	add	r6, r9
 800514a:	eba5 0509 	sub.w	r5, r5, r9
 800514e:	6026      	str	r6, [r4, #0]
 8005150:	60a5      	str	r5, [r4, #8]
 8005152:	463e      	mov	r6, r7
 8005154:	42be      	cmp	r6, r7
 8005156:	d900      	bls.n	800515a <__ssputs_r+0x86>
 8005158:	463e      	mov	r6, r7
 800515a:	4632      	mov	r2, r6
 800515c:	6820      	ldr	r0, [r4, #0]
 800515e:	4641      	mov	r1, r8
 8005160:	f000 ff06 	bl	8005f70 <memmove>
 8005164:	68a3      	ldr	r3, [r4, #8]
 8005166:	6822      	ldr	r2, [r4, #0]
 8005168:	1b9b      	subs	r3, r3, r6
 800516a:	4432      	add	r2, r6
 800516c:	60a3      	str	r3, [r4, #8]
 800516e:	6022      	str	r2, [r4, #0]
 8005170:	2000      	movs	r0, #0
 8005172:	e7db      	b.n	800512c <__ssputs_r+0x58>
 8005174:	462a      	mov	r2, r5
 8005176:	f000 ff21 	bl	8005fbc <_realloc_r>
 800517a:	4606      	mov	r6, r0
 800517c:	2800      	cmp	r0, #0
 800517e:	d1e1      	bne.n	8005144 <__ssputs_r+0x70>
 8005180:	6921      	ldr	r1, [r4, #16]
 8005182:	4650      	mov	r0, sl
 8005184:	f7ff fefc 	bl	8004f80 <_free_r>
 8005188:	e7c7      	b.n	800511a <__ssputs_r+0x46>
	...

0800518c <_svfiprintf_r>:
 800518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	4698      	mov	r8, r3
 8005192:	898b      	ldrh	r3, [r1, #12]
 8005194:	061b      	lsls	r3, r3, #24
 8005196:	b09d      	sub	sp, #116	; 0x74
 8005198:	4607      	mov	r7, r0
 800519a:	460d      	mov	r5, r1
 800519c:	4614      	mov	r4, r2
 800519e:	d50e      	bpl.n	80051be <_svfiprintf_r+0x32>
 80051a0:	690b      	ldr	r3, [r1, #16]
 80051a2:	b963      	cbnz	r3, 80051be <_svfiprintf_r+0x32>
 80051a4:	2140      	movs	r1, #64	; 0x40
 80051a6:	f7ff ff3b 	bl	8005020 <_malloc_r>
 80051aa:	6028      	str	r0, [r5, #0]
 80051ac:	6128      	str	r0, [r5, #16]
 80051ae:	b920      	cbnz	r0, 80051ba <_svfiprintf_r+0x2e>
 80051b0:	230c      	movs	r3, #12
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295
 80051b8:	e0d1      	b.n	800535e <_svfiprintf_r+0x1d2>
 80051ba:	2340      	movs	r3, #64	; 0x40
 80051bc:	616b      	str	r3, [r5, #20]
 80051be:	2300      	movs	r3, #0
 80051c0:	9309      	str	r3, [sp, #36]	; 0x24
 80051c2:	2320      	movs	r3, #32
 80051c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80051cc:	2330      	movs	r3, #48	; 0x30
 80051ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005378 <_svfiprintf_r+0x1ec>
 80051d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051d6:	f04f 0901 	mov.w	r9, #1
 80051da:	4623      	mov	r3, r4
 80051dc:	469a      	mov	sl, r3
 80051de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051e2:	b10a      	cbz	r2, 80051e8 <_svfiprintf_r+0x5c>
 80051e4:	2a25      	cmp	r2, #37	; 0x25
 80051e6:	d1f9      	bne.n	80051dc <_svfiprintf_r+0x50>
 80051e8:	ebba 0b04 	subs.w	fp, sl, r4
 80051ec:	d00b      	beq.n	8005206 <_svfiprintf_r+0x7a>
 80051ee:	465b      	mov	r3, fp
 80051f0:	4622      	mov	r2, r4
 80051f2:	4629      	mov	r1, r5
 80051f4:	4638      	mov	r0, r7
 80051f6:	f7ff ff6d 	bl	80050d4 <__ssputs_r>
 80051fa:	3001      	adds	r0, #1
 80051fc:	f000 80aa 	beq.w	8005354 <_svfiprintf_r+0x1c8>
 8005200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005202:	445a      	add	r2, fp
 8005204:	9209      	str	r2, [sp, #36]	; 0x24
 8005206:	f89a 3000 	ldrb.w	r3, [sl]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 80a2 	beq.w	8005354 <_svfiprintf_r+0x1c8>
 8005210:	2300      	movs	r3, #0
 8005212:	f04f 32ff 	mov.w	r2, #4294967295
 8005216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800521a:	f10a 0a01 	add.w	sl, sl, #1
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	9307      	str	r3, [sp, #28]
 8005222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005226:	931a      	str	r3, [sp, #104]	; 0x68
 8005228:	4654      	mov	r4, sl
 800522a:	2205      	movs	r2, #5
 800522c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005230:	4851      	ldr	r0, [pc, #324]	; (8005378 <_svfiprintf_r+0x1ec>)
 8005232:	f7fa ffd5 	bl	80001e0 <memchr>
 8005236:	9a04      	ldr	r2, [sp, #16]
 8005238:	b9d8      	cbnz	r0, 8005272 <_svfiprintf_r+0xe6>
 800523a:	06d0      	lsls	r0, r2, #27
 800523c:	bf44      	itt	mi
 800523e:	2320      	movmi	r3, #32
 8005240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005244:	0711      	lsls	r1, r2, #28
 8005246:	bf44      	itt	mi
 8005248:	232b      	movmi	r3, #43	; 0x2b
 800524a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800524e:	f89a 3000 	ldrb.w	r3, [sl]
 8005252:	2b2a      	cmp	r3, #42	; 0x2a
 8005254:	d015      	beq.n	8005282 <_svfiprintf_r+0xf6>
 8005256:	9a07      	ldr	r2, [sp, #28]
 8005258:	4654      	mov	r4, sl
 800525a:	2000      	movs	r0, #0
 800525c:	f04f 0c0a 	mov.w	ip, #10
 8005260:	4621      	mov	r1, r4
 8005262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005266:	3b30      	subs	r3, #48	; 0x30
 8005268:	2b09      	cmp	r3, #9
 800526a:	d94e      	bls.n	800530a <_svfiprintf_r+0x17e>
 800526c:	b1b0      	cbz	r0, 800529c <_svfiprintf_r+0x110>
 800526e:	9207      	str	r2, [sp, #28]
 8005270:	e014      	b.n	800529c <_svfiprintf_r+0x110>
 8005272:	eba0 0308 	sub.w	r3, r0, r8
 8005276:	fa09 f303 	lsl.w	r3, r9, r3
 800527a:	4313      	orrs	r3, r2
 800527c:	9304      	str	r3, [sp, #16]
 800527e:	46a2      	mov	sl, r4
 8005280:	e7d2      	b.n	8005228 <_svfiprintf_r+0x9c>
 8005282:	9b03      	ldr	r3, [sp, #12]
 8005284:	1d19      	adds	r1, r3, #4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	9103      	str	r1, [sp, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	bfbb      	ittet	lt
 800528e:	425b      	neglt	r3, r3
 8005290:	f042 0202 	orrlt.w	r2, r2, #2
 8005294:	9307      	strge	r3, [sp, #28]
 8005296:	9307      	strlt	r3, [sp, #28]
 8005298:	bfb8      	it	lt
 800529a:	9204      	strlt	r2, [sp, #16]
 800529c:	7823      	ldrb	r3, [r4, #0]
 800529e:	2b2e      	cmp	r3, #46	; 0x2e
 80052a0:	d10c      	bne.n	80052bc <_svfiprintf_r+0x130>
 80052a2:	7863      	ldrb	r3, [r4, #1]
 80052a4:	2b2a      	cmp	r3, #42	; 0x2a
 80052a6:	d135      	bne.n	8005314 <_svfiprintf_r+0x188>
 80052a8:	9b03      	ldr	r3, [sp, #12]
 80052aa:	1d1a      	adds	r2, r3, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	9203      	str	r2, [sp, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bfb8      	it	lt
 80052b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80052b8:	3402      	adds	r4, #2
 80052ba:	9305      	str	r3, [sp, #20]
 80052bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005388 <_svfiprintf_r+0x1fc>
 80052c0:	7821      	ldrb	r1, [r4, #0]
 80052c2:	2203      	movs	r2, #3
 80052c4:	4650      	mov	r0, sl
 80052c6:	f7fa ff8b 	bl	80001e0 <memchr>
 80052ca:	b140      	cbz	r0, 80052de <_svfiprintf_r+0x152>
 80052cc:	2340      	movs	r3, #64	; 0x40
 80052ce:	eba0 000a 	sub.w	r0, r0, sl
 80052d2:	fa03 f000 	lsl.w	r0, r3, r0
 80052d6:	9b04      	ldr	r3, [sp, #16]
 80052d8:	4303      	orrs	r3, r0
 80052da:	3401      	adds	r4, #1
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e2:	4826      	ldr	r0, [pc, #152]	; (800537c <_svfiprintf_r+0x1f0>)
 80052e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052e8:	2206      	movs	r2, #6
 80052ea:	f7fa ff79 	bl	80001e0 <memchr>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d038      	beq.n	8005364 <_svfiprintf_r+0x1d8>
 80052f2:	4b23      	ldr	r3, [pc, #140]	; (8005380 <_svfiprintf_r+0x1f4>)
 80052f4:	bb1b      	cbnz	r3, 800533e <_svfiprintf_r+0x1b2>
 80052f6:	9b03      	ldr	r3, [sp, #12]
 80052f8:	3307      	adds	r3, #7
 80052fa:	f023 0307 	bic.w	r3, r3, #7
 80052fe:	3308      	adds	r3, #8
 8005300:	9303      	str	r3, [sp, #12]
 8005302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005304:	4433      	add	r3, r6
 8005306:	9309      	str	r3, [sp, #36]	; 0x24
 8005308:	e767      	b.n	80051da <_svfiprintf_r+0x4e>
 800530a:	fb0c 3202 	mla	r2, ip, r2, r3
 800530e:	460c      	mov	r4, r1
 8005310:	2001      	movs	r0, #1
 8005312:	e7a5      	b.n	8005260 <_svfiprintf_r+0xd4>
 8005314:	2300      	movs	r3, #0
 8005316:	3401      	adds	r4, #1
 8005318:	9305      	str	r3, [sp, #20]
 800531a:	4619      	mov	r1, r3
 800531c:	f04f 0c0a 	mov.w	ip, #10
 8005320:	4620      	mov	r0, r4
 8005322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005326:	3a30      	subs	r2, #48	; 0x30
 8005328:	2a09      	cmp	r2, #9
 800532a:	d903      	bls.n	8005334 <_svfiprintf_r+0x1a8>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0c5      	beq.n	80052bc <_svfiprintf_r+0x130>
 8005330:	9105      	str	r1, [sp, #20]
 8005332:	e7c3      	b.n	80052bc <_svfiprintf_r+0x130>
 8005334:	fb0c 2101 	mla	r1, ip, r1, r2
 8005338:	4604      	mov	r4, r0
 800533a:	2301      	movs	r3, #1
 800533c:	e7f0      	b.n	8005320 <_svfiprintf_r+0x194>
 800533e:	ab03      	add	r3, sp, #12
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	462a      	mov	r2, r5
 8005344:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <_svfiprintf_r+0x1f8>)
 8005346:	a904      	add	r1, sp, #16
 8005348:	4638      	mov	r0, r7
 800534a:	f3af 8000 	nop.w
 800534e:	1c42      	adds	r2, r0, #1
 8005350:	4606      	mov	r6, r0
 8005352:	d1d6      	bne.n	8005302 <_svfiprintf_r+0x176>
 8005354:	89ab      	ldrh	r3, [r5, #12]
 8005356:	065b      	lsls	r3, r3, #25
 8005358:	f53f af2c 	bmi.w	80051b4 <_svfiprintf_r+0x28>
 800535c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800535e:	b01d      	add	sp, #116	; 0x74
 8005360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005364:	ab03      	add	r3, sp, #12
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	462a      	mov	r2, r5
 800536a:	4b06      	ldr	r3, [pc, #24]	; (8005384 <_svfiprintf_r+0x1f8>)
 800536c:	a904      	add	r1, sp, #16
 800536e:	4638      	mov	r0, r7
 8005370:	f000 f9d4 	bl	800571c <_printf_i>
 8005374:	e7eb      	b.n	800534e <_svfiprintf_r+0x1c2>
 8005376:	bf00      	nop
 8005378:	080064c0 	.word	0x080064c0
 800537c:	080064ca 	.word	0x080064ca
 8005380:	00000000 	.word	0x00000000
 8005384:	080050d5 	.word	0x080050d5
 8005388:	080064c6 	.word	0x080064c6

0800538c <__sfputc_r>:
 800538c:	6893      	ldr	r3, [r2, #8]
 800538e:	3b01      	subs	r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	b410      	push	{r4}
 8005394:	6093      	str	r3, [r2, #8]
 8005396:	da08      	bge.n	80053aa <__sfputc_r+0x1e>
 8005398:	6994      	ldr	r4, [r2, #24]
 800539a:	42a3      	cmp	r3, r4
 800539c:	db01      	blt.n	80053a2 <__sfputc_r+0x16>
 800539e:	290a      	cmp	r1, #10
 80053a0:	d103      	bne.n	80053aa <__sfputc_r+0x1e>
 80053a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053a6:	f000 baef 	b.w	8005988 <__swbuf_r>
 80053aa:	6813      	ldr	r3, [r2, #0]
 80053ac:	1c58      	adds	r0, r3, #1
 80053ae:	6010      	str	r0, [r2, #0]
 80053b0:	7019      	strb	r1, [r3, #0]
 80053b2:	4608      	mov	r0, r1
 80053b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <__sfputs_r>:
 80053ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053bc:	4606      	mov	r6, r0
 80053be:	460f      	mov	r7, r1
 80053c0:	4614      	mov	r4, r2
 80053c2:	18d5      	adds	r5, r2, r3
 80053c4:	42ac      	cmp	r4, r5
 80053c6:	d101      	bne.n	80053cc <__sfputs_r+0x12>
 80053c8:	2000      	movs	r0, #0
 80053ca:	e007      	b.n	80053dc <__sfputs_r+0x22>
 80053cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d0:	463a      	mov	r2, r7
 80053d2:	4630      	mov	r0, r6
 80053d4:	f7ff ffda 	bl	800538c <__sfputc_r>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d1f3      	bne.n	80053c4 <__sfputs_r+0xa>
 80053dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053e0 <_vfiprintf_r>:
 80053e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e4:	460d      	mov	r5, r1
 80053e6:	b09d      	sub	sp, #116	; 0x74
 80053e8:	4614      	mov	r4, r2
 80053ea:	4698      	mov	r8, r3
 80053ec:	4606      	mov	r6, r0
 80053ee:	b118      	cbz	r0, 80053f8 <_vfiprintf_r+0x18>
 80053f0:	6983      	ldr	r3, [r0, #24]
 80053f2:	b90b      	cbnz	r3, 80053f8 <_vfiprintf_r+0x18>
 80053f4:	f000 fcaa 	bl	8005d4c <__sinit>
 80053f8:	4b89      	ldr	r3, [pc, #548]	; (8005620 <_vfiprintf_r+0x240>)
 80053fa:	429d      	cmp	r5, r3
 80053fc:	d11b      	bne.n	8005436 <_vfiprintf_r+0x56>
 80053fe:	6875      	ldr	r5, [r6, #4]
 8005400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005402:	07d9      	lsls	r1, r3, #31
 8005404:	d405      	bmi.n	8005412 <_vfiprintf_r+0x32>
 8005406:	89ab      	ldrh	r3, [r5, #12]
 8005408:	059a      	lsls	r2, r3, #22
 800540a:	d402      	bmi.n	8005412 <_vfiprintf_r+0x32>
 800540c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800540e:	f000 fd3b 	bl	8005e88 <__retarget_lock_acquire_recursive>
 8005412:	89ab      	ldrh	r3, [r5, #12]
 8005414:	071b      	lsls	r3, r3, #28
 8005416:	d501      	bpl.n	800541c <_vfiprintf_r+0x3c>
 8005418:	692b      	ldr	r3, [r5, #16]
 800541a:	b9eb      	cbnz	r3, 8005458 <_vfiprintf_r+0x78>
 800541c:	4629      	mov	r1, r5
 800541e:	4630      	mov	r0, r6
 8005420:	f000 fb04 	bl	8005a2c <__swsetup_r>
 8005424:	b1c0      	cbz	r0, 8005458 <_vfiprintf_r+0x78>
 8005426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005428:	07dc      	lsls	r4, r3, #31
 800542a:	d50e      	bpl.n	800544a <_vfiprintf_r+0x6a>
 800542c:	f04f 30ff 	mov.w	r0, #4294967295
 8005430:	b01d      	add	sp, #116	; 0x74
 8005432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005436:	4b7b      	ldr	r3, [pc, #492]	; (8005624 <_vfiprintf_r+0x244>)
 8005438:	429d      	cmp	r5, r3
 800543a:	d101      	bne.n	8005440 <_vfiprintf_r+0x60>
 800543c:	68b5      	ldr	r5, [r6, #8]
 800543e:	e7df      	b.n	8005400 <_vfiprintf_r+0x20>
 8005440:	4b79      	ldr	r3, [pc, #484]	; (8005628 <_vfiprintf_r+0x248>)
 8005442:	429d      	cmp	r5, r3
 8005444:	bf08      	it	eq
 8005446:	68f5      	ldreq	r5, [r6, #12]
 8005448:	e7da      	b.n	8005400 <_vfiprintf_r+0x20>
 800544a:	89ab      	ldrh	r3, [r5, #12]
 800544c:	0598      	lsls	r0, r3, #22
 800544e:	d4ed      	bmi.n	800542c <_vfiprintf_r+0x4c>
 8005450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005452:	f000 fd1a 	bl	8005e8a <__retarget_lock_release_recursive>
 8005456:	e7e9      	b.n	800542c <_vfiprintf_r+0x4c>
 8005458:	2300      	movs	r3, #0
 800545a:	9309      	str	r3, [sp, #36]	; 0x24
 800545c:	2320      	movs	r3, #32
 800545e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005462:	f8cd 800c 	str.w	r8, [sp, #12]
 8005466:	2330      	movs	r3, #48	; 0x30
 8005468:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800562c <_vfiprintf_r+0x24c>
 800546c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005470:	f04f 0901 	mov.w	r9, #1
 8005474:	4623      	mov	r3, r4
 8005476:	469a      	mov	sl, r3
 8005478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800547c:	b10a      	cbz	r2, 8005482 <_vfiprintf_r+0xa2>
 800547e:	2a25      	cmp	r2, #37	; 0x25
 8005480:	d1f9      	bne.n	8005476 <_vfiprintf_r+0x96>
 8005482:	ebba 0b04 	subs.w	fp, sl, r4
 8005486:	d00b      	beq.n	80054a0 <_vfiprintf_r+0xc0>
 8005488:	465b      	mov	r3, fp
 800548a:	4622      	mov	r2, r4
 800548c:	4629      	mov	r1, r5
 800548e:	4630      	mov	r0, r6
 8005490:	f7ff ff93 	bl	80053ba <__sfputs_r>
 8005494:	3001      	adds	r0, #1
 8005496:	f000 80aa 	beq.w	80055ee <_vfiprintf_r+0x20e>
 800549a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800549c:	445a      	add	r2, fp
 800549e:	9209      	str	r2, [sp, #36]	; 0x24
 80054a0:	f89a 3000 	ldrb.w	r3, [sl]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 80a2 	beq.w	80055ee <_vfiprintf_r+0x20e>
 80054aa:	2300      	movs	r3, #0
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295
 80054b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054b4:	f10a 0a01 	add.w	sl, sl, #1
 80054b8:	9304      	str	r3, [sp, #16]
 80054ba:	9307      	str	r3, [sp, #28]
 80054bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054c0:	931a      	str	r3, [sp, #104]	; 0x68
 80054c2:	4654      	mov	r4, sl
 80054c4:	2205      	movs	r2, #5
 80054c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ca:	4858      	ldr	r0, [pc, #352]	; (800562c <_vfiprintf_r+0x24c>)
 80054cc:	f7fa fe88 	bl	80001e0 <memchr>
 80054d0:	9a04      	ldr	r2, [sp, #16]
 80054d2:	b9d8      	cbnz	r0, 800550c <_vfiprintf_r+0x12c>
 80054d4:	06d1      	lsls	r1, r2, #27
 80054d6:	bf44      	itt	mi
 80054d8:	2320      	movmi	r3, #32
 80054da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054de:	0713      	lsls	r3, r2, #28
 80054e0:	bf44      	itt	mi
 80054e2:	232b      	movmi	r3, #43	; 0x2b
 80054e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054e8:	f89a 3000 	ldrb.w	r3, [sl]
 80054ec:	2b2a      	cmp	r3, #42	; 0x2a
 80054ee:	d015      	beq.n	800551c <_vfiprintf_r+0x13c>
 80054f0:	9a07      	ldr	r2, [sp, #28]
 80054f2:	4654      	mov	r4, sl
 80054f4:	2000      	movs	r0, #0
 80054f6:	f04f 0c0a 	mov.w	ip, #10
 80054fa:	4621      	mov	r1, r4
 80054fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005500:	3b30      	subs	r3, #48	; 0x30
 8005502:	2b09      	cmp	r3, #9
 8005504:	d94e      	bls.n	80055a4 <_vfiprintf_r+0x1c4>
 8005506:	b1b0      	cbz	r0, 8005536 <_vfiprintf_r+0x156>
 8005508:	9207      	str	r2, [sp, #28]
 800550a:	e014      	b.n	8005536 <_vfiprintf_r+0x156>
 800550c:	eba0 0308 	sub.w	r3, r0, r8
 8005510:	fa09 f303 	lsl.w	r3, r9, r3
 8005514:	4313      	orrs	r3, r2
 8005516:	9304      	str	r3, [sp, #16]
 8005518:	46a2      	mov	sl, r4
 800551a:	e7d2      	b.n	80054c2 <_vfiprintf_r+0xe2>
 800551c:	9b03      	ldr	r3, [sp, #12]
 800551e:	1d19      	adds	r1, r3, #4
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	9103      	str	r1, [sp, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	bfbb      	ittet	lt
 8005528:	425b      	neglt	r3, r3
 800552a:	f042 0202 	orrlt.w	r2, r2, #2
 800552e:	9307      	strge	r3, [sp, #28]
 8005530:	9307      	strlt	r3, [sp, #28]
 8005532:	bfb8      	it	lt
 8005534:	9204      	strlt	r2, [sp, #16]
 8005536:	7823      	ldrb	r3, [r4, #0]
 8005538:	2b2e      	cmp	r3, #46	; 0x2e
 800553a:	d10c      	bne.n	8005556 <_vfiprintf_r+0x176>
 800553c:	7863      	ldrb	r3, [r4, #1]
 800553e:	2b2a      	cmp	r3, #42	; 0x2a
 8005540:	d135      	bne.n	80055ae <_vfiprintf_r+0x1ce>
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	1d1a      	adds	r2, r3, #4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	9203      	str	r2, [sp, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	bfb8      	it	lt
 800554e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005552:	3402      	adds	r4, #2
 8005554:	9305      	str	r3, [sp, #20]
 8005556:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800563c <_vfiprintf_r+0x25c>
 800555a:	7821      	ldrb	r1, [r4, #0]
 800555c:	2203      	movs	r2, #3
 800555e:	4650      	mov	r0, sl
 8005560:	f7fa fe3e 	bl	80001e0 <memchr>
 8005564:	b140      	cbz	r0, 8005578 <_vfiprintf_r+0x198>
 8005566:	2340      	movs	r3, #64	; 0x40
 8005568:	eba0 000a 	sub.w	r0, r0, sl
 800556c:	fa03 f000 	lsl.w	r0, r3, r0
 8005570:	9b04      	ldr	r3, [sp, #16]
 8005572:	4303      	orrs	r3, r0
 8005574:	3401      	adds	r4, #1
 8005576:	9304      	str	r3, [sp, #16]
 8005578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800557c:	482c      	ldr	r0, [pc, #176]	; (8005630 <_vfiprintf_r+0x250>)
 800557e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005582:	2206      	movs	r2, #6
 8005584:	f7fa fe2c 	bl	80001e0 <memchr>
 8005588:	2800      	cmp	r0, #0
 800558a:	d03f      	beq.n	800560c <_vfiprintf_r+0x22c>
 800558c:	4b29      	ldr	r3, [pc, #164]	; (8005634 <_vfiprintf_r+0x254>)
 800558e:	bb1b      	cbnz	r3, 80055d8 <_vfiprintf_r+0x1f8>
 8005590:	9b03      	ldr	r3, [sp, #12]
 8005592:	3307      	adds	r3, #7
 8005594:	f023 0307 	bic.w	r3, r3, #7
 8005598:	3308      	adds	r3, #8
 800559a:	9303      	str	r3, [sp, #12]
 800559c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800559e:	443b      	add	r3, r7
 80055a0:	9309      	str	r3, [sp, #36]	; 0x24
 80055a2:	e767      	b.n	8005474 <_vfiprintf_r+0x94>
 80055a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055a8:	460c      	mov	r4, r1
 80055aa:	2001      	movs	r0, #1
 80055ac:	e7a5      	b.n	80054fa <_vfiprintf_r+0x11a>
 80055ae:	2300      	movs	r3, #0
 80055b0:	3401      	adds	r4, #1
 80055b2:	9305      	str	r3, [sp, #20]
 80055b4:	4619      	mov	r1, r3
 80055b6:	f04f 0c0a 	mov.w	ip, #10
 80055ba:	4620      	mov	r0, r4
 80055bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055c0:	3a30      	subs	r2, #48	; 0x30
 80055c2:	2a09      	cmp	r2, #9
 80055c4:	d903      	bls.n	80055ce <_vfiprintf_r+0x1ee>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0c5      	beq.n	8005556 <_vfiprintf_r+0x176>
 80055ca:	9105      	str	r1, [sp, #20]
 80055cc:	e7c3      	b.n	8005556 <_vfiprintf_r+0x176>
 80055ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80055d2:	4604      	mov	r4, r0
 80055d4:	2301      	movs	r3, #1
 80055d6:	e7f0      	b.n	80055ba <_vfiprintf_r+0x1da>
 80055d8:	ab03      	add	r3, sp, #12
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	462a      	mov	r2, r5
 80055de:	4b16      	ldr	r3, [pc, #88]	; (8005638 <_vfiprintf_r+0x258>)
 80055e0:	a904      	add	r1, sp, #16
 80055e2:	4630      	mov	r0, r6
 80055e4:	f3af 8000 	nop.w
 80055e8:	4607      	mov	r7, r0
 80055ea:	1c78      	adds	r0, r7, #1
 80055ec:	d1d6      	bne.n	800559c <_vfiprintf_r+0x1bc>
 80055ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055f0:	07d9      	lsls	r1, r3, #31
 80055f2:	d405      	bmi.n	8005600 <_vfiprintf_r+0x220>
 80055f4:	89ab      	ldrh	r3, [r5, #12]
 80055f6:	059a      	lsls	r2, r3, #22
 80055f8:	d402      	bmi.n	8005600 <_vfiprintf_r+0x220>
 80055fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055fc:	f000 fc45 	bl	8005e8a <__retarget_lock_release_recursive>
 8005600:	89ab      	ldrh	r3, [r5, #12]
 8005602:	065b      	lsls	r3, r3, #25
 8005604:	f53f af12 	bmi.w	800542c <_vfiprintf_r+0x4c>
 8005608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800560a:	e711      	b.n	8005430 <_vfiprintf_r+0x50>
 800560c:	ab03      	add	r3, sp, #12
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	462a      	mov	r2, r5
 8005612:	4b09      	ldr	r3, [pc, #36]	; (8005638 <_vfiprintf_r+0x258>)
 8005614:	a904      	add	r1, sp, #16
 8005616:	4630      	mov	r0, r6
 8005618:	f000 f880 	bl	800571c <_printf_i>
 800561c:	e7e4      	b.n	80055e8 <_vfiprintf_r+0x208>
 800561e:	bf00      	nop
 8005620:	08006514 	.word	0x08006514
 8005624:	08006534 	.word	0x08006534
 8005628:	080064f4 	.word	0x080064f4
 800562c:	080064c0 	.word	0x080064c0
 8005630:	080064ca 	.word	0x080064ca
 8005634:	00000000 	.word	0x00000000
 8005638:	080053bb 	.word	0x080053bb
 800563c:	080064c6 	.word	0x080064c6

08005640 <_printf_common>:
 8005640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005644:	4616      	mov	r6, r2
 8005646:	4699      	mov	r9, r3
 8005648:	688a      	ldr	r2, [r1, #8]
 800564a:	690b      	ldr	r3, [r1, #16]
 800564c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005650:	4293      	cmp	r3, r2
 8005652:	bfb8      	it	lt
 8005654:	4613      	movlt	r3, r2
 8005656:	6033      	str	r3, [r6, #0]
 8005658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800565c:	4607      	mov	r7, r0
 800565e:	460c      	mov	r4, r1
 8005660:	b10a      	cbz	r2, 8005666 <_printf_common+0x26>
 8005662:	3301      	adds	r3, #1
 8005664:	6033      	str	r3, [r6, #0]
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	0699      	lsls	r1, r3, #26
 800566a:	bf42      	ittt	mi
 800566c:	6833      	ldrmi	r3, [r6, #0]
 800566e:	3302      	addmi	r3, #2
 8005670:	6033      	strmi	r3, [r6, #0]
 8005672:	6825      	ldr	r5, [r4, #0]
 8005674:	f015 0506 	ands.w	r5, r5, #6
 8005678:	d106      	bne.n	8005688 <_printf_common+0x48>
 800567a:	f104 0a19 	add.w	sl, r4, #25
 800567e:	68e3      	ldr	r3, [r4, #12]
 8005680:	6832      	ldr	r2, [r6, #0]
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	42ab      	cmp	r3, r5
 8005686:	dc26      	bgt.n	80056d6 <_printf_common+0x96>
 8005688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800568c:	1e13      	subs	r3, r2, #0
 800568e:	6822      	ldr	r2, [r4, #0]
 8005690:	bf18      	it	ne
 8005692:	2301      	movne	r3, #1
 8005694:	0692      	lsls	r2, r2, #26
 8005696:	d42b      	bmi.n	80056f0 <_printf_common+0xb0>
 8005698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800569c:	4649      	mov	r1, r9
 800569e:	4638      	mov	r0, r7
 80056a0:	47c0      	blx	r8
 80056a2:	3001      	adds	r0, #1
 80056a4:	d01e      	beq.n	80056e4 <_printf_common+0xa4>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	68e5      	ldr	r5, [r4, #12]
 80056aa:	6832      	ldr	r2, [r6, #0]
 80056ac:	f003 0306 	and.w	r3, r3, #6
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	bf08      	it	eq
 80056b4:	1aad      	subeq	r5, r5, r2
 80056b6:	68a3      	ldr	r3, [r4, #8]
 80056b8:	6922      	ldr	r2, [r4, #16]
 80056ba:	bf0c      	ite	eq
 80056bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056c0:	2500      	movne	r5, #0
 80056c2:	4293      	cmp	r3, r2
 80056c4:	bfc4      	itt	gt
 80056c6:	1a9b      	subgt	r3, r3, r2
 80056c8:	18ed      	addgt	r5, r5, r3
 80056ca:	2600      	movs	r6, #0
 80056cc:	341a      	adds	r4, #26
 80056ce:	42b5      	cmp	r5, r6
 80056d0:	d11a      	bne.n	8005708 <_printf_common+0xc8>
 80056d2:	2000      	movs	r0, #0
 80056d4:	e008      	b.n	80056e8 <_printf_common+0xa8>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4652      	mov	r2, sl
 80056da:	4649      	mov	r1, r9
 80056dc:	4638      	mov	r0, r7
 80056de:	47c0      	blx	r8
 80056e0:	3001      	adds	r0, #1
 80056e2:	d103      	bne.n	80056ec <_printf_common+0xac>
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	3501      	adds	r5, #1
 80056ee:	e7c6      	b.n	800567e <_printf_common+0x3e>
 80056f0:	18e1      	adds	r1, r4, r3
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	2030      	movs	r0, #48	; 0x30
 80056f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056fa:	4422      	add	r2, r4
 80056fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005704:	3302      	adds	r3, #2
 8005706:	e7c7      	b.n	8005698 <_printf_common+0x58>
 8005708:	2301      	movs	r3, #1
 800570a:	4622      	mov	r2, r4
 800570c:	4649      	mov	r1, r9
 800570e:	4638      	mov	r0, r7
 8005710:	47c0      	blx	r8
 8005712:	3001      	adds	r0, #1
 8005714:	d0e6      	beq.n	80056e4 <_printf_common+0xa4>
 8005716:	3601      	adds	r6, #1
 8005718:	e7d9      	b.n	80056ce <_printf_common+0x8e>
	...

0800571c <_printf_i>:
 800571c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005720:	460c      	mov	r4, r1
 8005722:	4691      	mov	r9, r2
 8005724:	7e27      	ldrb	r7, [r4, #24]
 8005726:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005728:	2f78      	cmp	r7, #120	; 0x78
 800572a:	4680      	mov	r8, r0
 800572c:	469a      	mov	sl, r3
 800572e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005732:	d807      	bhi.n	8005744 <_printf_i+0x28>
 8005734:	2f62      	cmp	r7, #98	; 0x62
 8005736:	d80a      	bhi.n	800574e <_printf_i+0x32>
 8005738:	2f00      	cmp	r7, #0
 800573a:	f000 80d8 	beq.w	80058ee <_printf_i+0x1d2>
 800573e:	2f58      	cmp	r7, #88	; 0x58
 8005740:	f000 80a3 	beq.w	800588a <_printf_i+0x16e>
 8005744:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800574c:	e03a      	b.n	80057c4 <_printf_i+0xa8>
 800574e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005752:	2b15      	cmp	r3, #21
 8005754:	d8f6      	bhi.n	8005744 <_printf_i+0x28>
 8005756:	a001      	add	r0, pc, #4	; (adr r0, 800575c <_printf_i+0x40>)
 8005758:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800575c:	080057b5 	.word	0x080057b5
 8005760:	080057c9 	.word	0x080057c9
 8005764:	08005745 	.word	0x08005745
 8005768:	08005745 	.word	0x08005745
 800576c:	08005745 	.word	0x08005745
 8005770:	08005745 	.word	0x08005745
 8005774:	080057c9 	.word	0x080057c9
 8005778:	08005745 	.word	0x08005745
 800577c:	08005745 	.word	0x08005745
 8005780:	08005745 	.word	0x08005745
 8005784:	08005745 	.word	0x08005745
 8005788:	080058d5 	.word	0x080058d5
 800578c:	080057f9 	.word	0x080057f9
 8005790:	080058b7 	.word	0x080058b7
 8005794:	08005745 	.word	0x08005745
 8005798:	08005745 	.word	0x08005745
 800579c:	080058f7 	.word	0x080058f7
 80057a0:	08005745 	.word	0x08005745
 80057a4:	080057f9 	.word	0x080057f9
 80057a8:	08005745 	.word	0x08005745
 80057ac:	08005745 	.word	0x08005745
 80057b0:	080058bf 	.word	0x080058bf
 80057b4:	680b      	ldr	r3, [r1, #0]
 80057b6:	1d1a      	adds	r2, r3, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	600a      	str	r2, [r1, #0]
 80057bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0a3      	b.n	8005910 <_printf_i+0x1f4>
 80057c8:	6825      	ldr	r5, [r4, #0]
 80057ca:	6808      	ldr	r0, [r1, #0]
 80057cc:	062e      	lsls	r6, r5, #24
 80057ce:	f100 0304 	add.w	r3, r0, #4
 80057d2:	d50a      	bpl.n	80057ea <_printf_i+0xce>
 80057d4:	6805      	ldr	r5, [r0, #0]
 80057d6:	600b      	str	r3, [r1, #0]
 80057d8:	2d00      	cmp	r5, #0
 80057da:	da03      	bge.n	80057e4 <_printf_i+0xc8>
 80057dc:	232d      	movs	r3, #45	; 0x2d
 80057de:	426d      	negs	r5, r5
 80057e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e4:	485e      	ldr	r0, [pc, #376]	; (8005960 <_printf_i+0x244>)
 80057e6:	230a      	movs	r3, #10
 80057e8:	e019      	b.n	800581e <_printf_i+0x102>
 80057ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057ee:	6805      	ldr	r5, [r0, #0]
 80057f0:	600b      	str	r3, [r1, #0]
 80057f2:	bf18      	it	ne
 80057f4:	b22d      	sxthne	r5, r5
 80057f6:	e7ef      	b.n	80057d8 <_printf_i+0xbc>
 80057f8:	680b      	ldr	r3, [r1, #0]
 80057fa:	6825      	ldr	r5, [r4, #0]
 80057fc:	1d18      	adds	r0, r3, #4
 80057fe:	6008      	str	r0, [r1, #0]
 8005800:	0628      	lsls	r0, r5, #24
 8005802:	d501      	bpl.n	8005808 <_printf_i+0xec>
 8005804:	681d      	ldr	r5, [r3, #0]
 8005806:	e002      	b.n	800580e <_printf_i+0xf2>
 8005808:	0669      	lsls	r1, r5, #25
 800580a:	d5fb      	bpl.n	8005804 <_printf_i+0xe8>
 800580c:	881d      	ldrh	r5, [r3, #0]
 800580e:	4854      	ldr	r0, [pc, #336]	; (8005960 <_printf_i+0x244>)
 8005810:	2f6f      	cmp	r7, #111	; 0x6f
 8005812:	bf0c      	ite	eq
 8005814:	2308      	moveq	r3, #8
 8005816:	230a      	movne	r3, #10
 8005818:	2100      	movs	r1, #0
 800581a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800581e:	6866      	ldr	r6, [r4, #4]
 8005820:	60a6      	str	r6, [r4, #8]
 8005822:	2e00      	cmp	r6, #0
 8005824:	bfa2      	ittt	ge
 8005826:	6821      	ldrge	r1, [r4, #0]
 8005828:	f021 0104 	bicge.w	r1, r1, #4
 800582c:	6021      	strge	r1, [r4, #0]
 800582e:	b90d      	cbnz	r5, 8005834 <_printf_i+0x118>
 8005830:	2e00      	cmp	r6, #0
 8005832:	d04d      	beq.n	80058d0 <_printf_i+0x1b4>
 8005834:	4616      	mov	r6, r2
 8005836:	fbb5 f1f3 	udiv	r1, r5, r3
 800583a:	fb03 5711 	mls	r7, r3, r1, r5
 800583e:	5dc7      	ldrb	r7, [r0, r7]
 8005840:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005844:	462f      	mov	r7, r5
 8005846:	42bb      	cmp	r3, r7
 8005848:	460d      	mov	r5, r1
 800584a:	d9f4      	bls.n	8005836 <_printf_i+0x11a>
 800584c:	2b08      	cmp	r3, #8
 800584e:	d10b      	bne.n	8005868 <_printf_i+0x14c>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	07df      	lsls	r7, r3, #31
 8005854:	d508      	bpl.n	8005868 <_printf_i+0x14c>
 8005856:	6923      	ldr	r3, [r4, #16]
 8005858:	6861      	ldr	r1, [r4, #4]
 800585a:	4299      	cmp	r1, r3
 800585c:	bfde      	ittt	le
 800585e:	2330      	movle	r3, #48	; 0x30
 8005860:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005864:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005868:	1b92      	subs	r2, r2, r6
 800586a:	6122      	str	r2, [r4, #16]
 800586c:	f8cd a000 	str.w	sl, [sp]
 8005870:	464b      	mov	r3, r9
 8005872:	aa03      	add	r2, sp, #12
 8005874:	4621      	mov	r1, r4
 8005876:	4640      	mov	r0, r8
 8005878:	f7ff fee2 	bl	8005640 <_printf_common>
 800587c:	3001      	adds	r0, #1
 800587e:	d14c      	bne.n	800591a <_printf_i+0x1fe>
 8005880:	f04f 30ff 	mov.w	r0, #4294967295
 8005884:	b004      	add	sp, #16
 8005886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588a:	4835      	ldr	r0, [pc, #212]	; (8005960 <_printf_i+0x244>)
 800588c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	680e      	ldr	r6, [r1, #0]
 8005894:	061f      	lsls	r7, r3, #24
 8005896:	f856 5b04 	ldr.w	r5, [r6], #4
 800589a:	600e      	str	r6, [r1, #0]
 800589c:	d514      	bpl.n	80058c8 <_printf_i+0x1ac>
 800589e:	07d9      	lsls	r1, r3, #31
 80058a0:	bf44      	itt	mi
 80058a2:	f043 0320 	orrmi.w	r3, r3, #32
 80058a6:	6023      	strmi	r3, [r4, #0]
 80058a8:	b91d      	cbnz	r5, 80058b2 <_printf_i+0x196>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	f023 0320 	bic.w	r3, r3, #32
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	2310      	movs	r3, #16
 80058b4:	e7b0      	b.n	8005818 <_printf_i+0xfc>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	f043 0320 	orr.w	r3, r3, #32
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	2378      	movs	r3, #120	; 0x78
 80058c0:	4828      	ldr	r0, [pc, #160]	; (8005964 <_printf_i+0x248>)
 80058c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058c6:	e7e3      	b.n	8005890 <_printf_i+0x174>
 80058c8:	065e      	lsls	r6, r3, #25
 80058ca:	bf48      	it	mi
 80058cc:	b2ad      	uxthmi	r5, r5
 80058ce:	e7e6      	b.n	800589e <_printf_i+0x182>
 80058d0:	4616      	mov	r6, r2
 80058d2:	e7bb      	b.n	800584c <_printf_i+0x130>
 80058d4:	680b      	ldr	r3, [r1, #0]
 80058d6:	6826      	ldr	r6, [r4, #0]
 80058d8:	6960      	ldr	r0, [r4, #20]
 80058da:	1d1d      	adds	r5, r3, #4
 80058dc:	600d      	str	r5, [r1, #0]
 80058de:	0635      	lsls	r5, r6, #24
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	d501      	bpl.n	80058e8 <_printf_i+0x1cc>
 80058e4:	6018      	str	r0, [r3, #0]
 80058e6:	e002      	b.n	80058ee <_printf_i+0x1d2>
 80058e8:	0671      	lsls	r1, r6, #25
 80058ea:	d5fb      	bpl.n	80058e4 <_printf_i+0x1c8>
 80058ec:	8018      	strh	r0, [r3, #0]
 80058ee:	2300      	movs	r3, #0
 80058f0:	6123      	str	r3, [r4, #16]
 80058f2:	4616      	mov	r6, r2
 80058f4:	e7ba      	b.n	800586c <_printf_i+0x150>
 80058f6:	680b      	ldr	r3, [r1, #0]
 80058f8:	1d1a      	adds	r2, r3, #4
 80058fa:	600a      	str	r2, [r1, #0]
 80058fc:	681e      	ldr	r6, [r3, #0]
 80058fe:	6862      	ldr	r2, [r4, #4]
 8005900:	2100      	movs	r1, #0
 8005902:	4630      	mov	r0, r6
 8005904:	f7fa fc6c 	bl	80001e0 <memchr>
 8005908:	b108      	cbz	r0, 800590e <_printf_i+0x1f2>
 800590a:	1b80      	subs	r0, r0, r6
 800590c:	6060      	str	r0, [r4, #4]
 800590e:	6863      	ldr	r3, [r4, #4]
 8005910:	6123      	str	r3, [r4, #16]
 8005912:	2300      	movs	r3, #0
 8005914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005918:	e7a8      	b.n	800586c <_printf_i+0x150>
 800591a:	6923      	ldr	r3, [r4, #16]
 800591c:	4632      	mov	r2, r6
 800591e:	4649      	mov	r1, r9
 8005920:	4640      	mov	r0, r8
 8005922:	47d0      	blx	sl
 8005924:	3001      	adds	r0, #1
 8005926:	d0ab      	beq.n	8005880 <_printf_i+0x164>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	079b      	lsls	r3, r3, #30
 800592c:	d413      	bmi.n	8005956 <_printf_i+0x23a>
 800592e:	68e0      	ldr	r0, [r4, #12]
 8005930:	9b03      	ldr	r3, [sp, #12]
 8005932:	4298      	cmp	r0, r3
 8005934:	bfb8      	it	lt
 8005936:	4618      	movlt	r0, r3
 8005938:	e7a4      	b.n	8005884 <_printf_i+0x168>
 800593a:	2301      	movs	r3, #1
 800593c:	4632      	mov	r2, r6
 800593e:	4649      	mov	r1, r9
 8005940:	4640      	mov	r0, r8
 8005942:	47d0      	blx	sl
 8005944:	3001      	adds	r0, #1
 8005946:	d09b      	beq.n	8005880 <_printf_i+0x164>
 8005948:	3501      	adds	r5, #1
 800594a:	68e3      	ldr	r3, [r4, #12]
 800594c:	9903      	ldr	r1, [sp, #12]
 800594e:	1a5b      	subs	r3, r3, r1
 8005950:	42ab      	cmp	r3, r5
 8005952:	dcf2      	bgt.n	800593a <_printf_i+0x21e>
 8005954:	e7eb      	b.n	800592e <_printf_i+0x212>
 8005956:	2500      	movs	r5, #0
 8005958:	f104 0619 	add.w	r6, r4, #25
 800595c:	e7f5      	b.n	800594a <_printf_i+0x22e>
 800595e:	bf00      	nop
 8005960:	080064d1 	.word	0x080064d1
 8005964:	080064e2 	.word	0x080064e2

08005968 <_sbrk_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4d06      	ldr	r5, [pc, #24]	; (8005984 <_sbrk_r+0x1c>)
 800596c:	2300      	movs	r3, #0
 800596e:	4604      	mov	r4, r0
 8005970:	4608      	mov	r0, r1
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	f7fb fd92 	bl	800149c <_sbrk>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	d102      	bne.n	8005982 <_sbrk_r+0x1a>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	b103      	cbz	r3, 8005982 <_sbrk_r+0x1a>
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	bd38      	pop	{r3, r4, r5, pc}
 8005984:	200001fc 	.word	0x200001fc

08005988 <__swbuf_r>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	460e      	mov	r6, r1
 800598c:	4614      	mov	r4, r2
 800598e:	4605      	mov	r5, r0
 8005990:	b118      	cbz	r0, 800599a <__swbuf_r+0x12>
 8005992:	6983      	ldr	r3, [r0, #24]
 8005994:	b90b      	cbnz	r3, 800599a <__swbuf_r+0x12>
 8005996:	f000 f9d9 	bl	8005d4c <__sinit>
 800599a:	4b21      	ldr	r3, [pc, #132]	; (8005a20 <__swbuf_r+0x98>)
 800599c:	429c      	cmp	r4, r3
 800599e:	d12b      	bne.n	80059f8 <__swbuf_r+0x70>
 80059a0:	686c      	ldr	r4, [r5, #4]
 80059a2:	69a3      	ldr	r3, [r4, #24]
 80059a4:	60a3      	str	r3, [r4, #8]
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	071a      	lsls	r2, r3, #28
 80059aa:	d52f      	bpl.n	8005a0c <__swbuf_r+0x84>
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	b36b      	cbz	r3, 8005a0c <__swbuf_r+0x84>
 80059b0:	6923      	ldr	r3, [r4, #16]
 80059b2:	6820      	ldr	r0, [r4, #0]
 80059b4:	1ac0      	subs	r0, r0, r3
 80059b6:	6963      	ldr	r3, [r4, #20]
 80059b8:	b2f6      	uxtb	r6, r6
 80059ba:	4283      	cmp	r3, r0
 80059bc:	4637      	mov	r7, r6
 80059be:	dc04      	bgt.n	80059ca <__swbuf_r+0x42>
 80059c0:	4621      	mov	r1, r4
 80059c2:	4628      	mov	r0, r5
 80059c4:	f000 f92e 	bl	8005c24 <_fflush_r>
 80059c8:	bb30      	cbnz	r0, 8005a18 <__swbuf_r+0x90>
 80059ca:	68a3      	ldr	r3, [r4, #8]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	60a3      	str	r3, [r4, #8]
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	6022      	str	r2, [r4, #0]
 80059d6:	701e      	strb	r6, [r3, #0]
 80059d8:	6963      	ldr	r3, [r4, #20]
 80059da:	3001      	adds	r0, #1
 80059dc:	4283      	cmp	r3, r0
 80059de:	d004      	beq.n	80059ea <__swbuf_r+0x62>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	07db      	lsls	r3, r3, #31
 80059e4:	d506      	bpl.n	80059f4 <__swbuf_r+0x6c>
 80059e6:	2e0a      	cmp	r6, #10
 80059e8:	d104      	bne.n	80059f4 <__swbuf_r+0x6c>
 80059ea:	4621      	mov	r1, r4
 80059ec:	4628      	mov	r0, r5
 80059ee:	f000 f919 	bl	8005c24 <_fflush_r>
 80059f2:	b988      	cbnz	r0, 8005a18 <__swbuf_r+0x90>
 80059f4:	4638      	mov	r0, r7
 80059f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f8:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <__swbuf_r+0x9c>)
 80059fa:	429c      	cmp	r4, r3
 80059fc:	d101      	bne.n	8005a02 <__swbuf_r+0x7a>
 80059fe:	68ac      	ldr	r4, [r5, #8]
 8005a00:	e7cf      	b.n	80059a2 <__swbuf_r+0x1a>
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <__swbuf_r+0xa0>)
 8005a04:	429c      	cmp	r4, r3
 8005a06:	bf08      	it	eq
 8005a08:	68ec      	ldreq	r4, [r5, #12]
 8005a0a:	e7ca      	b.n	80059a2 <__swbuf_r+0x1a>
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 f80c 	bl	8005a2c <__swsetup_r>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d0cb      	beq.n	80059b0 <__swbuf_r+0x28>
 8005a18:	f04f 37ff 	mov.w	r7, #4294967295
 8005a1c:	e7ea      	b.n	80059f4 <__swbuf_r+0x6c>
 8005a1e:	bf00      	nop
 8005a20:	08006514 	.word	0x08006514
 8005a24:	08006534 	.word	0x08006534
 8005a28:	080064f4 	.word	0x080064f4

08005a2c <__swsetup_r>:
 8005a2c:	4b32      	ldr	r3, [pc, #200]	; (8005af8 <__swsetup_r+0xcc>)
 8005a2e:	b570      	push	{r4, r5, r6, lr}
 8005a30:	681d      	ldr	r5, [r3, #0]
 8005a32:	4606      	mov	r6, r0
 8005a34:	460c      	mov	r4, r1
 8005a36:	b125      	cbz	r5, 8005a42 <__swsetup_r+0x16>
 8005a38:	69ab      	ldr	r3, [r5, #24]
 8005a3a:	b913      	cbnz	r3, 8005a42 <__swsetup_r+0x16>
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f000 f985 	bl	8005d4c <__sinit>
 8005a42:	4b2e      	ldr	r3, [pc, #184]	; (8005afc <__swsetup_r+0xd0>)
 8005a44:	429c      	cmp	r4, r3
 8005a46:	d10f      	bne.n	8005a68 <__swsetup_r+0x3c>
 8005a48:	686c      	ldr	r4, [r5, #4]
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a50:	0719      	lsls	r1, r3, #28
 8005a52:	d42c      	bmi.n	8005aae <__swsetup_r+0x82>
 8005a54:	06dd      	lsls	r5, r3, #27
 8005a56:	d411      	bmi.n	8005a7c <__swsetup_r+0x50>
 8005a58:	2309      	movs	r3, #9
 8005a5a:	6033      	str	r3, [r6, #0]
 8005a5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a60:	81a3      	strh	r3, [r4, #12]
 8005a62:	f04f 30ff 	mov.w	r0, #4294967295
 8005a66:	e03e      	b.n	8005ae6 <__swsetup_r+0xba>
 8005a68:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <__swsetup_r+0xd4>)
 8005a6a:	429c      	cmp	r4, r3
 8005a6c:	d101      	bne.n	8005a72 <__swsetup_r+0x46>
 8005a6e:	68ac      	ldr	r4, [r5, #8]
 8005a70:	e7eb      	b.n	8005a4a <__swsetup_r+0x1e>
 8005a72:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <__swsetup_r+0xd8>)
 8005a74:	429c      	cmp	r4, r3
 8005a76:	bf08      	it	eq
 8005a78:	68ec      	ldreq	r4, [r5, #12]
 8005a7a:	e7e6      	b.n	8005a4a <__swsetup_r+0x1e>
 8005a7c:	0758      	lsls	r0, r3, #29
 8005a7e:	d512      	bpl.n	8005aa6 <__swsetup_r+0x7a>
 8005a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a82:	b141      	cbz	r1, 8005a96 <__swsetup_r+0x6a>
 8005a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a88:	4299      	cmp	r1, r3
 8005a8a:	d002      	beq.n	8005a92 <__swsetup_r+0x66>
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f7ff fa77 	bl	8004f80 <_free_r>
 8005a92:	2300      	movs	r3, #0
 8005a94:	6363      	str	r3, [r4, #52]	; 0x34
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a9c:	81a3      	strh	r3, [r4, #12]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6063      	str	r3, [r4, #4]
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	f043 0308 	orr.w	r3, r3, #8
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	6923      	ldr	r3, [r4, #16]
 8005ab0:	b94b      	cbnz	r3, 8005ac6 <__swsetup_r+0x9a>
 8005ab2:	89a3      	ldrh	r3, [r4, #12]
 8005ab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005abc:	d003      	beq.n	8005ac6 <__swsetup_r+0x9a>
 8005abe:	4621      	mov	r1, r4
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f000 fa07 	bl	8005ed4 <__smakebuf_r>
 8005ac6:	89a0      	ldrh	r0, [r4, #12]
 8005ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005acc:	f010 0301 	ands.w	r3, r0, #1
 8005ad0:	d00a      	beq.n	8005ae8 <__swsetup_r+0xbc>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60a3      	str	r3, [r4, #8]
 8005ad6:	6963      	ldr	r3, [r4, #20]
 8005ad8:	425b      	negs	r3, r3
 8005ada:	61a3      	str	r3, [r4, #24]
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	b943      	cbnz	r3, 8005af2 <__swsetup_r+0xc6>
 8005ae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ae4:	d1ba      	bne.n	8005a5c <__swsetup_r+0x30>
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	0781      	lsls	r1, r0, #30
 8005aea:	bf58      	it	pl
 8005aec:	6963      	ldrpl	r3, [r4, #20]
 8005aee:	60a3      	str	r3, [r4, #8]
 8005af0:	e7f4      	b.n	8005adc <__swsetup_r+0xb0>
 8005af2:	2000      	movs	r0, #0
 8005af4:	e7f7      	b.n	8005ae6 <__swsetup_r+0xba>
 8005af6:	bf00      	nop
 8005af8:	2000000c 	.word	0x2000000c
 8005afc:	08006514 	.word	0x08006514
 8005b00:	08006534 	.word	0x08006534
 8005b04:	080064f4 	.word	0x080064f4

08005b08 <abort>:
 8005b08:	b508      	push	{r3, lr}
 8005b0a:	2006      	movs	r0, #6
 8005b0c:	f000 faa4 	bl	8006058 <raise>
 8005b10:	2001      	movs	r0, #1
 8005b12:	f7fb fc4b 	bl	80013ac <_exit>
	...

08005b18 <__sflush_r>:
 8005b18:	898a      	ldrh	r2, [r1, #12]
 8005b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1e:	4605      	mov	r5, r0
 8005b20:	0710      	lsls	r0, r2, #28
 8005b22:	460c      	mov	r4, r1
 8005b24:	d458      	bmi.n	8005bd8 <__sflush_r+0xc0>
 8005b26:	684b      	ldr	r3, [r1, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	dc05      	bgt.n	8005b38 <__sflush_r+0x20>
 8005b2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	dc02      	bgt.n	8005b38 <__sflush_r+0x20>
 8005b32:	2000      	movs	r0, #0
 8005b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b3a:	2e00      	cmp	r6, #0
 8005b3c:	d0f9      	beq.n	8005b32 <__sflush_r+0x1a>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b44:	682f      	ldr	r7, [r5, #0]
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	d032      	beq.n	8005bb0 <__sflush_r+0x98>
 8005b4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	075a      	lsls	r2, r3, #29
 8005b50:	d505      	bpl.n	8005b5e <__sflush_r+0x46>
 8005b52:	6863      	ldr	r3, [r4, #4]
 8005b54:	1ac0      	subs	r0, r0, r3
 8005b56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b58:	b10b      	cbz	r3, 8005b5e <__sflush_r+0x46>
 8005b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b5c:	1ac0      	subs	r0, r0, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	4602      	mov	r2, r0
 8005b62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b64:	6a21      	ldr	r1, [r4, #32]
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b0      	blx	r6
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	d106      	bne.n	8005b7e <__sflush_r+0x66>
 8005b70:	6829      	ldr	r1, [r5, #0]
 8005b72:	291d      	cmp	r1, #29
 8005b74:	d82c      	bhi.n	8005bd0 <__sflush_r+0xb8>
 8005b76:	4a2a      	ldr	r2, [pc, #168]	; (8005c20 <__sflush_r+0x108>)
 8005b78:	40ca      	lsrs	r2, r1
 8005b7a:	07d6      	lsls	r6, r2, #31
 8005b7c:	d528      	bpl.n	8005bd0 <__sflush_r+0xb8>
 8005b7e:	2200      	movs	r2, #0
 8005b80:	6062      	str	r2, [r4, #4]
 8005b82:	04d9      	lsls	r1, r3, #19
 8005b84:	6922      	ldr	r2, [r4, #16]
 8005b86:	6022      	str	r2, [r4, #0]
 8005b88:	d504      	bpl.n	8005b94 <__sflush_r+0x7c>
 8005b8a:	1c42      	adds	r2, r0, #1
 8005b8c:	d101      	bne.n	8005b92 <__sflush_r+0x7a>
 8005b8e:	682b      	ldr	r3, [r5, #0]
 8005b90:	b903      	cbnz	r3, 8005b94 <__sflush_r+0x7c>
 8005b92:	6560      	str	r0, [r4, #84]	; 0x54
 8005b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b96:	602f      	str	r7, [r5, #0]
 8005b98:	2900      	cmp	r1, #0
 8005b9a:	d0ca      	beq.n	8005b32 <__sflush_r+0x1a>
 8005b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ba0:	4299      	cmp	r1, r3
 8005ba2:	d002      	beq.n	8005baa <__sflush_r+0x92>
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f7ff f9eb 	bl	8004f80 <_free_r>
 8005baa:	2000      	movs	r0, #0
 8005bac:	6360      	str	r0, [r4, #52]	; 0x34
 8005bae:	e7c1      	b.n	8005b34 <__sflush_r+0x1c>
 8005bb0:	6a21      	ldr	r1, [r4, #32]
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	47b0      	blx	r6
 8005bb8:	1c41      	adds	r1, r0, #1
 8005bba:	d1c7      	bne.n	8005b4c <__sflush_r+0x34>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0c4      	beq.n	8005b4c <__sflush_r+0x34>
 8005bc2:	2b1d      	cmp	r3, #29
 8005bc4:	d001      	beq.n	8005bca <__sflush_r+0xb2>
 8005bc6:	2b16      	cmp	r3, #22
 8005bc8:	d101      	bne.n	8005bce <__sflush_r+0xb6>
 8005bca:	602f      	str	r7, [r5, #0]
 8005bcc:	e7b1      	b.n	8005b32 <__sflush_r+0x1a>
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	e7ad      	b.n	8005b34 <__sflush_r+0x1c>
 8005bd8:	690f      	ldr	r7, [r1, #16]
 8005bda:	2f00      	cmp	r7, #0
 8005bdc:	d0a9      	beq.n	8005b32 <__sflush_r+0x1a>
 8005bde:	0793      	lsls	r3, r2, #30
 8005be0:	680e      	ldr	r6, [r1, #0]
 8005be2:	bf08      	it	eq
 8005be4:	694b      	ldreq	r3, [r1, #20]
 8005be6:	600f      	str	r7, [r1, #0]
 8005be8:	bf18      	it	ne
 8005bea:	2300      	movne	r3, #0
 8005bec:	eba6 0807 	sub.w	r8, r6, r7
 8005bf0:	608b      	str	r3, [r1, #8]
 8005bf2:	f1b8 0f00 	cmp.w	r8, #0
 8005bf6:	dd9c      	ble.n	8005b32 <__sflush_r+0x1a>
 8005bf8:	6a21      	ldr	r1, [r4, #32]
 8005bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bfc:	4643      	mov	r3, r8
 8005bfe:	463a      	mov	r2, r7
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b0      	blx	r6
 8005c04:	2800      	cmp	r0, #0
 8005c06:	dc06      	bgt.n	8005c16 <__sflush_r+0xfe>
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c0e:	81a3      	strh	r3, [r4, #12]
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	e78e      	b.n	8005b34 <__sflush_r+0x1c>
 8005c16:	4407      	add	r7, r0
 8005c18:	eba8 0800 	sub.w	r8, r8, r0
 8005c1c:	e7e9      	b.n	8005bf2 <__sflush_r+0xda>
 8005c1e:	bf00      	nop
 8005c20:	20400001 	.word	0x20400001

08005c24 <_fflush_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	690b      	ldr	r3, [r1, #16]
 8005c28:	4605      	mov	r5, r0
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	b913      	cbnz	r3, 8005c34 <_fflush_r+0x10>
 8005c2e:	2500      	movs	r5, #0
 8005c30:	4628      	mov	r0, r5
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	b118      	cbz	r0, 8005c3e <_fflush_r+0x1a>
 8005c36:	6983      	ldr	r3, [r0, #24]
 8005c38:	b90b      	cbnz	r3, 8005c3e <_fflush_r+0x1a>
 8005c3a:	f000 f887 	bl	8005d4c <__sinit>
 8005c3e:	4b14      	ldr	r3, [pc, #80]	; (8005c90 <_fflush_r+0x6c>)
 8005c40:	429c      	cmp	r4, r3
 8005c42:	d11b      	bne.n	8005c7c <_fflush_r+0x58>
 8005c44:	686c      	ldr	r4, [r5, #4]
 8005c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0ef      	beq.n	8005c2e <_fflush_r+0xa>
 8005c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c50:	07d0      	lsls	r0, r2, #31
 8005c52:	d404      	bmi.n	8005c5e <_fflush_r+0x3a>
 8005c54:	0599      	lsls	r1, r3, #22
 8005c56:	d402      	bmi.n	8005c5e <_fflush_r+0x3a>
 8005c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5a:	f000 f915 	bl	8005e88 <__retarget_lock_acquire_recursive>
 8005c5e:	4628      	mov	r0, r5
 8005c60:	4621      	mov	r1, r4
 8005c62:	f7ff ff59 	bl	8005b18 <__sflush_r>
 8005c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c68:	07da      	lsls	r2, r3, #31
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	d4e0      	bmi.n	8005c30 <_fflush_r+0xc>
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	059b      	lsls	r3, r3, #22
 8005c72:	d4dd      	bmi.n	8005c30 <_fflush_r+0xc>
 8005c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c76:	f000 f908 	bl	8005e8a <__retarget_lock_release_recursive>
 8005c7a:	e7d9      	b.n	8005c30 <_fflush_r+0xc>
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <_fflush_r+0x70>)
 8005c7e:	429c      	cmp	r4, r3
 8005c80:	d101      	bne.n	8005c86 <_fflush_r+0x62>
 8005c82:	68ac      	ldr	r4, [r5, #8]
 8005c84:	e7df      	b.n	8005c46 <_fflush_r+0x22>
 8005c86:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <_fflush_r+0x74>)
 8005c88:	429c      	cmp	r4, r3
 8005c8a:	bf08      	it	eq
 8005c8c:	68ec      	ldreq	r4, [r5, #12]
 8005c8e:	e7da      	b.n	8005c46 <_fflush_r+0x22>
 8005c90:	08006514 	.word	0x08006514
 8005c94:	08006534 	.word	0x08006534
 8005c98:	080064f4 	.word	0x080064f4

08005c9c <std>:
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	b510      	push	{r4, lr}
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005caa:	6083      	str	r3, [r0, #8]
 8005cac:	8181      	strh	r1, [r0, #12]
 8005cae:	6643      	str	r3, [r0, #100]	; 0x64
 8005cb0:	81c2      	strh	r2, [r0, #14]
 8005cb2:	6183      	str	r3, [r0, #24]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	305c      	adds	r0, #92	; 0x5c
 8005cba:	f7ff f865 	bl	8004d88 <memset>
 8005cbe:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <std+0x38>)
 8005cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8005cc2:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <std+0x3c>)
 8005cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cc6:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <std+0x40>)
 8005cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <std+0x44>)
 8005ccc:	6224      	str	r4, [r4, #32]
 8005cce:	6323      	str	r3, [r4, #48]	; 0x30
 8005cd0:	bd10      	pop	{r4, pc}
 8005cd2:	bf00      	nop
 8005cd4:	08006091 	.word	0x08006091
 8005cd8:	080060b3 	.word	0x080060b3
 8005cdc:	080060eb 	.word	0x080060eb
 8005ce0:	0800610f 	.word	0x0800610f

08005ce4 <_cleanup_r>:
 8005ce4:	4901      	ldr	r1, [pc, #4]	; (8005cec <_cleanup_r+0x8>)
 8005ce6:	f000 b8af 	b.w	8005e48 <_fwalk_reent>
 8005cea:	bf00      	nop
 8005cec:	08005c25 	.word	0x08005c25

08005cf0 <__sfmoreglue>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	1e4a      	subs	r2, r1, #1
 8005cf4:	2568      	movs	r5, #104	; 0x68
 8005cf6:	4355      	muls	r5, r2
 8005cf8:	460e      	mov	r6, r1
 8005cfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005cfe:	f7ff f98f 	bl	8005020 <_malloc_r>
 8005d02:	4604      	mov	r4, r0
 8005d04:	b140      	cbz	r0, 8005d18 <__sfmoreglue+0x28>
 8005d06:	2100      	movs	r1, #0
 8005d08:	e9c0 1600 	strd	r1, r6, [r0]
 8005d0c:	300c      	adds	r0, #12
 8005d0e:	60a0      	str	r0, [r4, #8]
 8005d10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d14:	f7ff f838 	bl	8004d88 <memset>
 8005d18:	4620      	mov	r0, r4
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}

08005d1c <__sfp_lock_acquire>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	; (8005d24 <__sfp_lock_acquire+0x8>)
 8005d1e:	f000 b8b3 	b.w	8005e88 <__retarget_lock_acquire_recursive>
 8005d22:	bf00      	nop
 8005d24:	200001f8 	.word	0x200001f8

08005d28 <__sfp_lock_release>:
 8005d28:	4801      	ldr	r0, [pc, #4]	; (8005d30 <__sfp_lock_release+0x8>)
 8005d2a:	f000 b8ae 	b.w	8005e8a <__retarget_lock_release_recursive>
 8005d2e:	bf00      	nop
 8005d30:	200001f8 	.word	0x200001f8

08005d34 <__sinit_lock_acquire>:
 8005d34:	4801      	ldr	r0, [pc, #4]	; (8005d3c <__sinit_lock_acquire+0x8>)
 8005d36:	f000 b8a7 	b.w	8005e88 <__retarget_lock_acquire_recursive>
 8005d3a:	bf00      	nop
 8005d3c:	200001f3 	.word	0x200001f3

08005d40 <__sinit_lock_release>:
 8005d40:	4801      	ldr	r0, [pc, #4]	; (8005d48 <__sinit_lock_release+0x8>)
 8005d42:	f000 b8a2 	b.w	8005e8a <__retarget_lock_release_recursive>
 8005d46:	bf00      	nop
 8005d48:	200001f3 	.word	0x200001f3

08005d4c <__sinit>:
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	4604      	mov	r4, r0
 8005d50:	f7ff fff0 	bl	8005d34 <__sinit_lock_acquire>
 8005d54:	69a3      	ldr	r3, [r4, #24]
 8005d56:	b11b      	cbz	r3, 8005d60 <__sinit+0x14>
 8005d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d5c:	f7ff bff0 	b.w	8005d40 <__sinit_lock_release>
 8005d60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d64:	6523      	str	r3, [r4, #80]	; 0x50
 8005d66:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <__sinit+0x68>)
 8005d68:	4a13      	ldr	r2, [pc, #76]	; (8005db8 <__sinit+0x6c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d6e:	42a3      	cmp	r3, r4
 8005d70:	bf04      	itt	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	61a3      	streq	r3, [r4, #24]
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 f820 	bl	8005dbc <__sfp>
 8005d7c:	6060      	str	r0, [r4, #4]
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f000 f81c 	bl	8005dbc <__sfp>
 8005d84:	60a0      	str	r0, [r4, #8]
 8005d86:	4620      	mov	r0, r4
 8005d88:	f000 f818 	bl	8005dbc <__sfp>
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	60e0      	str	r0, [r4, #12]
 8005d90:	2104      	movs	r1, #4
 8005d92:	6860      	ldr	r0, [r4, #4]
 8005d94:	f7ff ff82 	bl	8005c9c <std>
 8005d98:	68a0      	ldr	r0, [r4, #8]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	2109      	movs	r1, #9
 8005d9e:	f7ff ff7d 	bl	8005c9c <std>
 8005da2:	68e0      	ldr	r0, [r4, #12]
 8005da4:	2202      	movs	r2, #2
 8005da6:	2112      	movs	r1, #18
 8005da8:	f7ff ff78 	bl	8005c9c <std>
 8005dac:	2301      	movs	r3, #1
 8005dae:	61a3      	str	r3, [r4, #24]
 8005db0:	e7d2      	b.n	8005d58 <__sinit+0xc>
 8005db2:	bf00      	nop
 8005db4:	08006408 	.word	0x08006408
 8005db8:	08005ce5 	.word	0x08005ce5

08005dbc <__sfp>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	4607      	mov	r7, r0
 8005dc0:	f7ff ffac 	bl	8005d1c <__sfp_lock_acquire>
 8005dc4:	4b1e      	ldr	r3, [pc, #120]	; (8005e40 <__sfp+0x84>)
 8005dc6:	681e      	ldr	r6, [r3, #0]
 8005dc8:	69b3      	ldr	r3, [r6, #24]
 8005dca:	b913      	cbnz	r3, 8005dd2 <__sfp+0x16>
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7ff ffbd 	bl	8005d4c <__sinit>
 8005dd2:	3648      	adds	r6, #72	; 0x48
 8005dd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	d503      	bpl.n	8005de4 <__sfp+0x28>
 8005ddc:	6833      	ldr	r3, [r6, #0]
 8005dde:	b30b      	cbz	r3, 8005e24 <__sfp+0x68>
 8005de0:	6836      	ldr	r6, [r6, #0]
 8005de2:	e7f7      	b.n	8005dd4 <__sfp+0x18>
 8005de4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005de8:	b9d5      	cbnz	r5, 8005e20 <__sfp+0x64>
 8005dea:	4b16      	ldr	r3, [pc, #88]	; (8005e44 <__sfp+0x88>)
 8005dec:	60e3      	str	r3, [r4, #12]
 8005dee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005df2:	6665      	str	r5, [r4, #100]	; 0x64
 8005df4:	f000 f847 	bl	8005e86 <__retarget_lock_init_recursive>
 8005df8:	f7ff ff96 	bl	8005d28 <__sfp_lock_release>
 8005dfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e04:	6025      	str	r5, [r4, #0]
 8005e06:	61a5      	str	r5, [r4, #24]
 8005e08:	2208      	movs	r2, #8
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e10:	f7fe ffba 	bl	8004d88 <memset>
 8005e14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e20:	3468      	adds	r4, #104	; 0x68
 8005e22:	e7d9      	b.n	8005dd8 <__sfp+0x1c>
 8005e24:	2104      	movs	r1, #4
 8005e26:	4638      	mov	r0, r7
 8005e28:	f7ff ff62 	bl	8005cf0 <__sfmoreglue>
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	6030      	str	r0, [r6, #0]
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d1d5      	bne.n	8005de0 <__sfp+0x24>
 8005e34:	f7ff ff78 	bl	8005d28 <__sfp_lock_release>
 8005e38:	230c      	movs	r3, #12
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	e7ee      	b.n	8005e1c <__sfp+0x60>
 8005e3e:	bf00      	nop
 8005e40:	08006408 	.word	0x08006408
 8005e44:	ffff0001 	.word	0xffff0001

08005e48 <_fwalk_reent>:
 8005e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	4688      	mov	r8, r1
 8005e50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e54:	2700      	movs	r7, #0
 8005e56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e5a:	f1b9 0901 	subs.w	r9, r9, #1
 8005e5e:	d505      	bpl.n	8005e6c <_fwalk_reent+0x24>
 8005e60:	6824      	ldr	r4, [r4, #0]
 8005e62:	2c00      	cmp	r4, #0
 8005e64:	d1f7      	bne.n	8005e56 <_fwalk_reent+0xe>
 8005e66:	4638      	mov	r0, r7
 8005e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e6c:	89ab      	ldrh	r3, [r5, #12]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d907      	bls.n	8005e82 <_fwalk_reent+0x3a>
 8005e72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e76:	3301      	adds	r3, #1
 8005e78:	d003      	beq.n	8005e82 <_fwalk_reent+0x3a>
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	47c0      	blx	r8
 8005e80:	4307      	orrs	r7, r0
 8005e82:	3568      	adds	r5, #104	; 0x68
 8005e84:	e7e9      	b.n	8005e5a <_fwalk_reent+0x12>

08005e86 <__retarget_lock_init_recursive>:
 8005e86:	4770      	bx	lr

08005e88 <__retarget_lock_acquire_recursive>:
 8005e88:	4770      	bx	lr

08005e8a <__retarget_lock_release_recursive>:
 8005e8a:	4770      	bx	lr

08005e8c <__swhatbuf_r>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	460e      	mov	r6, r1
 8005e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e94:	2900      	cmp	r1, #0
 8005e96:	b096      	sub	sp, #88	; 0x58
 8005e98:	4614      	mov	r4, r2
 8005e9a:	461d      	mov	r5, r3
 8005e9c:	da07      	bge.n	8005eae <__swhatbuf_r+0x22>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	89b3      	ldrh	r3, [r6, #12]
 8005ea4:	061a      	lsls	r2, r3, #24
 8005ea6:	d410      	bmi.n	8005eca <__swhatbuf_r+0x3e>
 8005ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eac:	e00e      	b.n	8005ecc <__swhatbuf_r+0x40>
 8005eae:	466a      	mov	r2, sp
 8005eb0:	f000 f954 	bl	800615c <_fstat_r>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	dbf2      	blt.n	8005e9e <__swhatbuf_r+0x12>
 8005eb8:	9a01      	ldr	r2, [sp, #4]
 8005eba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ebe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ec2:	425a      	negs	r2, r3
 8005ec4:	415a      	adcs	r2, r3
 8005ec6:	602a      	str	r2, [r5, #0]
 8005ec8:	e7ee      	b.n	8005ea8 <__swhatbuf_r+0x1c>
 8005eca:	2340      	movs	r3, #64	; 0x40
 8005ecc:	2000      	movs	r0, #0
 8005ece:	6023      	str	r3, [r4, #0]
 8005ed0:	b016      	add	sp, #88	; 0x58
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}

08005ed4 <__smakebuf_r>:
 8005ed4:	898b      	ldrh	r3, [r1, #12]
 8005ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ed8:	079d      	lsls	r5, r3, #30
 8005eda:	4606      	mov	r6, r0
 8005edc:	460c      	mov	r4, r1
 8005ede:	d507      	bpl.n	8005ef0 <__smakebuf_r+0x1c>
 8005ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	6123      	str	r3, [r4, #16]
 8005ee8:	2301      	movs	r3, #1
 8005eea:	6163      	str	r3, [r4, #20]
 8005eec:	b002      	add	sp, #8
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	ab01      	add	r3, sp, #4
 8005ef2:	466a      	mov	r2, sp
 8005ef4:	f7ff ffca 	bl	8005e8c <__swhatbuf_r>
 8005ef8:	9900      	ldr	r1, [sp, #0]
 8005efa:	4605      	mov	r5, r0
 8005efc:	4630      	mov	r0, r6
 8005efe:	f7ff f88f 	bl	8005020 <_malloc_r>
 8005f02:	b948      	cbnz	r0, 8005f18 <__smakebuf_r+0x44>
 8005f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f08:	059a      	lsls	r2, r3, #22
 8005f0a:	d4ef      	bmi.n	8005eec <__smakebuf_r+0x18>
 8005f0c:	f023 0303 	bic.w	r3, r3, #3
 8005f10:	f043 0302 	orr.w	r3, r3, #2
 8005f14:	81a3      	strh	r3, [r4, #12]
 8005f16:	e7e3      	b.n	8005ee0 <__smakebuf_r+0xc>
 8005f18:	4b0d      	ldr	r3, [pc, #52]	; (8005f50 <__smakebuf_r+0x7c>)
 8005f1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	6020      	str	r0, [r4, #0]
 8005f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	6163      	str	r3, [r4, #20]
 8005f2a:	9b01      	ldr	r3, [sp, #4]
 8005f2c:	6120      	str	r0, [r4, #16]
 8005f2e:	b15b      	cbz	r3, 8005f48 <__smakebuf_r+0x74>
 8005f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f34:	4630      	mov	r0, r6
 8005f36:	f000 f923 	bl	8006180 <_isatty_r>
 8005f3a:	b128      	cbz	r0, 8005f48 <__smakebuf_r+0x74>
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	81a3      	strh	r3, [r4, #12]
 8005f48:	89a0      	ldrh	r0, [r4, #12]
 8005f4a:	4305      	orrs	r5, r0
 8005f4c:	81a5      	strh	r5, [r4, #12]
 8005f4e:	e7cd      	b.n	8005eec <__smakebuf_r+0x18>
 8005f50:	08005ce5 	.word	0x08005ce5

08005f54 <memcpy>:
 8005f54:	440a      	add	r2, r1
 8005f56:	4291      	cmp	r1, r2
 8005f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f5c:	d100      	bne.n	8005f60 <memcpy+0xc>
 8005f5e:	4770      	bx	lr
 8005f60:	b510      	push	{r4, lr}
 8005f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f6a:	4291      	cmp	r1, r2
 8005f6c:	d1f9      	bne.n	8005f62 <memcpy+0xe>
 8005f6e:	bd10      	pop	{r4, pc}

08005f70 <memmove>:
 8005f70:	4288      	cmp	r0, r1
 8005f72:	b510      	push	{r4, lr}
 8005f74:	eb01 0402 	add.w	r4, r1, r2
 8005f78:	d902      	bls.n	8005f80 <memmove+0x10>
 8005f7a:	4284      	cmp	r4, r0
 8005f7c:	4623      	mov	r3, r4
 8005f7e:	d807      	bhi.n	8005f90 <memmove+0x20>
 8005f80:	1e43      	subs	r3, r0, #1
 8005f82:	42a1      	cmp	r1, r4
 8005f84:	d008      	beq.n	8005f98 <memmove+0x28>
 8005f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f8e:	e7f8      	b.n	8005f82 <memmove+0x12>
 8005f90:	4402      	add	r2, r0
 8005f92:	4601      	mov	r1, r0
 8005f94:	428a      	cmp	r2, r1
 8005f96:	d100      	bne.n	8005f9a <memmove+0x2a>
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fa2:	e7f7      	b.n	8005f94 <memmove+0x24>

08005fa4 <__malloc_lock>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	; (8005fac <__malloc_lock+0x8>)
 8005fa6:	f7ff bf6f 	b.w	8005e88 <__retarget_lock_acquire_recursive>
 8005faa:	bf00      	nop
 8005fac:	200001f4 	.word	0x200001f4

08005fb0 <__malloc_unlock>:
 8005fb0:	4801      	ldr	r0, [pc, #4]	; (8005fb8 <__malloc_unlock+0x8>)
 8005fb2:	f7ff bf6a 	b.w	8005e8a <__retarget_lock_release_recursive>
 8005fb6:	bf00      	nop
 8005fb8:	200001f4 	.word	0x200001f4

08005fbc <_realloc_r>:
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	4614      	mov	r4, r2
 8005fc2:	460e      	mov	r6, r1
 8005fc4:	b921      	cbnz	r1, 8005fd0 <_realloc_r+0x14>
 8005fc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005fca:	4611      	mov	r1, r2
 8005fcc:	f7ff b828 	b.w	8005020 <_malloc_r>
 8005fd0:	b922      	cbnz	r2, 8005fdc <_realloc_r+0x20>
 8005fd2:	f7fe ffd5 	bl	8004f80 <_free_r>
 8005fd6:	4625      	mov	r5, r4
 8005fd8:	4628      	mov	r0, r5
 8005fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fdc:	f000 f8f2 	bl	80061c4 <_malloc_usable_size_r>
 8005fe0:	42a0      	cmp	r0, r4
 8005fe2:	d20f      	bcs.n	8006004 <_realloc_r+0x48>
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	f7ff f81a 	bl	8005020 <_malloc_r>
 8005fec:	4605      	mov	r5, r0
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d0f2      	beq.n	8005fd8 <_realloc_r+0x1c>
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	f7ff ffad 	bl	8005f54 <memcpy>
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f7fe ffbf 	bl	8004f80 <_free_r>
 8006002:	e7e9      	b.n	8005fd8 <_realloc_r+0x1c>
 8006004:	4635      	mov	r5, r6
 8006006:	e7e7      	b.n	8005fd8 <_realloc_r+0x1c>

08006008 <_raise_r>:
 8006008:	291f      	cmp	r1, #31
 800600a:	b538      	push	{r3, r4, r5, lr}
 800600c:	4604      	mov	r4, r0
 800600e:	460d      	mov	r5, r1
 8006010:	d904      	bls.n	800601c <_raise_r+0x14>
 8006012:	2316      	movs	r3, #22
 8006014:	6003      	str	r3, [r0, #0]
 8006016:	f04f 30ff 	mov.w	r0, #4294967295
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800601e:	b112      	cbz	r2, 8006026 <_raise_r+0x1e>
 8006020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006024:	b94b      	cbnz	r3, 800603a <_raise_r+0x32>
 8006026:	4620      	mov	r0, r4
 8006028:	f000 f830 	bl	800608c <_getpid_r>
 800602c:	462a      	mov	r2, r5
 800602e:	4601      	mov	r1, r0
 8006030:	4620      	mov	r0, r4
 8006032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006036:	f000 b817 	b.w	8006068 <_kill_r>
 800603a:	2b01      	cmp	r3, #1
 800603c:	d00a      	beq.n	8006054 <_raise_r+0x4c>
 800603e:	1c59      	adds	r1, r3, #1
 8006040:	d103      	bne.n	800604a <_raise_r+0x42>
 8006042:	2316      	movs	r3, #22
 8006044:	6003      	str	r3, [r0, #0]
 8006046:	2001      	movs	r0, #1
 8006048:	e7e7      	b.n	800601a <_raise_r+0x12>
 800604a:	2400      	movs	r4, #0
 800604c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006050:	4628      	mov	r0, r5
 8006052:	4798      	blx	r3
 8006054:	2000      	movs	r0, #0
 8006056:	e7e0      	b.n	800601a <_raise_r+0x12>

08006058 <raise>:
 8006058:	4b02      	ldr	r3, [pc, #8]	; (8006064 <raise+0xc>)
 800605a:	4601      	mov	r1, r0
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	f7ff bfd3 	b.w	8006008 <_raise_r>
 8006062:	bf00      	nop
 8006064:	2000000c 	.word	0x2000000c

08006068 <_kill_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4d07      	ldr	r5, [pc, #28]	; (8006088 <_kill_r+0x20>)
 800606c:	2300      	movs	r3, #0
 800606e:	4604      	mov	r4, r0
 8006070:	4608      	mov	r0, r1
 8006072:	4611      	mov	r1, r2
 8006074:	602b      	str	r3, [r5, #0]
 8006076:	f7fb f989 	bl	800138c <_kill>
 800607a:	1c43      	adds	r3, r0, #1
 800607c:	d102      	bne.n	8006084 <_kill_r+0x1c>
 800607e:	682b      	ldr	r3, [r5, #0]
 8006080:	b103      	cbz	r3, 8006084 <_kill_r+0x1c>
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	bd38      	pop	{r3, r4, r5, pc}
 8006086:	bf00      	nop
 8006088:	200001fc 	.word	0x200001fc

0800608c <_getpid_r>:
 800608c:	f7fb b976 	b.w	800137c <_getpid>

08006090 <__sread>:
 8006090:	b510      	push	{r4, lr}
 8006092:	460c      	mov	r4, r1
 8006094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006098:	f000 f89c 	bl	80061d4 <_read_r>
 800609c:	2800      	cmp	r0, #0
 800609e:	bfab      	itete	ge
 80060a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060a2:	89a3      	ldrhlt	r3, [r4, #12]
 80060a4:	181b      	addge	r3, r3, r0
 80060a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060aa:	bfac      	ite	ge
 80060ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80060ae:	81a3      	strhlt	r3, [r4, #12]
 80060b0:	bd10      	pop	{r4, pc}

080060b2 <__swrite>:
 80060b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b6:	461f      	mov	r7, r3
 80060b8:	898b      	ldrh	r3, [r1, #12]
 80060ba:	05db      	lsls	r3, r3, #23
 80060bc:	4605      	mov	r5, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	4616      	mov	r6, r2
 80060c2:	d505      	bpl.n	80060d0 <__swrite+0x1e>
 80060c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c8:	2302      	movs	r3, #2
 80060ca:	2200      	movs	r2, #0
 80060cc:	f000 f868 	bl	80061a0 <_lseek_r>
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060da:	81a3      	strh	r3, [r4, #12]
 80060dc:	4632      	mov	r2, r6
 80060de:	463b      	mov	r3, r7
 80060e0:	4628      	mov	r0, r5
 80060e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060e6:	f000 b817 	b.w	8006118 <_write_r>

080060ea <__sseek>:
 80060ea:	b510      	push	{r4, lr}
 80060ec:	460c      	mov	r4, r1
 80060ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f2:	f000 f855 	bl	80061a0 <_lseek_r>
 80060f6:	1c43      	adds	r3, r0, #1
 80060f8:	89a3      	ldrh	r3, [r4, #12]
 80060fa:	bf15      	itete	ne
 80060fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80060fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006106:	81a3      	strheq	r3, [r4, #12]
 8006108:	bf18      	it	ne
 800610a:	81a3      	strhne	r3, [r4, #12]
 800610c:	bd10      	pop	{r4, pc}

0800610e <__sclose>:
 800610e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006112:	f000 b813 	b.w	800613c <_close_r>
	...

08006118 <_write_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4d07      	ldr	r5, [pc, #28]	; (8006138 <_write_r+0x20>)
 800611c:	4604      	mov	r4, r0
 800611e:	4608      	mov	r0, r1
 8006120:	4611      	mov	r1, r2
 8006122:	2200      	movs	r2, #0
 8006124:	602a      	str	r2, [r5, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	f7fb f967 	bl	80013fa <_write>
 800612c:	1c43      	adds	r3, r0, #1
 800612e:	d102      	bne.n	8006136 <_write_r+0x1e>
 8006130:	682b      	ldr	r3, [r5, #0]
 8006132:	b103      	cbz	r3, 8006136 <_write_r+0x1e>
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	bd38      	pop	{r3, r4, r5, pc}
 8006138:	200001fc 	.word	0x200001fc

0800613c <_close_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4d06      	ldr	r5, [pc, #24]	; (8006158 <_close_r+0x1c>)
 8006140:	2300      	movs	r3, #0
 8006142:	4604      	mov	r4, r0
 8006144:	4608      	mov	r0, r1
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	f7fb f973 	bl	8001432 <_close>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_close_r+0x1a>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_close_r+0x1a>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	200001fc 	.word	0x200001fc

0800615c <_fstat_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4d07      	ldr	r5, [pc, #28]	; (800617c <_fstat_r+0x20>)
 8006160:	2300      	movs	r3, #0
 8006162:	4604      	mov	r4, r0
 8006164:	4608      	mov	r0, r1
 8006166:	4611      	mov	r1, r2
 8006168:	602b      	str	r3, [r5, #0]
 800616a:	f7fb f96e 	bl	800144a <_fstat>
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	d102      	bne.n	8006178 <_fstat_r+0x1c>
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	b103      	cbz	r3, 8006178 <_fstat_r+0x1c>
 8006176:	6023      	str	r3, [r4, #0]
 8006178:	bd38      	pop	{r3, r4, r5, pc}
 800617a:	bf00      	nop
 800617c:	200001fc 	.word	0x200001fc

08006180 <_isatty_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4d06      	ldr	r5, [pc, #24]	; (800619c <_isatty_r+0x1c>)
 8006184:	2300      	movs	r3, #0
 8006186:	4604      	mov	r4, r0
 8006188:	4608      	mov	r0, r1
 800618a:	602b      	str	r3, [r5, #0]
 800618c:	f7fb f96d 	bl	800146a <_isatty>
 8006190:	1c43      	adds	r3, r0, #1
 8006192:	d102      	bne.n	800619a <_isatty_r+0x1a>
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	b103      	cbz	r3, 800619a <_isatty_r+0x1a>
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	bd38      	pop	{r3, r4, r5, pc}
 800619c:	200001fc 	.word	0x200001fc

080061a0 <_lseek_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4d07      	ldr	r5, [pc, #28]	; (80061c0 <_lseek_r+0x20>)
 80061a4:	4604      	mov	r4, r0
 80061a6:	4608      	mov	r0, r1
 80061a8:	4611      	mov	r1, r2
 80061aa:	2200      	movs	r2, #0
 80061ac:	602a      	str	r2, [r5, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	f7fb f966 	bl	8001480 <_lseek>
 80061b4:	1c43      	adds	r3, r0, #1
 80061b6:	d102      	bne.n	80061be <_lseek_r+0x1e>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	b103      	cbz	r3, 80061be <_lseek_r+0x1e>
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	bd38      	pop	{r3, r4, r5, pc}
 80061c0:	200001fc 	.word	0x200001fc

080061c4 <_malloc_usable_size_r>:
 80061c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c8:	1f18      	subs	r0, r3, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	bfbc      	itt	lt
 80061ce:	580b      	ldrlt	r3, [r1, r0]
 80061d0:	18c0      	addlt	r0, r0, r3
 80061d2:	4770      	bx	lr

080061d4 <_read_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4d07      	ldr	r5, [pc, #28]	; (80061f4 <_read_r+0x20>)
 80061d8:	4604      	mov	r4, r0
 80061da:	4608      	mov	r0, r1
 80061dc:	4611      	mov	r1, r2
 80061de:	2200      	movs	r2, #0
 80061e0:	602a      	str	r2, [r5, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f7fb f8ec 	bl	80013c0 <_read>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_read_r+0x1e>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_read_r+0x1e>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	200001fc 	.word	0x200001fc

080061f8 <_init>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	bf00      	nop
 80061fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fe:	bc08      	pop	{r3}
 8006200:	469e      	mov	lr, r3
 8006202:	4770      	bx	lr

08006204 <_fini>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr
